import { EventEmitter } from '../../stencil-public-runtime';
import { CAutocompleteItem } from '../../types';
export declare class CAutocomplete {
  el: HTMLCAutocompleteElement;
  internals: ElementInternals;
  private static _uniqueId;
  private _dropdownElement;
  private _inputElement;
  private _cInputElement;
  private _inputId;
  private _preventDialogOpen;
  private _debounce;
  private get _id();
  items: CAutocompleteItem[];
  value: string | number | CAutocompleteItem;
  query: string;
  hostId: string;
  disabled: boolean;
  label: string;
  name: string;
  placeholder: string;
  hideDetails: boolean;
  hint: string;
  loading: boolean;
  required: boolean;
  valid: boolean;
  validate: boolean;
  validateOnBlur: boolean;
  validation: string;
  shadow: boolean;
  returnObject: boolean;
  changeQuery: EventEmitter;
  changeValue: EventEmitter;
  itemsPerPage: number;
  minimumQueryLength: number;
  minimumQueryLengthMessage: string;
  noMatchingItemsMessage: string;
  optionElements: NodeListOf<HTMLCOptionElement>;
  currentIndex: number;
  dropdownVisible: boolean;
  statusText: string;
  optionElementsExist: boolean;
  reset(): Promise<void>;
  private _handleKeyDown;
  onDropdownStateChange(event: CustomEvent<boolean>): void;
  onSelectOption(event: CustomEvent<{
    name: string;
    value: string;
  }>): void;
  handleQueryChange(): void;
  private _updateInput;
  private _handleSlotChange;
  private _toggleDropdown;
  private _onButtonKeyDown;
  private _renderLoader;
  private _renderChevron;
  private _reset;
  private _renderReset;
  private _onInputFocus;
  private _renderInputElement;
  componentWillLoad(): void;
  private get _items();
  private _updateStatusText;
  render(): any;
}
