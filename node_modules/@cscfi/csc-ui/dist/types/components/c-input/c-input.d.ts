import { EventEmitter } from '../../stencil-public-runtime';
import { CAutocompleteItem, CSelectItem } from '../../types';
export declare class CInput {
  el: HTMLCInputElement;
  active: boolean;
  autofocus: boolean;
  disabled: boolean;
  form: boolean;
  hideDetails: boolean;
  hint: string;
  hostId: string;
  inputId: string;
  items: CSelectItem[];
  itemsPerPage: number;
  label: string;
  max: number;
  min: number;
  name: string;
  placeholder: string;
  readonly: boolean;
  required: boolean;
  rows: number;
  shadow: boolean;
  step: number;
  type: string;
  valid: boolean;
  validate: boolean;
  validateOnBlur: boolean;
  validation: string;
  value: string | number | boolean | CSelectItem | CAutocompleteItem;
  variant: 'text' | 'select';
  changeValue: EventEmitter;
  itemClick: EventEmitter;
  dropdownClose: EventEmitter;
  isFocused: boolean;
  labelWidth: number;
  preSlotWidth: number;
  statusText: string;
  currentIndex: number;
  onValidChange(): void;
  onValidationMessageChange(): void;
  onValueChange(value: any): void;
  onPlaceholderChange(placeholder: any): void;
  private _hasBlurred;
  private _labelRef;
  private _debounce;
  private _dropdownElement;
  reset(): Promise<void>;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  get isActive(): boolean;
  private _setAriaDescriptionId;
  private _observer;
  private _calculateElementWidths;
  private _onBlur;
  private _onFocus;
  private _onReset;
  private _preventNonNumericalInput;
  private _renderBorders;
  private _renderLabel;
  get inputField(): HTMLInputElement | HTMLTextAreaElement;
  private _updateStatusText;
  render(): any;
}
