import { EventEmitter } from '../../stencil-public-runtime';
import { CSelectItem } from '../../types';
export declare class CSelect {
  el: HTMLCSelectElement;
  internals: ElementInternals;
  items: CSelectItem[];
  value: string | number | CSelectItem;
  hostId: string;
  clearable: boolean;
  disabled: boolean;
  label: string;
  name: string;
  placeholder: string;
  hideDetails: boolean;
  hint: string;
  loading: boolean;
  required: boolean;
  valid: boolean;
  validate: boolean;
  validateOnBlur: boolean;
  validation: string;
  shadow: boolean;
  returnObject: boolean;
  itemsPerPage: number;
  optionAsSelection: false;
  changeValue: EventEmitter;
  optionElements: NodeListOf<HTMLCOptionElement>;
  currentIndex: number;
  dropdownVisible: boolean;
  statusText: string;
  optionElementsExist: boolean;
  private static _uniqueId;
  private _dropdownElement;
  private _inputElement;
  private _cInputElement;
  private _selectionElement;
  private _inputId;
  private _preventDialogOpen;
  private _debounce;
  private _lastKeyPressTime;
  private _searchString;
  private get _id();
  private get _items();
  private get _value();
  reset(): Promise<void>;
  handleKeyDown(event: KeyboardEvent): void;
  onDropdownStateChange(event: CustomEvent<boolean>): void;
  onSelectOption(event: CustomEvent<{
    name: string;
    value: string;
  }>): void;
  private _setCurrentIndex;
  private _toggleDropdown;
  private _onButtonKeyDown;
  private _onSlotChange;
  private _onReset;
  private _updateInput;
  private _updateStatusText;
  private _onInputFocus;
  componentWillLoad(): void;
  componentDidLoad(): void;
  private _renderLoader;
  private _renderChevron;
  private _renderInputElement;
  private _renderReset;
  render(): any;
}
