import { EventEmitter } from '../../stencil-public-runtime';
import { CDataTableData, CDataTableDataItem, CDataTableFooterOptions, CDataTableHeader, CPaginationOptions } from '../../types';
interface CDataTableDataItemPrivate extends Omit<CDataTableDataItem, 'value'> {
  _hiddenData?: {
    id?: string;
    key?: string;
    value?: CDataTableDataItem;
  }[];
}
export declare class CDataTable {
  element: HTMLCDataTableElement;
  data: CDataTableData[];
  externalData: boolean;
  headers: CDataTableHeader[];
  hideFooter: boolean;
  footerOptions: CDataTableFooterOptions;
  loading: boolean;
  loadingText: string;
  noDataText: string;
  pagination: CPaginationOptions;
  selectable: boolean;
  singleSelection: boolean;
  selectionProperty: string;
  singleExpansion: boolean;
  sortBy: any;
  sortDirection: 'asc' | 'desc' | null;
  stickyHeader: boolean;
  horizontalScrolling: boolean;
  paginate: EventEmitter<CPaginationOptions>;
  expand: EventEmitter;
  sort: EventEmitter;
  selection: EventEmitter;
  _activeRows: (number | string)[];
  _data: CDataTableDataItemPrivate[];
  _isIndeterminate: boolean;
  _isPaginationSimple: boolean;
  _selections: (string | number)[];
  hasOverflow: boolean;
  hiddenHeaders: string[];
  initiallyHiddenHeaders: string[];
  forceRender: boolean;
  breakpoints: number[];
  markedFooterWidth: number;
  parentWidth: number;
  firstCellHidden: boolean;
  lastCellHidden: boolean;
  private _debounce;
  private _extraHeaders;
  private _rootIntersectionObserver;
  private _firstCellIntersectionObserver;
  private _lastCellIntersectionObserver;
  private _resizeObserver;
  private _tableElement;
  private _footerElement;
  private _headerRefs;
  private _isValidated;
  private _isVisible;
  private _sortedData;
  onHiddenHeaderChange(): void;
  onDataChange(): void;
  onHeaderChange(): void;
  onSingleSelectionChange(): void;
  onLoadingChange(loading: boolean): void;
  clearSelections(): Promise<void>;
  getData(): Promise<Record<string, string | number | boolean>[]>;
  componentWillLoad(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  private _handleInitialHeaders;
  private _handleHeaderVisibility;
  private _handleResponsiveHeaders;
  private _addHeaderRef;
  private _getData;
  private _getSelectionValue;
  private get _headers();
  private get _headerKeys();
  private get _hasHiddenData();
  private _emitChange;
  private _setIndeterminateStatus;
  private _sortData;
  private _handleScrollWidth;
  private _handleResize;
  private _getIndex;
  private _getSelectionsForPage;
  private _hasSelectionsOnPage;
  private _isPageIndeterminate;
  private _onHeadingSelection;
  private _onPaginationChange;
  private _onSelection;
  private _onSort;
  private _onToggleAdditionalData;
  private _handleKeyUp;
  private _refresh;
  private _renderAdditioanlDataRow;
  private _renderCellData;
  private _renderCellChildren;
  private _renderExpansionIndicator;
  private _renderHiddenCells;
  private _renderHiddenHeaderChildren;
  private _renderLoaderRow;
  private _renderRows;
  private _renderSelectionCell;
  private _renderSortIndicator;
  private _renderStatusTextRow;
  private _renderTableBody;
  private _renderTableCell;
  private _renderTableCells;
  private _renderTableFooter;
  private _renderTableHeader;
  private _scrollLeft;
  private _scrollRight;
  private _sortCellProperties;
  private _validateProps;
  render(): any;
}
export {};
