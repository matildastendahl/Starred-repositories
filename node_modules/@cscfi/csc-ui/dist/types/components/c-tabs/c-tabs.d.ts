import { EventEmitter } from '../../stencil-public-runtime';
import { CTabsJustify } from '../../types';
export declare class CTabs {
  value: number | string;
  borderless: boolean;
  disableAnimation: boolean;
  justify: CTabsJustify;
  mobileBreakpoint: number;
  vertical: boolean;
  changeValue: EventEmitter;
  el: HTMLCTabsElement;
  private _tabsTabsElement;
  private _tabsScrollElement;
  private _initialized;
  private _resizeObserver;
  private _debounce;
  private _moveDebounce;
  private _isDirty;
  private _focusedTabValue;
  private static _uniqueId;
  onJustificationChange(): void;
  onExternalValueChange(): void;
  tabFocusHandler(event: CustomEvent): void;
  tabChangeHandler(event: CustomEvent<{
    value: number | string;
    element: HTMLCTabElement;
  }>): void;
  handleKeyDown(event: KeyboardEvent): void;
  handleKeyUp(event: KeyboardEvent): void;
  private get _prefersReducedMotion();
  private get _tabItems();
  private get _tabButtons();
  private _intersectionObserver;
  private _updateItemsValue;
  componentWillLoad(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  get tabs(): HTMLCButtonElement[] | HTMLCTabElement[];
  get tabItems(): HTMLCTabItemsElement;
  get setsize(): number;
  get availableValues(): any[];
  private _previousWidth;
  private _getTabIndex;
  private _setIndicatorTop;
  private _setIndicatorLeft;
  private _setIndicatorWidth;
  private _handleActiveTab;
  private _maxScrollOffset;
  private _getDimensions;
  private _focusTab;
  private _handleResize;
  private _moveIndicator;
  private _startX;
  private _touchOffset;
  isOverflowing: boolean;
  isMobile: boolean;
  scrollOffset: number;
  onScrollOffsetChange(offset: any): void;
  private _handleOverflow;
  private _onTouchEnd;
  private _onTouchMove;
  private _onTouchStart;
  private _onBackClick;
  private _onForwardClick;
  private _moveToTab;
  render(): any;
}
