'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-91ba22ab.js');
const mdi = require('./mdi-66dcba4d.js');

const cAutocompleteCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-autocomplete){--_c-autocomplete-option-background-color:var(\n    --c-autocomplete-option-background-color,\n    var(--c-white)\n  );--_c-autocomplete-option-background-hover-color:var(\n    --c-autocomplete-option-background-hover-color,\n    var(--c-primary-100)\n  );--_c-autocomplete-active-color:var(\n    --c-autocomplete-active-color,\n    var(--c-primary-600)\n  );--_c-autocomplete-inactive-color:var(\n    --c-autocomplete-inactive-color,\n    var(--c-tertiary-600)\n  );--_c-autocomplete-background-color:var(\n    --c-autocomplete-background-color,\n    var(--c-transparent)\n  );--_c-autocomplete-text-color:var(\n    --c-autocomplete-text-color,\n    var(--c-text-body)\n  );--_c-autocomplete-option-text-color:var(\n    --c-autocomplete-option-text-color,\n    var(--c-text-body)\n  );--_c-autocomplete-placeholder-color:var(\n    --c-autocomplete-placeholder-color,\n    var(--c-tertiary-500)\n  );--c-select-option-background-color:var(\n    --_c-autocomplete-option-background-color\n  );--c-select-option-background-color-hover:var(\n    --_c-autocomplete-option-background-hover-color\n  );--c-select-option-text-color:var(--_c-autocomplete-option-text-color);--_c-input-active-color:var(--_c-autocomplete-active-color);--_c-input-inactive-color:var(--_c-autocomplete-inactive-color);--_c-input-background-color:var(--_c-autocomplete-background-color);--_c-input-text-color:var(--_c-autocomplete-text-color);--_c-input-placeholder-color:var(--_c-autocomplete-placeholder-color)}:host{display:block;cursor:text}.c-input-menu__chevron{fill:currentColor;transform:rotate(0deg);transition:transform 0.3s ease-in-out}.c-input-menu__chevron--active{transform:rotate(180deg)}.c-input-menu__input{width:100%;display:flex;justify-items:stretch}.c-input-menu__selection{display:none;pointer-events:none}.c-input-menu__selection--show{align-items:center;display:flex;width:100%;color:var(--_c-select-active-color)}.c-input-menu__item-wrapper{position:absolute;width:100%;top:44px;z-index:10;margin-left:calc(var(--_c-input-label-position) * -1)}.c-input-menu__item-wrapper--shadow{top:47px}.c-input-menu__items{position:absolute;background-color:var(--_c-select-option-background-color);min-width:calc(100% + 24px);box-shadow:0 8px 16px 0 rgba(0, 0, 0, 0.2);z-index:10;user-select:none;border-radius:4px;margin:0 -12px;overflow-y:scroll;list-style:none;padding:0}.c-input-menu__items--hidden{display:none}.c-input-menu__items li{cursor:pointer;display:flex;min-height:48px;padding:0 12px;transition:background-color 0.3s;font-size:14px;align-items:center;justify-content:flex-start;color:var(--_c-select-option-text-color)}.c-input-menu__items li.disabled{background-color:var(--c-tertiary-100);filter:grayscale(1) opacity(0.6);cursor:default}.c-input-menu__items li.disabled:hover{background-color:var(--c-tertiary-100)}.c-input-menu__items li.dense{padding:10px 14px}.c-input-menu__items li:hover{background-color:var(--_c-select-option-background-color-hover)}.c-input-menu__items li[aria-selected=true]{background-color:var(--_c-select-option-background-color-hover);box-shadow:inset 0 0 0 1px var(--_c-select-active-color);border-radius:4px;backface-visibility:hidden;transform:translate3d(0, 0, 0)}.c-input-menu__items li.none{color:rgba(0, 0, 0, 0.5)}.c-input-menu__items--empty li{color:var(--c-text-system);cursor:default;gap:8px;pointer-events:none}.c-input-menu__items--empty li svg{fill:var(--c-warning-600);height:18px;width:18px}input{max-height:32px;padding:8px 0;background-color:transparent;border:none;color:var(--c-text-body);flex:1 1 auto;font-family:var(--c-font-family);font-size:16px;line-height:20px;max-width:100%;min-width:0;width:100%;pointer-events:none}input:focus,input:active{outline:none}input::-ms-reveal{display:none}svg{fill:currentColor;height:22px;width:22px}.c-input--disabled{color:var(--c-tertiary-400)}.c-input:focus-within{color:var(--c-primary-600)}.c-input--error{color:var(--c-error-600)}.c-input--error:focus-within{color:var(--c-error-600)}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}";

const CAutocomplete = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeQuery = index.createEvent(this, "changeQuery", 7);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    if (hostRef.$hostElement$["s-ei"]) {
      this.internals = hostRef.$hostElement$["s-ei"];
    }
    else {
      this.internals = hostRef.$hostElement$.attachInternals();
      hostRef.$hostElement$["s-ei"] = this.internals;
    }
    this._preventDialogOpen = false;
    this._debounce = null;
    this._handleSlotChange = () => {
      this.optionElements = this.el.querySelectorAll('c-option');
      const selection = Array.from(this.optionElements).find((option) => option.selected);
      if (selection) {
        this.value = this.returnObject
          ? { name: selection.name, value: selection.value }
          : selection.value;
        this.changeValue.emit(this.value);
        this.changeQuery.emit(this.query);
        this.internals.setFormValue(selection.value.toString());
      }
      if (this.optionElements.length && !this.optionElementsExist) {
        this.optionElementsExist = true;
      }
    };
    this._toggleDropdown = (event) => {
      event.stopPropagation();
      if (this.dropdownVisible) {
        this._dropdownElement.close();
        return;
      }
      this._dropdownElement.open();
    };
    this._onButtonKeyDown = (src, event) => {
      event.stopPropagation();
      if (event.key !== 'Tab')
        event.preventDefault();
      if (['Enter', ' '].includes(event.key)) {
        if (src === 'chevron') {
          this._toggleDropdown(event);
          return;
        }
        this._reset(event);
        this._preventDialogOpen = true;
        this._inputElement.focus();
      }
    };
    this._reset = (event) => {
      event.stopPropagation();
      this.query = '';
      this.value = null;
      this.changeValue.emit(null);
      this.internals.setFormValue(null);
      this.changeQuery.emit('');
      this._preventDialogOpen = true;
      this._cInputElement.reset();
      this._inputElement.focus();
      this._dropdownElement.updateList();
    };
    this._onInputFocus = () => {
      if (!this._preventDialogOpen) {
        this._dropdownElement.open();
      }
      this._updateStatusText();
      this._preventDialogOpen = false;
    };
    this.items = [];
    this.value = null;
    this.query = null;
    this.hostId = undefined;
    this.disabled = false;
    this.label = undefined;
    this.name = undefined;
    this.placeholder = '';
    this.hideDetails = false;
    this.hint = '';
    this.loading = false;
    this.required = false;
    this.valid = true;
    this.validate = false;
    this.validateOnBlur = false;
    this.validation = 'Required field';
    this.shadow = false;
    this.returnObject = false;
    this.itemsPerPage = 6;
    this.minimumQueryLength = 0;
    this.minimumQueryLengthMessage = 'Type at least {n} characters';
    this.noMatchingItemsMessage = 'No suggestions found';
    this.optionElements = undefined;
    this.currentIndex = null;
    this.dropdownVisible = false;
    this.statusText = '';
    this.optionElementsExist = false;
  }
  get _id() {
    return this.hostId || `autocomplete_${CAutocomplete._uniqueId}`;
  }
  async reset() {
    this.query = '';
    this.changeValue.emit(null);
    this.internals.setFormValue(null);
    this.changeQuery.emit('');
    this._dropdownElement.updateList();
  }
  _handleKeyDown(event) {
    const alphanumeric = /^[0-9a-zA-Z ]+$/;
    if (event.key.match(alphanumeric) && event.key.length === 1) {
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
        return;
      }
      this._inputElement.focus();
      return;
    }
    if (event.key === 'Escape') {
      event.preventDefault();
      this._preventDialogOpen = true;
      this._dropdownElement.close();
      requestAnimationFrame(() => {
        this._inputElement.focus();
      });
      return;
    }
    if (event.key === 'Tab') {
      this._inputElement.focus();
      requestAnimationFrame(() => {
        this._dropdownElement.close();
      });
      return;
    }
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      if (!this._items.length)
        return;
      if (!this.dropdownVisible || this.currentIndex === null) {
        this.currentIndex = 0;
        this._dropdownElement.open();
        this._dropdownElement.focusItem(this.currentIndex);
        return;
      }
      this.currentIndex = Math.min(this.currentIndex + 1, this._items.length - 1);
      this._dropdownElement.focusItem(this.currentIndex);
      return;
    }
    if (event.key === 'ArrowUp') {
      event.preventDefault();
      if (this.currentIndex === 0) {
        this._dropdownElement.close();
        this._inputElement.focus();
      }
      if (!this.dropdownVisible || this.currentIndex === null) {
        this.currentIndex = this._items.length - 1;
        this._dropdownElement.open();
        this._dropdownElement.focusItem(this.currentIndex);
        return;
      }
      this.currentIndex = Math.max(this.currentIndex - 1, 0);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === 'Enter') {
      event.preventDefault();
      if (this.currentIndex === null)
        return;
      this._dropdownElement.selectItem(this.currentIndex);
    }
    if (event.key === 'Home' && this.dropdownVisible) {
      this.currentIndex = 0;
    }
    if (event.key === 'End' && this.dropdownVisible) {
      this.currentIndex = this._items.length - 1;
    }
  }
  onDropdownStateChange(event) {
    const isOpen = event.detail;
    this.dropdownVisible = isOpen;
    if (!isOpen) {
      requestAnimationFrame(() => {
        this.currentIndex = null;
      });
    }
  }
  onSelectOption(event) {
    this._dropdownElement.close();
    const { name, value } = event.detail;
    this.value = this.returnObject ? event.detail : value;
    this.changeValue.emit(this.value);
    this.internals.setFormValue(value);
    this.query = name;
    this.changeQuery.emit(name);
    this._preventDialogOpen = true;
    if (this.optionElementsExist) {
      Array.from(this.optionElements).forEach((item) => {
        item.selected = item.value === value && item.name === name;
      });
      this._dropdownElement.updateList();
    }
    this._inputElement.focus();
  }
  handleQueryChange() {
    this._updateStatusText();
  }
  _updateInput() {
    this._dropdownElement.open();
    this.query = this._inputElement.value;
    this.changeQuery.emit(this.query);
    this._dropdownElement.updateList();
  }
  _renderLoader() {
    return index.h("c-spinner", { color: "var(--_c-autocomplete-active-color)", size: 20 });
  }
  _renderChevron() {
    const classes = {
      'c-input-menu__chevron': true,
      'c-input-menu__chevron--active': this.dropdownVisible,
    };
    return (index.h("c-icon-button", { size: "x-small", class: classes, disabled: this.disabled, text: true, onClick: (event) => this._toggleDropdown(event), onKeyDown: (event) => this._onButtonKeyDown('chevron', event) }, index.h("c-icon", { path: mdi.mdiChevronDown, size: 24 })));
  }
  _renderReset() {
    return (index.h("c-icon-button", { "aria-label": "", size: "x-small", disabled: this.disabled, text: true, onClick: (event) => this._reset(event), onKeyDown: (event) => this._onButtonKeyDown('reset', event) }, index.h("c-icon", { path: mdi.mdiClose, size: 20 })));
  }
  _renderInputElement() {
    var _a;
    return (index.h("div", { class: "c-input-menu__input" }, index.h("input", { type: "text", ref: (el) => (this._inputElement = el), "aria-expanded": this.dropdownVisible.toString(), "aria-owns": this._inputId + '-items', "aria-autocomplete": "list", autocomplete: "off", class: "c-input__input", role: "combobox", value: this.query, name: (_a = this.name) !== null && _a !== void 0 ? _a : null, disabled: this.disabled, onInput: () => this._updateInput(), onFocus: () => this._onInputFocus() })));
  }
  componentWillLoad() {
    CAutocomplete._uniqueId += 1;
    this._inputId =
      'input_' +
        (this.hostId || this.label || this.placeholder).replace(/[^a-zA-Z0-9-_]/g, '');
  }
  get _items() {
    return this.optionElementsExist ? this.optionElements : this.items;
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      const ending = !!this._items.length
        ? ' or navigate using the up and down arrows'
        : '';
      if (this.currentIndex === null) {
        this.statusText = this._items.length
          ? `${this._items.length} result${this._items.length !== 1 ? 's' : ''} available`
          : 'No search results available';
      }
      if (this.query !== null && this._items.length) {
        this.statusText += ', input a search query to filter the results';
      }
      this._dropdownElement.setStatusText(this.statusText + ending);
      this._debounce = null;
    }, 1400);
  }
  render() {
    const itemType = this.optionElementsExist ? 'option' : 'item';
    return (index.h(index.Host, null, index.h("c-dropdown", { ref: (el) => (this._dropdownElement = el), id: `${this._id}-dropdown`, index: this.currentIndex, "items-per-page": this.itemsPerPage, "item-type": itemType, items: this._items, parent: this.el, type: "autocomplete", onKeyDown: (event) => this._handleKeyDown(event) }, index.h("c-input", { slot: "default", ref: (el) => (this._cInputElement = el), active: this.dropdownVisible, disabled: this.disabled, "hide-details": this.hideDetails, hint: this.hint, id: this.hostId, "input-id": this._inputId, label: this.label, name: this.name, placeholder: this.placeholder, required: this.required, shadow: this.shadow, valid: this.valid, validate: this.validate, "validate-on-blur": this.validateOnBlur, validation: this.validation, value: this.query, variant: "select" }, index.h("slot", { name: "pre", slot: "pre" }), index.h("div", { class: "c-input__content" }, this._renderInputElement(), this.loading && this._renderLoader(), !this.loading && this.value && this._renderReset(), !this.loading && !this.value && this._renderChevron(), index.h("slot", { onSlotchange: () => this._handleSlotChange() })), index.h("slot", { name: "post", slot: "post" })))));
  }
  static get formAssociated() { return true; }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "query": ["handleQueryChange"]
  }; }
};
CAutocomplete._uniqueId = 0;
CAutocomplete.style = cAutocompleteCss;

const cBadgeCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-badge-background-color:var(--c-badge-background-color, var(--c-warning-600));--_c-badge-text-color:var(--c-badge-text-color, var(--c-white));--_c-badge-border-color:var(--c-badge-border-color, var(--c-white));align-items:center;background-color:var(--_c-badge-background-color);border-radius:16px;box-shadow:0 0 0 2px var(--_c-badge-border-color);color:var(--_c-badge-text-color);display:flex;font-size:12px;height:16px;justify-content:center;justify-items:center;line-height:1;min-width:16px;padding:0 4px;pointer-events:none;position:absolute;right:-6px;top:-6px;z-index:2}";

const CBadge = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return (index.h(index.Host, { class: "c-badge" }, index.h("slot", null)));
  }
};
CBadge.style = cBadgeCss;

const cButtonCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-button-border-radius:var(--c-button-border-radius, 4px);--_c-button-height:44px;--_c-button-min-width:88px;--_c-button-padding:0 16px;--_c-button-font-size:16px;--_c-button-icon-size:24px;--_c-button-outline-offset:2px;border-radius:var(--_c-button-border-radius);display:inline-flex;min-width:max-content;transform:translateZ(0);transition:background-color 0.3s ease-in-out;--_c-button-background-color:var(--c-button-background-color, var(--c-primary-600));--_c-button-text-color:var(--c-button-text-color, var(--c-white));--_c-button-loader-color:var(--c-button-loader-color, var(--_c-button-text-color));--_c-button-outline-color:var(--c-button-outline-color, var(--_c-button-background-color));background-color:var(--_c-button-background-color);color:var(--_c-button-text-color)}:host ::slotted(svg){fill:var(--_c-button-loader-color)}:host(.c-button--no-radius){--_c-button-border-radius:0}:host(:host:not(.c-button--description)){height:var(--_c-button-height)}:host(.c-button--description){height:\"auto\"}:host(:host:hover){--_c-button-background-color-hover:var(--c-button-background-color-hover, var(--c-primary-400));background-color:var(--_c-button-background-color-hover)}:host(.c-button--inverted){--_c-button-inverted-background-color:var(--c-button-inverted-background-color, var(--c-white));--_c-button-inverted-text-color:var(--c-button-inverted-text-color, var(--c-primary-600));--_c-button-outline-color:var(--_c-button-inverted-background-color);background-color:var(--_c-button-inverted-background-color);color:var(--_c-button-inverted-text-color)}:host(.c-button--inverted:hover){--_c-button-inverted-background-color-hover:var(--c-button-inverted-background-color-hover, var(--c-primary-200));background-color:var(--_c-button-inverted-background-color-hover)}:host(.c-button--inverted.c-button--disabled){--_c-button-inverted-disabled-background-color:var(--c-button-inverted-disabled-background-color, var(--_c-button-disabled-background-color));--_c-button-inverted-disabled-text-color:var(--c-button-inverted-disabled-text-color, var(--c-tertiary-500));background-color:var(--_c-button-inverted-disabled-background-color);color:var(--_c-button-inverted-disabled-text-color)}:host(.c-button--danger){--_c-button-danger-background-color:var(--c-button-danger-background-color, var(--c-error-600));--_c-button-danger-text-color:var(--c-button-danger-text-color, var(--c-white));--_c-button-danger-loader-color:var(--c-button-danger-loader-color, var(--_c-button-danger-text-color));--_c-button-loader-color:var(--_c-button-danger-loader-color);--_c-button-outline-color:var(--_c-button-danger-background-color);background-color:var(--_c-button-danger-background-color);color:var(--_c-button-danger-text-color)}:host(.c-button--danger:hover){--_c-button-danger-background-color-hover:var(--c-button-danger-background-color-hover, var(--c-error-400));background-color:var(--_c-button-danger-background-color-hover)}:host(.c-button--danger.c-button--disabled){--_c-button-danger-disabled-background-color:var(--c-button-danger-disabled-background-color, var(--_c-button-disabled-background-color));--_c-button-danger-disabled-text-color:var(--c-button-danger-disabled-text-color, var(--_c-button-disabled-text-color));background-color:var(--_c-button-danger-disabled-background-color);color:var(--_c-button-danger-disabled-text-color)}:host(.c-button--danger.c-button--inverted){--_c-button-danger-inverted-text-color:var(--c-button-danger-inverted-text-color, var(--c-error-600));--_c-button-danger-inverted-background-color:var(--c-button-danger-inverted-background-color, var(--c-white));--_c-button-outline-color:var(--_c-button-danger-inverted-background-color);background-color:var(--_c-button-danger-inverted-background-color);color:var(--_c-button-danger-inverted-text-color)}:host(.c-button--danger.c-button--inverted:hover){--_c-button-danger-inverted-background-color-hover:var(--c-button-danger-inverted-background-color-hover, var(--c-error-100));background-color:var(--_c-button-danger-inverted-background-color-hover)}:host(.c-button--danger.c-button--inverted.c-button--disabled){--_c-button-danger-inverted-disabled-background-color:var(--c-button-danger-inverted-disabled-background-color, var(--_c-button-disabled-background-color));--_c-button-danger-inverted-disabled-text-color:var(--c-button-danger-inverted-disabled-text-color, var(--_c-button-disabled-text-color));background-color:var(--_c-button-danger-inverted-disabled-background-color);color:var(--_c-button-danger-inverted-disabled-text-color)}:host(.c-button--ghost){--_c-button-ghost-background-color:var(--c-button-ghost-background-color, var(--c-primary-200));--_c-button-ghost-text-color:var(--c-button-ghost-text-color, var(--c-primary-600));--_c-button-ghost-loader-color:var(--c-button-ghost-loader-color, var(--_c-button-ghost-text-color));--_c-button-loader-color:var(--_c-button-ghost-loader-color);--_c-button-outline-color:var(--_c-button-ghost-text-color);background-color:var(--_c-button-ghost-background-color);color:var(--_c-button-ghost-text-color)}:host(.c-button--ghost:hover){--_c-button-ghost-background-color-hover:var(--c-button-ghost-background-color-hover, var(--c-primary-100));background-color:var(--_c-button-ghost-background-color-hover)}:host(.c-button--ghost.c-button--disabled){--_c-button-ghost-disabled-background-color:var(--c-button-ghost-disabled-background-color, var(--_c-button-disabled-background-color));--_c-button-ghost-disabled-text-color:var(--c-button-ghost-disabled-text-color, var(--_c-button-disabled-text-color));background-color:var(--_c-button-ghost-disabled-background-color);color:var(--_c-button-ghost-disabled-text-color)}:host(.c-button--ghost.c-button--inverted){--_c-button-ghost-inverted-background-color:var(--c-button-ghost-inverted-background-color, rgba(var(--c-white-rgb), 0.2));--_c-button-ghost-inverted-text-color:var(--c-button-ghost-inverted-text-color, var(--c-white));--_c-button-outline-color:var(--_c-button-ghost-inverted-text-color);background-color:var(--_c-button-ghost-inverted-background-color);color:var(--_c-button-ghost-inverted-text-color)}:host(.c-button--ghost.c-button--inverted:hover){--_c-button-ghost-inverted-background-color-hover:var(--c-button-ghost-inverted-background-color-hover, rgba(var(--c-white-rgb), 0.3));background-color:var(--_c-button-ghost-inverted-background-color-hover)}:host(.c-button--ghost.c-button--inverted.c-button--disabled){--_c-button-ghost-inverted-disabled-background-color:var(--c-button-ghost-inverted-disabled-background-color, rgba(var(--c-white-rgb), 0.05));--_c-button-ghost-inverted-disabled-text-color:var(--c-button-ghost-inverted-disabled-text-color, var(--c-tertiary-400));background-color:var(--_c-button-ghost-inverted-disabled-background-color);color:var(--_c-button-ghost-inverted-disabled-text-color)}:host(.c-button--text){--_c-button-text-background-color:var(--c-button-text-background-color, var(--c-transparent));--_c-button-text-text-color:var(--c-button-text-text-color, var(--c-primary-600));--_c-button-text-loader-color:var(--c-button-text-loader-color, var(--_c-button-text-text-color));--_c-button-loader-color:var(--_c-button-text-loader-color);--_c-button-outline-color:var(--_c-button-text-text-color);background-color:var(--_c-button-text-background-color);color:var(--_c-button-text-text-color)}:host(.c-button--text:hover){--_c-button-text-background-color-hover:var(--c-button-text-background-color-hover, var(--c-primary-100));background-color:var(--_c-button-text-background-color-hover)}:host(.c-button--text.c-button--disabled){--_c-button-text-disabled-background-color:var(--c-button-text-disabled-background-color, var(--c-transparent));--_c-button-text-disabled-text-color:var(--c-button-text-disabled-text-color, var(--c-tertiary-500));background-color:var(--_c-button-text-disabled-background-color);color:var(--_c-button-text-disabled-text-color)}:host(.c-button--text.c-button--inverted){--_c-button-text-inverted-background-color:var(--c-button-text-inverted-background-color, var(--c-transparent));--_c-button-text-inverted-text-color:var(--c-button-text-inverted-text-color, var(--c-white));--_c-button-outline-color:var(--_c-button-text-inverted-text-color);background-color:var(--_c-button-text-inverted-background-color);color:var(--_c-button-text-inverted-text-color)}:host(.c-button--text.c-button--inverted:hover){--_c-button-text-inverted-background-color-hover:var(--c-button-text-inverted-background-color-hover, rgba(var(--c-white-rgb), 0.3));background-color:var(--_c-button-text-inverted-background-color-hover)}:host(.c-button--text.c-button--inverted.c-button--disabled){--_c-button-text-inverted-disabled-background-color:var(--c-button-text-inverted-disabled-background-color, var(--c-transparent));--_c-button-text-inverted-disabled-text-color:var(--c-button-text-inverted-disabled-text-color, var(--c-tertiary-400));background-color:var(--_c-button-text-inverted-disabled-background-color);color:var(--_c-button-text-inverted-disabled-text-color)}:host(.c-button--outlined){--_c-button-outlined-text-color:var(--c-button-outlined-text-color, var(--c-primary-600));--_c-button-outlined-border-color:var(--c-button-outlined-border-color, var(--_c-button-outlined-text-color));--_c-button-outlined-background-color:var(--c-button-outlined-background-color, var(--c-transparent));--_c-button-outlined-loader-color:var(--c-button-outlined-loader-color, var(--_c-button-outlined-text-color));--_c-button-loader-color:var(--_c-button-outlined-loader-color);--_c-outline-color:var(--_c-button-outlined-border-color);--_c-button-outline-color:var(--_c-button-outlined-border-color);background-color:var(--_c-button-outlined-background-color);color:var(--_c-button-outlined-text-color);box-shadow:inset 0 0 0 2px var(--_c-outline-color)}:host(.c-button--outlined:hover){--_c-button-outlined-background-color-hover:var(--c-button-outlined-background-color-hover, var(--c-primary-200));background-color:var(--_c-button-outlined-background-color-hover)}:host(.c-button--outlined.c-button--disabled){--_c-button-outlined-disabled-text-color:var(--c-button-outlined-disabled-text-color, var(--c-tertiary-500));--_c-button-outlined-disabled-background-color:var(--c-button-outlined-disabled-background-color, var(--_c-button-outlined-background-color));--_c-button-outlined-disabled-border-color:var(--c-button-outlined-disabled-border-color, var(--c-tertiary-400));--_c-outline-color:var(--_c-button-outlined-disabled-border-color);background-color:var(--_c-button-outlined-disabled-background-color);color:var(--_c-button-outlined-disabled-text-color)}:host(.c-button--outlined.c-button--inverted){--_c-button-outlined-inverted-text-color:var(--c-button-outlined-inverted-text-color, var(--c-white));--_c-button-outlined-inverted-border-color:var(--c-button-outlined-inverted-border-color, var(--_c-button-outlined-inverted-text-color));--_c-button-outlined-inverted-background-color:var(--c-button-outlined-inverted-background-color, var(--_c-button-outlined-background-color));--_c-outline-color:var(--_c-button-outlined-inverted-border-color);--_c-button-outline-color:var(--_c-button-outlined-inverted-border-color);background-color:var(--_c-button-outlined-inverted-background-color);color:var(--_c-button-outlined-inverted-text-color)}:host(.c-button--outlined.c-button--inverted:hover){--_c-button-outlined-inverted-background-color-hover:var(--c-button-outlined-inverted-background-color-hover, rgba(var(--c-white-rgb), 0.3));background-color:var(--_c-button-outlined-inverted-background-color-hover)}:host(.c-button--outlined.c-button--inverted.c-button--disabled){--_c-button-outlined-inverted-disabled-border-color:var(--c-button-outlined-inverted-disabled-border-color, var(--c-tertiary-400));--_c-button-outlined-inverted-disabled-text-color:var(--c-button-outlined-inverted-disabled-text-color, var(--c-tertiary-400));--_c-button-outlined-inverted-disabled-background-color:var(--c-button-outlined-inverted-disabled-background-color, var(--_c-button-outlined-background-color));--_c-outline-color:var(--_c-button-outlined-inverted-disabled-border-color);background-color:var(--_c-button-outlined-inverted-disabled-background-color);color:var(--_c-button-outlined-inverted-disabled-text-color)}:host(.c-button--disabled){--_c-button-disabled-background-color:var(--c-button-disabled-background-color, var(--c-tertiary-100));--_c-button-disabled-text-color:var(--c-button-disabled-text-color, var(--c-tertiary-600));--_c-button-loader-color:var(--_c-button-disabled-text-color);background-color:var(--_c-button-disabled-background-color);color:var(--_c-button-disabled-text-color);pointer-events:none}:host(.c-button:focus){z-index:2}:host(.c-button) a:focus,:host(.c-button) button:focus{outline:none}:host(.c-button) a:focus-visible,:host(.c-button) button:focus-visible{outline:2px var(--_c-button-outline-color) solid;outline-offset:var(--_c-button-outline-offset);z-index:1}:host(.c-button--fit){width:100%}:host(.c-button--small){--_c-button-height:28px}:host(.c-button--large){--_c-button-height:52px}:host(.c-button--fitted){width:100%}::slotted([slot=icon]){font-size:var(--_c-button-icon-size)}::slotted(svg){fill:var(--_c-button-loader-color)}a{text-decoration:none}button,a{background-color:transparent;border-radius:var(--_c-button-border-radius);color:currentColor;font-family:var(--c-font-family);display:inline-grid;place-items:center;border:none;padding:0;position:relative;margin:0;width:100%;cursor:pointer;transition:background-color 0.3s cubic-bezier(0.25, 0.8, 0.5, 1), color 0.3s cubic-bezier(0.25, 0.8, 0.5, 1)}button:disabled,a:disabled{cursor:default}@media (max-width: 767px){.full-width-mobile{max-width:100% !important;width:100% !important;margin:0 !important}.full-width-mobile .c-button-padding{padding:24px 38px}.full-width{flex-grow:1 !important}}.c-button__content{border-radius:var(--_c-button-border-radius);position:relative;box-shadow:none;outline:none;backface-visibility:hidden;transform:translate3d(0, 0, 0);transition:background-color 0.3s;color:currentColor;margin:0;text-decoration:none;display:flex;text-align:center;font-size:var(--_c-button-font-size);font-weight:700;line-height:18px;user-select:none;min-width:var(--_c-button-min-width);white-space:nowrap;height:100%;width:100%;align-items:center;justify-content:center}.c-button__content *{pointer-events:none}.c-button__content svg{fill:var(--_c-button-loader-color);height:var(--_c-button-icon-size);width:var(--_c-button-icon-size)}.c-button__content svg.icon-by-path{margin-right:8px}.c-button__content svg.button-icon{margin-right:16px;font-size:10px;margin-left:-8px;margin-bottom:-2px}.c-button__content--small{--_c-button-padding:0 12px;--_c-button-font-size:14px;--_c-button-icon-size:20px}.c-button__content--large{--_c-button-padding:0 24px;--_c-button-font-size:18px}.c-button__content--no-radius{--_c-button-border-radius:0}.c-button__content--fitted{width:100%}.c-button__content--description{display:grid;grid-template-columns:1fr;gap:0}.c-button__content__inner{display:flex;gap:8px;height:var(--_c-button-height);align-items:center;justify-content:center;padding:var(--_c-button-padding)}.c-button__content__description{font-weight:400;font-size:12px;padding:0 12px 12px}.c-button__content__description--loading{opacity:0.8}.hide-text{color:transparent !important}.hide-text ::slotted([slot=icon]){opacity:0}.hide-text svg{fill:transparent !important}.hide-text .outlined.c-button svg{fill:transparent !important}.c-button__loader{width:100%;position:absolute;height:var(--_c-button-height);display:grid;place-content:center}.c-button__loader.dense_spinner{padding-top:7px}";

const CButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.tabChange = index.createEvent(this, "tabChange", 7);
    this.tabFocus = index.createEvent(this, "tabFocus", 7);
    this._onClick = (event, center = false) => {
      var _a;
      if (this.disabled) {
        event.preventDefault();
        return;
      }
      this._rippleElement.createRipple(event, this._container, center);
      if (this.tabs) {
        this.tabChange.emit({
          value: (_a = this.value) !== null && _a !== void 0 ? _a : this.hostElement.dataset.index,
          element: this.hostElement,
        });
      }
      if (this.type === 'submit') {
        const submitButton = this._createHiddenSubmitButton();
        submitButton.click();
        submitButton.remove();
      }
    };
    this._createHiddenSubmitButton = () => {
      const form = this._closestElementComposed('form', this._container);
      const submitButton = document.createElement('button');
      submitButton.type = this.type;
      submitButton.style.display = 'none';
      submitButton.disabled = this.disabled;
      form.appendChild(submitButton);
      return submitButton;
    };
    this._onKeyDown = (event) => {
      if (['Space', 'Enter'].includes(event.code)) {
        if (!!this.href) {
          window.open(this.href, this.target);
        }
        event.preventDefault();
        this._onClick(event, true);
      }
    };
    this.inverted = false;
    this.outlined = false;
    this.ghost = false;
    this.danger = false;
    this.grouped = false;
    this.text = false;
    this.loading = false;
    this.fit = false;
    this.noRadius = false;
    this.type = 'button';
    this.disabled = false;
    this.value = undefined;
    this.hostId = undefined;
    this.size = 'default';
    this.href = undefined;
    this.target = '_blank';
    this.tabs = false;
  }
  onTabFocus() {
    var _a;
    this.tabFocus.emit((_a = this.value) !== null && _a !== void 0 ? _a : this.hostElement.dataset.index);
  }
  _closestElementComposed(selector, base) {
    function __closestFrom(el) {
      const found = el.closest(selector);
      return found ? found : __closestFrom(el.getRootNode().host);
    }
    return __closestFrom(base);
  }
  componentWillLoad() {
    this._containerhasDescriptionSlot = !!this.hostElement.querySelector('[slot="description"]');
  }
  render() {
    const contentClasses = {
      'c-button__content': true,
      'c-button__content--description': this._containerhasDescriptionSlot,
      'c-button__content--fitted': !!this.fit,
      'c-button__content--large': this.size === 'large',
      'c-button__content--no-radius': !!this.noRadius,
      'c-button__content--small': this.size === 'small',
    };
    const innerClasses = {
      'c-button__content__inner': true,
      'hide-text': this.loading,
    };
    const buttonClasses = {
      fit: !!this.fit,
      grouped: this.grouped,
      outlined: this.outlined,
    };
    const hostClasses = {
      'c-button': true,
      'c-button--ghost': this.ghost,
      'c-button--outlined': this.outlined,
      'c-button--danger': this.danger,
      'c-button--disabled': this.disabled,
      'c-button--inverted': this.inverted,
      'c-button--text': this.text,
      'c-button--fitted': !!this.fit,
      'c-button--description': !!this._containerhasDescriptionSlot,
      'c-button--active': this.grouped && !this.outlined,
      'c-button--no-radius': !!this.noRadius,
      [`c-button--${this.size}`]: true,
    };
    const descriptionSlotClasses = {
      'c-button__content__description': this._containerhasDescriptionSlot,
      'c-button__content__description--loading': this.loading,
    };
    const Tag = !!this.href ? 'a' : 'button';
    const hostAttributes = {
      onKeyDown: this._onKeyDown,
    };
    const attributes = {
      id: this.hostId,
      class: buttonClasses,
      disabled: this.disabled,
      onClick: this._onClick,
      type: this.type,
    };
    let linkAttributes = {};
    if (!!this.href) {
      linkAttributes = { href: this.href, target: this.target };
    }
    const spinnerSizes = {
      small: 20,
      default: 24,
      large: 28,
    };
    return (index.h(index.Host, Object.assign({ class: hostClasses }, hostAttributes), index.h(Tag, Object.assign({}, attributes, linkAttributes), index.h("div", { class: contentClasses, ref: (el) => (this._container = el) }, index.h("div", { class: innerClasses }, this.loading && (index.h("div", { class: "c-button__loader" }, index.h("c-spinner", { color: "var(--_c-button-loader-color)", size: spinnerSizes[this.size] }))), index.h("slot", null)), this._containerhasDescriptionSlot && (index.h("div", { class: descriptionSlotClasses }, index.h("slot", { name: "description" })))), index.h("c-ripple", { ref: (el) => (this._rippleElement = el) }))));
  }
  get hostElement() { return index.getElement(this); }
};
CButton.style = cButtonCss;

const cCardCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-card){--_c-card-gap:var(--c-card-gap, clamp(1rem, 2vw, 1.5rem));--_c-card-background-color:var(--c-card-background-color, var(--c-white));display:flex;border-radius:6px;box-shadow:rgba(0, 0, 0, 0.15) 0 10px 20px, rgba(0, 0, 0, 0.2) 0 5px 5px;padding-block:var(--_c-card-gap);position:relative;background-color:var(--_c-card-background-color)}:host(c-card) article{display:flex;flex-direction:column;flex:1;gap:var(--_c-card-gap);max-width:100%}:host(.c-card--fullscreen){--c-icon-button-text-background-color:var(--c-white);overflow:auto}:host(.c-card--fullscreen) .c-card__fullscreen-toggle{position:fixed}@-moz-document url-prefix(){:host(.c-card--fullscreen) .c-card__fullscreen-toggle{position:absolute}}::slotted(c-loader){border-radius:6px}.c-card__fullscreen-toggle{position:absolute;right:calc(var(--_c-card-gap) - 8px);top:calc(var(--_c-card-gap) - 8px)}";

const CCard = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.fullscreen = false;
    this.isFullscreen = false;
  }
  _toggleFullscreen() {
    this.isFullscreen = !this.isFullscreen;
  }
  _onFullscreen() {
    var _a, _b;
    if (document.fullscreenElement) {
      this.exitFullscreen();
      return;
    }
    this.host.requestFullscreen();
    const modalWrapper = (_b = (_a = this.host.parentElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.modal-wrapper');
    if (modalWrapper) {
      modalWrapper.style.display = this.isFullscreen
        ? 'block'
        : 'flex';
    }
  }
  componentDidLoad() {
    const title = this.host.querySelector('c-card-title');
    if (!!title && this.fullscreen) {
      title.style.marginRight = '40px';
    }
    this.host.addEventListener('fullscreenchange', this._toggleFullscreen.bind(this));
  }
  disconnectedCallback() {
    this.host.removeEventListener('fullscreenchange', this._toggleFullscreen.bind(this));
  }
  async exitFullscreen() {
    var _a, _b;
    if (!document.fullscreenElement)
      return;
    document.exitFullscreen();
    const modalWrapper = (_b = (_a = this.host.parentElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.modal-wrapper');
    if (modalWrapper) {
      modalWrapper.style.display = 'flex';
    }
  }
  async enterFullscreen() {
    this.isFullscreen = true;
  }
  render() {
    const hostClasses = {
      'c-card': true,
      'c-card--fullscreen': this.isFullscreen,
    };
    return (index.h(index.Host, { class: hostClasses }, index.h("article", null, this.fullscreen && (index.h("c-icon-button", { "aria-hidden": "true", class: "c-card__fullscreen-toggle", title: this.isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen', text: true, onClick: () => this._onFullscreen() }, index.h("c-icon", { path: this.isFullscreen ? mdi.mdiFullscreenExit : mdi.mdiFullscreen }))), index.h("slot", null))));
  }
  static get assetsDirs() { return ["assets"]; }
  get host() { return index.getElement(this); }
};
CCard.style = cCardCss;

const cCardActionsCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{padding:0 var(--_c-card-gap, 24px);display:block}:host menu{margin:0;padding:0}.c-card-actions{align-items:center;display:flex;gap:8px}.c-card-actions ::slotted(c-button[fit]){flex:1}.c-card-actions--align-center{align-items:center}.c-card-actions--align-start{align-items:flex-start}.c-card-actions--align-end{align-items:flex-end}.c-card-actions--justify-center{justify-content:center}.c-card-actions--justify-end{justify-content:flex-end}.c-card-actions--justify-start{justify-content:flex-start}.c-card-actions--justify-stretch{justify-content:stretch}.c-card-actions--justify-stretch ::slotted(*){flex:1}.c-card-actions--justify-space-between{justify-content:space-between}.c-card-actions--justify-space-around{justify-content:space-around}";

const CCardActions = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.align = 'center';
    this.justify = 'start';
  }
  render() {
    const classes = {
      'c-card-actions': true,
      [`c-card-actions--align-${this.align}`]: true,
      [`c-card-actions--justify-${this.justify}`]: true,
    };
    return (index.h("footer", null, index.h("menu", { class: classes }, index.h("slot", null))));
  }
};
CCardActions.style = cCardActionsCss;

const cCardContentCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{display:block;padding:0 var(--_c-card-gap, 24px)}.c-card-content{display:flex;flex-direction:column;gap:var(--_c-card-gap)}.c-card-content ::slotted(*){max-width:100%}";

const CCardContent = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return (index.h("article", { class: "c-card-content" }, index.h("slot", null)));
  }
};
CCardContent.style = cCardContentCss;

const cCardTitleCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-card-title-color:var(--c-card-title-color, var(--c-text-system));--_c-card-title-underline-color:var(--c-card-title-underline-color, var(--c-primary-600));color:var(--_c-card-title-color);padding-inline:var(--_c-card-gap, 24px);display:block;font-family:var(--c-font-family);font-size:1rem;font-weight:500;text-transform:uppercase}.c-card-title__underline{background-color:var(--_c-card-title-underline-color);border-radius:4px;height:4px;margin-top:10px;width:44px}";

const CCardTitle = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return (index.h("header", { class: "c-card-title" }, index.h("slot", null), index.h("div", { class: "c-card-title__underline" })));
  }
};
CCardTitle.style = cCardTitleCss;

const cCheckboxCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-checkbox-background-color-hover:var(--c-checkbox-background-color-hover, rgba(var(--c-primary-rgb), 0.1));--_c-checkbox-color-active:var(--c-checkbox-color-active, var(--_c-checkbox-color));--_c-checkbox-color-disabled:var(--c-checkbox-color-disabled, var(--c-tertiary-500));--_c-checkbox-color:var(--c-checkbox-color, var(--c-primary-600));--_c-checkbox-color-error:var(--c-error-600)}.c-checkbox{position:relative;width:fit-content}.c-checkbox__label-content{padding-top:10px;text-align:left;user-select:none}.c-checkbox__label-content span.required{color:var(--c-error-600)}.c-checkbox--disabled{--_c-checkbox-color:var(--_c-checkbox-color-disabled);--c-error-600:var(--_c-checkbox-color);--_c-checkbox-color-active:var(--_c-checkbox-color-disabled);color:var(--_c-checkbox-color);opacity:0.75}.c-checkbox--disabled .c-checkbox__label{cursor:default}.c-checkbox--error{--_c-checkbox-color:var(--c-error-600);--_c-checkbox-color-active:var(--_c-checkbox-color-error);color:var(--_c-checkbox-color-error)}.c-checkbox input:focus{outline:none}.c-checkbox input:focus+.c-checkbox__label .ripple{outline:2px var(--_c-checkbox-color-active) solid}@supports selector(:focus-visible){.c-checkbox input:focus+.c-checkbox__label .ripple{outline:none}}.c-checkbox input:focus-visible+.c-checkbox__label .ripple{outline:2px var(--_c-checkbox-color-active) solid}.c-checkbox:not(.c-checkbox--disabled) .ripple:hover{background-color:var(--_c-checkbox-background-color-hover)}.c-checkbox .visuallyhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;width:1px}.c-checkbox input:checked+.c-checkbox__label .ripple::before{background:var(--_c-checkbox-color-active);border-color:var(--_c-checkbox-color-active)}.c-checkbox input:checked+.c-checkbox__label .path{stroke:#ffffff;fill:#ffffff;stroke-dashoffset:0;stroke-width:13;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}.c-checkbox__label{cursor:pointer;display:flex;gap:4px;position:relative;user-select:none}.c-checkbox__label svg{height:14px;left:14px;position:absolute;top:14px;width:14px}.c-checkbox__label--indeterminate .path{stroke-dasharray:0 !important;stroke-dashoffset:0 !important;stroke:transparent}.c-checkbox__label .ripple{border-radius:50%;color:var(--_c-checkbox-color-active);display:grid;height:42px;min-width:42px;overflow:hidden;place-content:center;position:relative;transform:translateZ(0);width:42px}.c-checkbox__label .ripple::before{border-radius:2px;border:2px solid var(--_c-checkbox-color);content:\"\";display:inline-block;height:18px;left:12px;position:absolute;top:12px;transition:all 0.25s ease-out;vertical-align:middle;width:18px}";

const CCheckbox = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    if (hostRef.$hostElement$["s-ei"]) {
      this.internals = hostRef.$hostElement$["s-ei"];
    }
    else {
      this.internals = hostRef.$hostElement$.attachInternals();
      hostRef.$hostElement$["s-ei"] = this.internals;
    }
    this.checked = false;
    this.disabled = false;
    this.hideDetails = false;
    this.hint = '';
    this.hostId = undefined;
    this.indeterminate = false;
    this.label = '';
    this.required = false;
    this.valid = true;
    this.validation = 'Required field';
    this.value = false;
    this.trueValue = true;
    this.falseValue = false;
    this.hostName = undefined;
  }
  get _id() {
    return this.hostId || `checkbox_${CCheckbox._uniqueId}`;
  }
  onValueChange(value) {
    this.checked = this.trueValue === value;
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  handleKeyDown(event) {
    if (['Space'].includes(event.code)) {
      event.preventDefault();
      this._toggleState(event);
    }
  }
  componentWillLoad() {
    CCheckbox._uniqueId += 1;
    this.checked = this.checked || this.value === this.trueValue;
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  _toggleState(event) {
    if (this.disabled)
      return;
    this._rippleElement.createRipple(event, this._container, true);
    this.checked = !this.checked;
    this.changeValue.emit(this.checked ? this.trueValue : this.falseValue);
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  render() {
    const wrapperClasses = {
      'c-checkbox': true,
      'c-checkbox--disabled': this.disabled,
      'c-checkbox--error': !this.valid,
    };
    const labelClasses = {
      'c-checkbox__label': true,
      'c-checkbox__label--indeterminate': this.indeterminate,
    };
    const slotHasContent = !!this.el.childNodes.length;
    return (index.h(index.Host, null, index.h("div", { class: wrapperClasses }, index.h("input", Object.assign({ class: "visuallyhidden", id: "checkbox" }, (!!this.hostName ? { name: this.hostName } : {}), { type: "checkbox", "aria-checked": this.checked.toString(), "aria-disabled": this.disabled.toString(), checked: this.checked ? true : undefined, disabled: this.disabled, onChange: (event) => this._toggleState(event) })), index.h("label", { class: labelClasses, htmlFor: "checkbox" }, index.h("div", { class: "ripple", ref: (el) => (this._container = el) }, index.h("svg", { viewBox: "0 0 100 100" }, !this.indeterminate && this.checked && (index.h("path", { class: "path", d: "M 12 52 l 24 24 l 47 -47 l -3 -3 l -44 44 l -21 -21 l -3 3" })), this.indeterminate && (index.h("path", { class: "path", d: "M20 56 h60 v-8 h-60 z" }))), index.h("c-ripple", { ref: (el) => (this._rippleElement = el) })), (!!this.label || slotHasContent) && (index.h("div", { class: "c-checkbox__label-content" }, !!this.label ? this.label : index.h("slot", null), this.required && index.h("span", { class: "required" }, "\u00A0*"))))), !this.hideDetails && (index.h("c-message", { hint: this.hint, inputId: this._id, valid: this.valid, validation: this.validation }))));
  }
  static get formAssociated() { return true; }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "value": ["onValueChange"]
  }; }
};
CCheckbox._uniqueId = 0;
CCheckbox.style = cCheckboxCss;

const cCscLogoCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{display:block;margin-top:4px}svg .cls-1{fill:none}svg .cls-2{clip-path:url(\"#clip-path\")}svg .cls-3{fill:#5e6a71}svg .cls-4{fill:#066778}svg .cls-5{fill:#830051}";

const CCscLogo = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.width = 60;
  }
  render() {
    const svg = (index.h("svg", { viewBox: "0 0 233.61 149.04" }, index.h("defs", null, index.h("clipPath", { id: "clip-path", transform: "translate(0)" }, index.h("rect", { class: "cls-1", width: "233.61", height: "156.31" }))), index.h("title", null, "CSC_logo_no_tagline"), index.h("g", { id: "Layer_2", "data-name": "Layer 2" }, index.h("g", { id: "Layer_1-2", "data-name": "Layer 1" }, index.h("g", { class: "cls-2" }, index.h("path", { class: "cls-3", d: "M97.24,130.66l-.27-.17a.69.69,0,0,1-.44.19,14.57,14.57,0,0,1-1.87-1.07,9.29,9.29,0,0,0-4.46-1.06c-6,0-9.21,4.93-9.21,10.24S84.22,149,90.09,149c4.6,0,5.89-2.57,7-2.57a2.17,2.17,0,0,1,.25.05l.22-.11-2.44-3.34-.28.17a1.84,1.84,0,0,1,.06.41c0,1.34-2.36,2.71-4.64,2.65-4.33-.08-6.08-3.72-6.08-7.56s1.86-7.45,6-7.45c2.2,0,4.44,1.15,4.44,2.21,0,.25.06.41,0,.53l.33.13ZM108,146.72l.32.13a.75.75,0,0,1,.42-.22,12.54,12.54,0,0,0,7.62,2.41c4.32,0,7.28-2.49,7.28-6.19,0-8.14-11.86-4.17-11.86-8.6,0-1.7,1-3,4.11-3,2.41,0,5.26,1,5.26,2.49a.92.92,0,0,1,0,.3l.36.17,1.92-4.14-.28-.11a.85.85,0,0,1-.62.3,11.61,11.61,0,0,1-1.95-.88,11,11,0,0,0-4.5-.87c-4.33,0-7.4,2.08-7.4,5.8,0,7.82,11.76,3.68,11.76,8.67,0,2.27-1.65,3.28-4,3.28-2.77,0-6.11-1.53-6.11-3a1.89,1.89,0,0,1,0-.41l-.31-.17Zm42.56-16.06-.28-.17a.64.64,0,0,1-.43.19,14.57,14.57,0,0,1-1.87-1.07,9.3,9.3,0,0,0-4.47-1.06c-6,0-9.21,4.93-9.21,10.24S137.5,149,143.37,149c4.6,0,5.89-2.57,7-2.57a1.59,1.59,0,0,1,.24.05l.22-.11-2.44-3.34-.27.17a1.84,1.84,0,0,1,.05.41c0,1.34-2.35,2.71-4.63,2.65-4.33-.08-6.08-3.72-6.08-7.56s1.86-7.45,6-7.45c2.2,0,4.44,1.15,4.44,2.21a1.82,1.82,0,0,1,0,.53l.33.13Z", transform: "translate(0)" }), index.h("path", { class: "cls-4", d: "M117.26,117.71s-2.66-.42-2.72-1.66c-2.41-54.33-7.39-52.22-111.82-54.33-2,0-2.72-2.87-2.72-2.87H117.26Z", transform: "translate(0)" }), index.h("path", { class: "cls-5", d: "M116.35,0s2.66.42,2.72,1.66C121.49,56,126.46,53.88,230.89,56c2,0,2.72,2.87,2.72,2.87H116.35Z", transform: "translate(0)" }))))));
    return index.h(index.Host, { style: { width: `${this.width}px` } }, svg);
  }
};
CCscLogo.style = cCscLogoCss;

const cDropdownCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-dropdown){--_c-dropdown-background-color:var(\n    --c-dropdown-background-color,\n    var(--c-white)\n  );--_c-dropdown-background-color-hover:var(\n    --c-dropdown-background-color-hover,\n    var(--c-primary-200)\n  );--_c-dropdown-text-color:var(--c-dropdown-text-color, var(--c-text-body));--_c-dropdown-text-color-active:var(\n    --c-dropdown-text-color-active,\n    var(--c-primary-600)\n  );--_c-dropdown-font-size:14px;--_c-dropdown-height:42px;display:block;position:relative}:host(c-dropdown) mark{background-color:transparent;box-shadow:0 2px 0 0 var(--_c-dropdown-text-color-active);color:inherit}:host(c-dropdown) dialog{border-radius:4px;background-color:transparent;border:none;margin:-4px 0 0;overflow:visible;padding:4px 0 0;position:fixed}:host(c-dropdown) dialog::backdrop{opacity:0}:host(c-dropdown) dialog[open].mobile{background-color:var(--_c-dropdown-background-color);width:100vw;max-width:100vw;height:100vh;max-height:100svh;inset:0}:host(c-dropdown) dialog[open].mobile .input-top-wrapper{padding:8px}:host(c-dropdown) dialog .input-bottom-wrapper.active{padding-top:8px}:host(c-dropdown) .dummy{display:none}:host(c-dropdown) ul{background-color:var(--_c-dropdown-background-color);box-shadow:2px 4px 10px rgba(0, 0, 0, 0.1607843137);border-radius:4px;list-style:none;margin:0;outline:none;padding:0;pointer-events:auto;visibility:hidden;width:100%;height:max-content;overflow-y:scroll}:host(c-dropdown) ul.active{visibility:visible;animation:0.2s 1 fade-in cubic-bezier(0.25, 0.8, 0.5, 1)}:host(c-dropdown) ul.active.mobile{width:100vw;max-width:100vw;height:100vh;max-height:calc(100svh - 60px)}:host(c-dropdown) li{align-items:center;column-gap:12px;cursor:pointer;display:flex;flex-wrap:nowrap;font-size:var(--_c-dropdown-font-size);min-height:var(--_c-dropdown-height);outline:none;padding-left:10px;padding-right:10px;pointer-events:auto;white-space:nowrap;width:100%;border-radius:4px}:host(c-dropdown) li span,:host(c-dropdown) li c-option-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}:host(c-dropdown) li:hover,:host(c-dropdown) li:focus,:host(c-dropdown) li.active{background:var(--_c-dropdown-background-color-hover);color:var(--_c-dropdown-text-color-active);box-shadow:inset 0 0 0 1px var(--_c-dropdown-text-color-active)}:host(c-dropdown) li:not(.disabled,:hover,:focus)[aria-selected=true]{background:var(--_c-dropdown-background-color-hover);color:var(--_c-dropdown-text-color-active);border-radius:0}:host(c-dropdown) li.disabled{background-color:rgba(var(--c-tertiary-rgb), 0.05);cursor:default;filter:grayscale(1) opacity(0.75)}:host(c-dropdown) .visuallyhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes fade-in{from{opacity:0;transform:translateY(-8px)}to{opacity:1;transform:translateY(0)}}";

const CDropdown = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.selectOption = index.createEvent(this, "selectOption", 7);
    this.dropdownStateChange = index.createEvent(this, "dropdownStateChange", 7);
    this._debounce = null;
    this._isMobile = false;
    this._listItems = [];
    this._isOpening = false;
    this._inputSize = {
      height: 0,
      width: 0,
    };
    this._openedOnTop = false;
    this._hideDetails = false;
    this.itemsPerPage = undefined;
    this.parent = undefined;
    this.items = undefined;
    this.index = undefined;
    this.hostId = undefined;
    this.type = undefined;
    this.itemType = undefined;
    this.renderedList = null;
    this.isOpen = false;
    this.statusText = '';
  }
  optionsWatcher() {
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  async stateWatcher(isOpen) {
    this._originalOverflowValue =
      this._originalOverflowValue ||
        window.getComputedStyle(document.body).overflow;
    if (isOpen) {
      this._handleOpen();
      this._disableScroll();
    }
    else {
      this._enableScroll();
    }
    this.dropdownStateChange.emit(isOpen);
  }
  handleIndexChange(index) {
    requestAnimationFrame(() => {
      var _a;
      this._updateStatusText();
      (_a = this._listItems[index]) === null || _a === void 0 ? void 0 : _a.focus();
    });
  }
  async setStatusText(text) {
    requestAnimationFrame(() => {
      this.statusText = text;
    });
  }
  async focusItem(index) {
    requestAnimationFrame(() => {
      var _a;
      (_a = this._listItems[index]) === null || _a === void 0 ? void 0 : _a.focus();
    });
  }
  async open() {
    if (this._dialog.open)
      return;
    this._outsideClickFn = this._handleOutsideClick.bind(this);
    this._dialog.addEventListener('click', this._outsideClickFn);
    requestAnimationFrame(() => {
      this.isOpen = true;
      this._positionMenu();
    });
  }
  async close() {
    this._dialog.close();
    this.isOpen = false;
    this._inputElement.slot = 'default';
    this._inputElement.hideDetails = this._hideDetails;
    this._dummyElement.style.width = '0';
    this._dummyElement.style.display = 'none';
    this._dialog.style.width = '0';
    window.removeEventListener('click', this._outsideClickFn);
  }
  _setIsMobile() {
    this._isMobile = window.matchMedia('only screen and (max-width: 760px)').matches;
  }
  _handleOpen() {
    this._isOpening = true;
    setTimeout(() => {
      this._isOpening = false;
    }, 500);
  }
  _disableScroll() {
    document.body.style.overflow = 'hidden';
  }
  _enableScroll() {
    if (this._originalOverflowValue &&
      this._originalOverflowValue !== 'visible') {
      document.body.style.overflow = this._originalOverflowValue;
      return;
    }
    document.body.style.removeProperty('overflow');
  }
  componentDidLoad() {
    this._setIsMobile();
    this._hideDetails = this.parent.hideDetails;
    this._inputElement = this.el.querySelector('c-input');
    this._resizeObserver = new ResizeObserver((entries) => {
      if (!this._dialog.open)
        return;
      requestAnimationFrame(() => {
        if (!Array.isArray(entries) || !entries.length || this._isOpening)
          return;
        this._setIsMobile();
        this.close();
      });
    });
    this._resizeObserver.observe(window.document.body);
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  async selectItem(index) {
    const item = this._listItems[index];
    if (item.classList.contains('disabled')) {
      return true;
    }
    this._listItems[index].click();
    return false;
  }
  async updateList() {
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  _handleOutsideClick() {
    if (!this.isOpen)
      return;
    this.close();
  }
  _highlightMatchingText(value) {
    const { query } = this.parent;
    if (this.parent.tagName === 'C-SELECT' || query === '')
      return value;
    const regex = new RegExp(query, 'gi');
    const highlighted = value
      .replace(/(<([^>]+)>)/gi, '')
      .replace(regex, (match) => `<mark>${match}</mark>`);
    return highlighted;
  }
  _getParentPosition() {
    return this.parent.shadowRoot
      .querySelector('.c-input__slot')
      .getBoundingClientRect();
  }
  _positionMenu() {
    const { innerWidth, innerHeight } = window;
    this._dialog.style.width = 'auto';
    this._dialog.style.opacity = '0';
    this._dialog.showModal();
    requestAnimationFrame(() => {
      let inputSlot = 'input-top';
      const { top: parentTop, width } = this._getParentPosition();
      const inputSize = this.el.getBoundingClientRect();
      this._inputSize = {
        height: inputSize.height,
        width: inputSize.width,
      };
      if (!this._isMobile) {
        this._dialog.style.width = `${width}px`;
        this._dialog.style.top = `${inputSize.top}px`;
        this._dialog.style.bottom = 'auto';
        this._dialog.style.left = `${inputSize.left}px`;
        const { bottom, right, height } = this._dialog.getBoundingClientRect();
        const isInView = {
          x: right < innerWidth,
          y: bottom < innerHeight,
        };
        const fitsOnTop = parentTop - height > 0;
        if (!fitsOnTop && !isInView.y) {
          this._dialog.style.maxHeight = `${parentTop}px`;
        }
        if (!isInView.y || this._openedOnTop) {
          this._openedOnTop = true;
          this._inputElement.hideDetails = true;
          inputSlot = 'input-bottom';
          this._dialog.style.top = 'auto';
          this._dialog.style.bottom = `${innerHeight - inputSize.top - 44}px`;
        }
      }
      this._dummyElement.style.width = `${this._getParentPosition().width}px`;
      this._dummyElement.style.height = `${this._inputSize.height}px`;
      this._dummyElement.style.display = 'block';
      this._dummyElement.slot = 'default';
      this._inputElement.slot = inputSlot;
      this._inputElement.hideDetails = true;
      this._dialog.style.opacity = '1';
      const input = this.parent.shadowRoot.querySelector('input');
      input.focus();
    });
  }
  _minimumQueryItem() {
    const { query, loading, minimumQueryLength, minimumQueryLengthMessage } = this.parent;
    if (query.length > minimumQueryLength || loading)
      return;
    return (index.h("li", null, index.h("c-icon", { path: mdi.mdiInformation, size: 18, color: "var(--c-info-600)" }), minimumQueryLengthMessage.replace('{n}', minimumQueryLength.toString())));
  }
  _emptyItem() {
    const { query, loading, noMatchingItemsMessage } = this
      .parent;
    if (!query || loading)
      return;
    return (index.h("li", null, index.h("c-icon", { path: mdi.mdiAlert, size: 18, color: "var(--c-warning-600)" }), noMatchingItemsMessage));
  }
  _renderList() {
    return this.itemType === 'option'
      ? this._renderOptionsList()
      : this._renderItemsList();
  }
  _renderOptionsList() {
    if (!this.items.length)
      return this._minimumQueryItem() || this._emptyItem();
    const options = Array.from(this.items);
    this._listItems.length = 0;
    return options.map((option, index$1) => {
      const optionValue = option.querySelector('c-option-value');
      if (optionValue) {
        optionValue.innerHTML = this._highlightMatchingText(optionValue.textContent);
      }
      return (index.h("li", { ref: (el) => this._listItems.push(el), id: `${this.hostId}-option-${option.value}`, tabindex: "-1", role: "option", "aria-set-size": this.items.length.toString(), "aria-pos-in-set": (index$1 + 1).toString(), "aria-selected": (!!option.selected).toString(), class: { disabled: !!option.disabled }, "data-name": option.name, onClick: (event) => {
          if (option.disabled) {
            event.preventDefault();
            return;
          }
          this.selectOption.emit({ name: option.name, value: option.value });
        }, innerHTML: option.outerHTML }));
    });
  }
  _renderItemsList() {
    if (!this.items.length)
      return this._minimumQueryItem() || this._emptyItem();
    this._listItems.length = 0;
    return this.items.map((item, index$1) => {
      return (index.h("li", { ref: (el) => this._listItems.push(el), id: `${this.hostId}-option-${item.value}`, tabindex: "-1", role: "option", "aria-set-size": this.items.length.toString(), "aria-pos-in-set": (index$1 + 1).toString(), "aria-selected": (this.index === index$1).toString(), class: { disabled: !!item.disabled }, "data-name": item.name, onClick: (event) => {
          if (item.disabled) {
            event.preventDefault();
            return;
          }
          this.selectOption.emit({ name: item.name, value: item.value });
        } }, index.h("span", { innerHTML: this._highlightMatchingText(item.name) })));
    });
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      var _a;
      const selection = this._listItems[this.index];
      const ending = !!this.items.length
        ? ', to navigate use up and down arrows'
        : '';
      const total = this._listItems.length;
      const position = this.index + 1;
      const isDisabled = !!((_a = selection === null || selection === void 0 ? void 0 : selection.classList) === null || _a === void 0 ? void 0 : _a.contains('disabled'));
      const beginning = isDisabled ? 'Disabled option - ' : '';
      let selectionText = !!selection
        ? `${beginning}${selection.dataset.name} -  ${position} of ${total} is highlighted`
        : null;
      if (this.index === null && this.type === 'autocomplete') {
        selectionText = this.items.length
          ? `${this.items.length} result${this.items.length !== 1 ? 's' : ''} available`
          : 'No search results available';
      }
      this.statusText = `${selectionText || ending}`;
      this._debounce = null;
    }, 1400);
  }
  render() {
    if (!this._isMobile &&
      this._dialog &&
      this.itemsPerPage &&
      this.itemsPerPage > 0 &&
      this.items.length > this.itemsPerPage) {
      this._dialog.style.maxHeight = 42 * (this.itemsPerPage + 0.5) + 60 + 'px';
      this._list.style.maxHeight = 42 * (this.itemsPerPage + 0.5) + 'px';
    }
    return (index.h(index.Host, null, index.h("slot", { name: "default" }), index.h("div", { class: "dummy", ref: (el) => (this._dummyElement = el) }), index.h("dialog", { tabindex: "-1", ref: (el) => (this._dialog = el), class: { mobile: this._isMobile }, onCancel: () => this.close() }, index.h("div", { onClick: (event) => event.stopPropagation() }, index.h("div", { id: 'announce-' + this.hostId, class: "visuallyhidden", "aria-live": "polite", "aria-atomic": "true" }, this.statusText), index.h("div", { class: "input-top-wrapper" }, index.h("slot", { name: "input-top" })), index.h("ul", { ref: (el) => (this._list = el), id: `${this.hostId}--results`, role: "listbox", "aria-expanded": this.isOpen.toString(), class: { active: this.isOpen, mobile: this._isMobile }, tabindex: "-1" }, this.renderedList), index.h("div", { class: {
        active: this._openedOnTop,
        'input-bottom-wrapper': true,
      } }, index.h("slot", { name: "input-bottom" }))))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "items": ["optionsWatcher"],
    "isOpen": ["stateWatcher"],
    "index": ["handleIndexChange"]
  }; }
};
CDropdown.style = cDropdownCss;

const cIconCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-icon){--_c-icon-color:var(\n    --c-icon-color,\n    var(--_c-icon-default-color, curentColor)\n  );--_c-icon-size:var(--c-icon-size, 24px);display:inline-flex;align-items:center;height:var(--_c-icon-size);width:var(--_c-icon-size)}:host(c-icon) svg{height:var(--_c-icon-size);width:var(--_c-icon-size)}:host(c-icon) svg path{fill:var(--_c-icon-color)}";

const CIcon = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.path = undefined;
    this.size = 24;
    this.color = 'currentColor';
  }
  componentDidLoad() {
    this._pathElement.setAttribute('d', this.host.dataset.path);
  }
  render() {
    return (index.h(index.Host, { style: {
        '--_c-icon-size': `${this.size}px`,
        '--_c-icon-default-color': this.color,
      }, "data-path": this.path }, index.h("svg", { viewBox: "0 0 24 24" }, index.h("path", { ref: (el) => (this._pathElement = el) }))));
  }
  get host() { return index.getElement(this); }
};
CIcon.style = cIconCss;

const cIconButtonCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-icon-button-background-color:var(--c-icon-button-background-color, var(--c-primary-600));--_c-icon-button-background-color-hover:var(--c-icon-button-background-color-hover, var(--c-primary-400));--_c-icon-button-badge-background-color:var(--c-icon-button-badge-background-color, var(--c-warning-600));--_c-icon-button-badge-border-color:var(--c-icon-button-badge-border-color, var(--c-white));--_c-icon-button-badge-text-color:var(--c-icon-button-badge-text-color, var(--c-white));--_c-icon-button-border-radius:var(--c-icon-button-border-radius, 50%);--_c-icon-button-outline-color:var(--c-icon-button-outline-color, var(--c-primary-600));--_c-icon-button-text-color:var(--c-icon-button-text-color, var(--c-white));--_c-icon-button-loader-color:var(--_c-icon-button-text-color);--_c-icon-button-height:40px;--_c-icon-button-width:40px;--_c-icon-button-outline-offset:var(--c-icon-button-outline-offset, 2px);display:block;position:relative;border-radius:var(--_c-icon-button-border-radius)}:host button{background-color:transparent;color:currentColor;display:inline-grid;place-items:center;border:none;padding:0;position:relative;margin:0;width:100%;height:100%;cursor:pointer;transition:background-color 0.3s cubic-bezier(0.25, 0.8, 0.5, 1), color 0.3s cubic-bezier(0.25, 0.8, 0.5, 1);outline:none;border-radius:var(--_c-icon-button-border-radius)}:host button:disabled{cursor:default}:host c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-badge-text-color))}:host(.c-icon-button) button{appearance:none}:host(.c-icon-button){font-family:var(--c-font-family);display:flex;border:none;padding:0;width:var(--_c-icon-button-width);height:var(--_c-icon-button-height);background-color:var(--_c-icon-button-background-color);color:var(--_c-icon-button-text-color);transition:background-color 0.3s ease;cursor:pointer;position:relative;align-items:center;justify-content:center;backface-visibility:hidden;transform:translate3d(0, 0, 0);line-height:normal}:host(.c-icon-button) ::slotted(c-icon){--_c-icon-size:24px}:host(.c-icon-button) ::slotted(svg),:host(.c-icon-button) ::slotted(i),:host(.c-icon-button) ::slotted(span){width:24px;height:24px;font-size:24px}:host(.c-icon-button) ::slotted(*),:host(.c-icon-button) svg{display:flex;align-items:center;justify-content:center}:host(:host:hover){background-color:var(--_c-icon-button-background-color-hover)}:host(.c-icon-button--small){--_c-icon-button-height:32px;--_c-icon-button-width:32px}:host(.c-icon-button--small) ::slotted(c-icon){--_c-icon-size:20px}:host(.c-icon-button--small) ::slotted(svg),:host(.c-icon-button--small) ::slotted(i),:host(.c-icon-button--small) ::slotted(span){width:22px !important;height:22px !important;font-size:16px !important}:host(.c-icon-button--x-small){--_c-icon-button-height:28px;--_c-icon-button-width:28px}:host(.c-icon-button--x-small) ::slotted(c-icon){--_c-icon-size:14px}:host(.c-icon-button--x-small) ::slotted(svg),:host(.c-icon-button--x-small) ::slotted(i),:host(.c-icon-button--x-small) ::slotted(span){width:18px !important;height:18px !important;font-size:14px !important}:host(.c-icon-button) button:focus{outline:none}:host(.c-icon-button) button:focus-visible{outline:2px var(--_c-icon-button-outline-color) solid;outline-offset:var(--_c-icon-button-outline-offset)}:host(.c-icon-button--inverted){--_c-icon-button-inverted-background-color:var(--c-icon-button-inverted-background-color, var(--c-white));--_c-icon-button-inverted-text-color:var(--c-icon-button-inverted-text-color, var(--c-primary-600));--_c-icon-button-inverted-background-color-hover:var(--c-icon-button-inverted-background-color-hover, var(--c-primary-200));--_c-icon-button-inverted-badge-background-color:var(--c-icon-button-inverted-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-icon-button-inverted-badge-border-color:var(--c-icon-button-inverted-badge-border-color, var(--c-transparent));--_c-icon-button-inverted-badge-text-color:var(--c-icon-button-inverted-badge-text-color, var(--_c-icon-button-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-inverted-text-color);background-color:var(--_c-icon-button-inverted-background-color);color:var(--_c-icon-button-inverted-text-color)}:host(.c-icon-button--inverted) c-badge{--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-inverted-badge-border-color));--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-inverted-badge-background-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-inverted-badge-text-color))}:host(.c-icon-button--inverted:hover){background-color:var(--_c-icon-button-inverted-background-color-hover)}:host(.c-icon-button--inverted.c-icon-button--disabled){--_c-icon-button-inverted-background-color-disabled:var(--c-icon-button-inverted-background-color-disabled, var(--_c-icon-button-background-color-disabled));--_c-icon-button-inverted-text-color-disabled:var(--c-icon-button-inverted-text-color-disabled, var(--_c-icon-button-text-color-disabled));--_c-icon-button-inverted-outline-color-disabled:var(--c-icon-button-inverted-outline-color-disabled, var(--_c-icon-button-outline-color-disabled));--_c-icon-button-inverted-badge-background-color-disabled:var(--c-icon-button-inverted-badge-background-color-disabled, var(--c-tertiary-200));--_c-icon-button-inverted-badge-border-color-disabled:var(--c-icon-button-inverted-badge-border-color-disabled, var(--c-transparent));--_c-icon-button-inverted-badge-text-color-disabled:var(--c-icon-button-inverted-badge-text-color-disabled, var(--c-tertiary-700));--_c-icon-button-loader-color:var(--_c-icon-button-inverted-text-color-disabled);background-color:var(--_c-icon-button-inverted-background-color-disabled);color:var(--_c-icon-button-inverted-text-color-disabled);pointer-events:none}:host(.c-icon-button--inverted.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-inverted-badge-background-color-disabled));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-inverted-badge-border-color-disabled));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-inverted-badge-text-color-disabled))}:host(.c-icon-button--inverted.c-icon-button--disabled) .icon-button-badge{background:#acacac}:host(.c-icon-button--disabled){--_c-icon-button-background-color-disabled:var(--c-icon-button-background-color-disabled, var(--c-tertiary-100));--_c-icon-button-background-color-disabled-hover:var(--c-icon-button-background-color-disabled-hover, var(--c-tertiary-100));--_c-icon-button-text-color-disabled:var(--c-icon-button-text-color-disabled, var(--c-tertiary-600));--_c-icon-button-outline-color-disabled:var(--c-icon-button-outline-color-disabled, var(--c-tertiary-600));--_c-icon-button-badge-background-color-disabled:var(--c-icon-button-badge-background-color-disabled, var(--c-tertiary-600));--_c-icon-button-badge-border-color-disabled:var(--c-icon-button-badge-border-color-disabled, var(--_c-icon-button-badge-border-color));--_c-icon-button-badge-text-color-disabled:var(--c-icon-button-badge-text-color-disabled, var(--_c-icon-button-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-text-color-disabled);background-color:var(--_c-icon-button-background-color-disabled);color:var(--_c-icon-button-text-color-disabled);pointer-events:none}:host(.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-badge-background-color-disabled));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-badge-border-color-disabled));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-badge-text-color-disabled))}:host(.c-icon-button--danger){--_c-icon-button-danger-background-color:var(--c-icon-button-danger-background-color, var(--c-error-600));--_c-icon-button-danger-text-color:var(--c-icon-button-danger-text-color, var(--c-white));--_c-icon-button-danger-background-color-hover:var(--c-icon-button-danger-background-color-hover, var(--c-error-400));--_c-icon-button-danger-badge-background-color:var(--c-icon-button-danger-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-icon-button-danger-badge-border-color:var(--c-icon-button-danger-badge-border-color, var(--_c-icon-button-badge-border-color));--_c-icon-button-danger-badge-text-color:var(--c-icon-button-danger-badge-text-color, var(--_c-icon-button-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-danger-text-color);background-color:var(--_c-icon-button-danger-background-color);color:var(--_c-icon-button-danger-text-color)}:host(.c-icon-button--danger) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-danger-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-danger-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-danger-badge-text-color))}:host(.c-icon-button--danger:hover){background-color:var(--_c-icon-button-danger-background-color-hover)}:host(.c-icon-button--danger.c-icon-button--disabled){--_c-icon-button-danger-background-color-disabled:var(--c-icon-button-danger-background-color-disabled, var(--_c-icon-button-background-color-disabled));--_c-icon-button-danger-text-color-disabled:var(--c-icon-button-danger-text-color-disabled, var(--_c-icon-button-text-color-disabled));--_c-icon-button-danger-badge-background-color-disabled:var(--c-icon-button-danger-badge-background-color-disabled, var(--_c-icon-button-badge-background-color-disabled));--_c-icon-button-danger-badge-border-color-disabled:var(--c-icon-button-danger-badge-border-color-disabled, var(--_c-icon-button-badge-border-color-disabled));--_c-icon-button-danger-badge-text-color-disabled:var(--c-icon-button-danger-badge-text-color-disabled, var(--_c-icon-button-badge-text-color-disabled));--_c-icon-button-loader-color:var(--_c-icon-button-danger-text-color-disabled);background-color:var(--_c-icon-button-danger-background-color-disabled);color:var(--_c-icon-button-danger-text-color-disabled)}:host(.c-icon-button--danger.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-danger-badge-background-color-disabled));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-danger-badge-border-color-disabled));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-danger-badge-text-color-disabled))}:host(.c-icon-button--danger.c-icon-button--inverted){--_c-icon-button-danger-inverted-background-color:var(--_c-icon-button-inverted-background-color);--_c-icon-button-danger-inverted-text-color:var(--_c-icon-button-danger-background-color);--_c-icon-button-danger-inverted-badge-background-color:var(--_c-icon-button-inverted-badge-background-color);--_c-icon-button-danger-inverted-badge-border-color:var(--_c-icon-button-inverted-badge-border-color);--_c-icon-button-danger-inverted-badge-text-color:var(--_c-icon-button-inverted-badge-text-color);--_c-icon-button-loader-color:var(--_c-icon-button-danger-inverted-text-color);background-color:var(--_c-icon-button-danger-inverted-background-color);color:var(--_c-icon-button-danger-inverted-text-color)}:host(.c-icon-button--danger.c-icon-button--inverted) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-danger-inverted-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-danger-inverted-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-danger-inverted-badge-text-color))}:host(.c-icon-button--danger.c-icon-button--inverted.c-icon-button--disabled){--_c-icon-button-danger-inverted-disabled-background-color:var(--_c-icon-button-background-color-disabled);--_c-icon-button-danger-inverted-disabled-text-color:var(--_c-icon-button-text-color-disabled);--_c-icon-button-danger-inverted-disabled-badge-background-color:var(--_c-icon-button-inverted-badge-background-color-disabled);--_c-icon-button-danger-inverted-disabled-badge-border-color:var(--_c-icon-button-inverted-badge-border-color);--_c-icon-button-danger-inverted-disabled-badge-text-color:var(--_c-icon-button-inverted-badge-text-color-disabled);--_c-icon-button-loader-color:var(--_c-icon-button-danger-inverted-disabled-text-color);background-color:var(--_c-icon-button-danger-inverted-disabled-background-color);color:var(--_c-icon-button-danger-inverted-disabled-text-color)}:host(.c-icon-button--danger.c-icon-button--inverted.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-danger-inverted-disabled-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-danger-inverted-disabled-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-danger-inverted-disabled-badge-text-color))}:host(.c-icon-button--ghost){--_c-icon-button-ghost-background-color:var(--c-icon-button-ghost-background-color, rgba(var(--c-primary-rgb), 0.2));--_c-icon-button-ghost-text-color:var(--c-icon-button-ghost-text-color, var(--c-primary-600));--_c-icon-button-ghost-background-color-hover:var(--c-icon-button-ghost-background-color-hover, rgba(var(--c-primary-rgb), 0.3));--_c-icon-button-ghost-badge-background-color:var(--c-icon-button-ghost-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-icon-button-ghost-badge-border-color:var(--c-icon-button-ghost-badge-border-color, var(--_c-icon-button-badge-border-color));--_c-icon-button-ghost-badge-text-color:var(--c-icon-button-ghost-badge-text-color, var(--_c-icon-button-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-ghost-text-color);background-color:var(--_c-icon-button-ghost-background-color);color:var(--_c-icon-button-ghost-text-color)}:host(.c-icon-button--ghost) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-badge-text-color))}:host(.c-icon-button--ghost:hover){background-color:var(--_c-icon-button-ghost-background-color-hover)}:host(.c-icon-button--ghost.c-icon-button--inverted){--_c-icon-button-ghost-inverted-background-color:var(--c-icon-button-ghost-inverted-background-color, rgba(var(--c-white-rgb), 0.2));--_c-icon-button-ghost-inverted-background-color-hover:var(--c-icon-button-ghost-inverted-background-color-hover, rgba(var(--c-white-rgb), 0.3));--_c-icon-button-ghost-inverted-text-color:var(--c-icon-button-ghost-inverted-text-color, var(--c-white));--_c-icon-button-ghost-inverted-badge-background-color:var(--c-icon-button-ghost-inverted-badge-background-color, var(--_c-icon-button-inverted-badge-background-color));--_c-icon-button-ghost-inverted-badge-border-color:var(--c-icon-button-ghost-inverted-badge-border-color, var(--_c-icon-button-inverted-badge-border-color));--_c-icon-button-ghost-inverted-badge-text-color:var(--c-icon-button-ghost-inverted-badge-text-color, var(--_c-icon-button-inverted-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-ghost-inverted-text-color);background-color:var(--_c-icon-button-ghost-inverted-background-color);color:var(--_c-icon-button-ghost-inverted-text-color)}:host(.c-icon-button--ghost.c-icon-button--inverted) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-ghost-inverted-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-ghost-inverted-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-ghost-inverted-badge-text-color))}:host(.c-icon-button--ghost.c-icon-button--inverted:hover){background-color:var(--_c-icon-button-ghost-inverted-background-color-hover)}:host(.c-icon-button--ghost.c-icon-button--disabled){--_c-icon-button-ghost-disabled-background-color:var(--c-icon-button-ghost-disabled-background-color, var(--c-tertiary-200));--_c-icon-button-ghost-disabled-text-color:var(--c-icon-button-ghost-disabled-text-color, var(--c-tertiary-500));--_c-icon-button-ghost-disabled-background-color-hover:var(--c-icon-button-ghost-disabled-background-color-hover, var(--c-tertiary-100));--_c-icon-button-ghost-disabled-badge-background-color:var(--c-icon-button-ghost-disabled-badge-background-color, var(--_c-icon-button-badge-background-color-disabled));--_c-icon-button-ghost-disabled-badge-border-color:var(--c-icon-button-ghost-disabled-badge-border-color, var(--_c-icon-button-badge-border-color-disabled));--_c-icon-button-ghost-disabled-badge-text-color:var(--c-icon-button-ghost-disabled-badge-text-color, var(--_c-icon-button-badge-text-color-disabled));--_c-icon-button-loader-color:var(--_c-icon-button-ghost-disabled-text-color);background-color:var(--_c-icon-button-ghost-disabled-background-color);color:var(--_c-icon-button-ghost-disabled-text-color)}:host(.c-icon-button--ghost.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-ghost-disabled-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-ghost-disabled-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-ghost-disabled-badge-text-color))}:host(.c-icon-button--ghost.c-icon-button--disabled:hover){background-color:var(--_c-icon-button-ghost-disabled-background-color-hover)}:host(.c-icon-button--ghost.c-icon-button--inverted.c-icon-button--disabled){--_c-icon-button-ghost-inverted-disabled-background-color:var(--c-icon-button-ghost-inverted-disabled-background-color, rgba(var(--c-white-rgb), 0.05));--_c-icon-button-ghost-inverted-disabled-text-color:var(--c-icon-button-ghost-inverted-disabled-text-color, var(--c-tertiary-400));--_c-icon-button-ghost-inverted-disabled-badge-background-color:var(--c-icon-button-ghost-inverted-disabled-badge-background-color, var(--_c-icon-button-inverted-badge-background-color-disabled));--_c-icon-button-ghost-inverted-disabled-badge-border-color:var(--c-icon-button-ghost-inverted-disabled-badge-border-color, var(--_c-icon-button-inverted-badge-border-color));--_c-icon-button-ghost-inverted-disabled-badge-text-color:var(--c-icon-button-ghost-inverted-disabled-badge-text-color, var(--_c-icon-button-inverted-badge-text-color-disabled));--_c-icon-button-loader-color:var(--_c-icon-button-ghost-inverted-disabled-text-color);background-color:var(--_c-icon-button-ghost-inverted-disabled-background-color);color:var(--_c-icon-button-ghost-inverted-disabled-text-color)}:host(.c-icon-button--ghost.c-icon-button--inverted.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-ghost-inverted-disabled-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-ghost-inverted-disabled-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-ghost-inverted-disabled-badge-text-color))}:host(.c-icon-button--text){--_c-icon-button-text-text-color:var(--c-icon-button-text-text-color, var(--c-primary-600));--_c-icon-button-text-background-color:var(--c-icon-button-text-background-color, var(--c-transparent));--_c-icon-button-text-background-color-hover:var(--c-icon-button-text-background-color-hover, var(--c-primary-100));--_c-icon-button-text-badge-background-color:var(--c-icon-button-text-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-icon-button-text-badge-border-color:var(--c-icon-button-text-badge-border-color, var(--_c-icon-button-badge-border-color));--_c-icon-button-text-badge-text-color:var(--c-icon-button-text-badge-text-color, var(--_c-icon-button-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-text-text-color);background-color:var(--_c-icon-button-text-background-color);color:var(--_c-icon-button-text-text-color)}:host(.c-icon-button--text) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-text-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-text-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-text-badge-text-color))}:host(.c-icon-button--text:hover){background-color:var(--_c-icon-button-text-background-color-hover)}:host(.c-icon-button--text.c-icon-button--inverted){--_c-icon-button-text-inverted-text-color:var(--c-icon-button-text-inverted-text-color, var(--c-white));--_c-icon-button-text-inverted-background-color:var(--c-icon-button-text-inverted-background-color, var(--c-transparent));--_c-icon-button-text-inverted-background-color-hover:var(--c-icon-button-text-inverted-background-color-hover, rgba(var(--c-white-rgb), 0.2));--_c-icon-button-text-inverted-badge-background-color:var(--c-icon-button-text-inverted-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-icon-button-text-inverted-badge-border-color:var(--c-icon-button-text-inverted-badge-border-color, var(--_c-icon-button-inverted-badge-border-color));--_c-icon-button-text-inverted-badge-text-color:var(--c-icon-button-text-inverted-badge-text-color, var(--_c-icon-button-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-text-inverted-text-color);background-color:var(--_c-icon-button-text-inverted-background-color);color:var(--_c-icon-button-text-inverted-text-color)}:host(.c-icon-button--text.c-icon-button--inverted) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-text-inverted-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-text-inverted-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-text-inverted-badge-text-color))}:host(.c-icon-button--text.c-icon-button--inverted:hover){background-color:var(--_c-icon-button-text-inverted-background-color-hover)}:host(.c-icon-button--text.c-icon-button--disabled){--_c-icon-button-text-disabled-text-color:var(--c-icon-button-text-disabled-text-color, var(--c-tertiary-400));--_c-icon-button-text-disabled-background-color:var(--c-icon-button-text-disabled-background-color, var(--c-transparent));--_c-icon-button-text-disabled-badge-background-color:var(--c-icon-button-text-disabled-badge-background-color, var(--_c-icon-button-badge-background-color-disabled));--_c-icon-button-text-disabled-badge-border-color:var(--c-icon-button-text-disabled-badge-border-color, var(--_c-icon-button-badge-border-color-disabled));--_c-icon-button-text-disabled-badge-text-color:var(--c-icon-button-text-disabled-badge-text-color, var(--_c-icon-button-badge-text-color-disabled));--_c-icon-button-loader-color:var(--_c-icon-button-text-disabled-text-color);background-color:var(--_c-icon-button-text-disabled-background-color);color:var(--_c-icon-button-text-disabled-text-color)}:host(.c-icon-button--text.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-text-disabled-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-text-disabled-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-text-disabled-badge-text-color))}:host(.c-icon-button--text.c-icon-button--inverted.c-icon-button--disabled){--_c-icon-button-text-inverted-disabled-text-color:var(--c-icon-button-text-inverted-disabled-text-color, var(--c-tertiary-400));--_c-icon-button-text-inverted-disabled-background-color:var(--c-icon-button-text-inverted-disabled-background-color, var(--c-transparent));--_c-icon-button-text-inverted-disabled-badge-background-color:var(--c-icon-button-text-inverted-disabled-badge-background-color, var(--_c-icon-button-inverted-badge-background-color-disabled));--_c-icon-button-text-inverted-disabled-badge-border-color:var(--c-icon-button-text-inverted-disabled-badge-border-color, var(--_c-icon-button-inverted-badge-border-color-disabled));--_c-icon-button-text-inverted-disabled-badge-text-color:var(--c-icon-button-text-inverted-disabled-badge-text-color, var(--_c-icon-button-inverted-badge-text-color-disabled));--_c-icon-button-loader-color:var(--_c-icon-button-text-inverted-disabled-text-color);background-color:var(--_c-icon-button-text-inverted-disabled-background-color);color:var(--_c-icon-button-text-inverted-disabled-text-color)}:host(.c-icon-button--text.c-icon-button--inverted.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-text-inverted-disabled-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-text-inverted-disabled-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-text-inverted-disabled-badge-text-color))}:host(.c-icon-button--outlined){--_c-icon-button-outlined-text-color:var(--c-icon-button-outlined-text-color, var(--c-primary-600));--_c-icon-button-outlined-background-color:var(--c-icon-button-outlined-background-color, var(--c-transparent));--_c-icon-button-outlined-background-color-hover:var(--c-icon-button-outlined-background-color-hover, rgba(var(--c-primary-rgb), 0.1));--_c-icon-button-outlined-border-color:var(--c-icon-button-outlined-border-color, var(--_c-icon-button-outlined-text-color));--_c-icon-button-outlined-badge-background-color:var(--c-icon-button-outlined-badge-background-color, var(--_c-icon-button-badge-background-color));--_c-icon-button-outlined-badge-border-color:var(--c-icon-button-outlined-badge-border-color, var(--_c-icon-button-badge-border-color));--_c-icon-button-outlined-badge-text-color:var(--c-icon-button-outlined-badge-text-color, var(--_c-icon-button-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-outlined-text-color);background-color:var(--_c-icon-button-outlined-background-color);box-shadow:inset 0 0 0 2px var(--_c-icon-button-outlined-border-color);color:var(--_c-icon-button-outlined-text-color)}:host(.c-icon-button--outlined) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-outlined-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-outlined-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-outlined-badge-text-color))}:host(.c-icon-button--outlined:hover){background-color:var(--_c-icon-button-outlined-background-color-hover)}:host(.c-icon-button--outlined.c-icon-button--disabled){--_c-icon-button-outlined-disabled-text-color:var(--c-icon-button-outlined-disabled-text-color, var(--c-tertiary-500));--_c-icon-button-outlined-disabled-background-color:var(--c-icon-button-outlined-disabled-background-color, var(--c-transparent));--_c-icon-button-outlined-disabled-border-color:var(--c-icon-button-outlined-disabled-border-color, var(--c-tertiary-400));--_c-icon-button-outlined-disabled-badge-background-color:var(--c-icon-button-outlined-disabled-badge-background-color, var(--_c-icon-button-badge-background-color-disabled));--_c-icon-button-outlined-disabled-badge-border-color:var(--c-icon-button-outlined-disabled-badge-border-color, var(--_c-icon-button-badge-border-color-disabled));--_c-icon-button-outlined-disabled-badge-text-color:var(--c-icon-button-outlined-disabled-badge-text-color, var(--_c-icon-button-badge-text-color-disabled));--_c-icon-button-loader-color:var(--_c-icon-button-outlined-disabled-text-color);background-color:var(--_c-icon-button-outlined-disabled-background-color);box-shadow:inset 0 0 0 2px var(--_c-icon-button-outlined-disabled-border-color);color:var(--_c-icon-button-outlined-disabled-text-color)}:host(.c-icon-button--outlined.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-outlined-disabled-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-outlined-disabled-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-outlined-disabled-badge-text-color))}:host(.c-icon-button--outlined.c-icon-button--inverted){--_c-icon-button-outlined-inverted-text-color:var(--c-icon-button-outlined-inverted-text-color, var(--c-white));--_c-icon-button-outlined-inverted-background-color:var(--c-icon-button-outlined-inverted-background-color, var(--c-transparent));--_c-icon-button-outlined-inverted-background-color-hover:var(--c-icon-button-outlined-inverted-background-color-hover, rgba(var(--c-white-rgb), 0.2));--_c-icon-button-outlined-inverted-border-color:var(--c-icon-button-outlined-inverted-border-color, var(--_c-icon-button-outlined-inverted-text-color));--_c-icon-button-outlined-inverted-badge-background-color:var(--c-icon-button-outlined-inverted-badge-background-color, var(--_c-icon-button-inverted-badge-background-color));--_c-icon-button-outlined-inverted-badge-border-color:var(--c-icon-button-outlined-inverted-badge-border-color, var(--_c-icon-button-inverted-badge-border-color));--_c-icon-button-outlined-inverted-badge-text-color:var(--c-icon-button-outlined-inverted-badge-text-color, var(--_c-icon-button-inverted-badge-text-color));--_c-icon-button-loader-color:var(--_c-icon-button-outlined-inverted-text-color);background-color:var(--_c-icon-button-outlined-inverted-background-color);box-shadow:inset 0 0 0 2px var(--_c-icon-button-outlined-inverted-border-color);color:var(--_c-icon-button-outlined-inverted-text-color)}:host(.c-icon-button--outlined.c-icon-button--inverted) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-outlined-inverted-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-outlined-inverted-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-outlined-inverted-badge-text-color))}:host(.c-icon-button--outlined.c-icon-button--inverted:hover){background-color:var(--_c-icon-button-outlined-inverted-background-color-hover)}:host(.c-icon-button--outlined.c-icon-button--inverted.c-icon-button--disabled){--_c-icon-button-outlined-inverted-disabled-text-color:var(--c-icon-button-outlined-inverted-disabled-text-color, var(--c-tertiary-400));--_c-icon-button-outlined-inverted-disabled-background-color:var(--c-icon-button-outlined-inverted-disabled-background-color, var(--c-transparent));--_c-icon-button-outlined-inverted-disabled-border-color:var(--c-icon-button-outlined-inverted-disabled-border-color, var(--c-tertiary-500));--_c-icon-button-outlined-inverted-disabled-badge-background-color:var(--c-icon-button-outlined-inverted-disabled-badge-background-color, var(--_c-icon-button-inverted-badge-background-color-disabled));--_c-icon-button-outlined-inverted-disabled-badge-border-color:var(--c-icon-button-outlined-inverted-disabled-badge-border-color, var(--_c-icon-button-inverted-badge-border-color-disabled));--_c-icon-button-outlined-inverted-disabled-badge-text-color:var(--c-icon-button-outlined-inverted-disabled-badge-text-color, var(--_c-icon-button-inverted-badge-text-color-disabled));--_c-icon-button-loader-color:var(--_c-icon-button-outlined-iverted-disabled-text-color);background-color:var(--_c-icon-button-outlined-inverted-disabled-background-color);box-shadow:inset 0 0 0 2px var(--_c-icon-button-outlined-inverted-disabled-border-color);color:var(--_c-icon-button-outlined-inverted-disabled-text-color)}:host(.c-icon-button--outlined.c-icon-button--inverted.c-icon-button--disabled) c-badge{--_c-badge-background-color:var(--c-badge-background-color, var(--_c-icon-button-outlined-inverted-disabled-badge-background-color));--_c-badge-text-color:var(--c-badge-text-color, var(--_c-icon-button-outlined-inverted-disabled-badge-border-color));--_c-badge-border-color:var(--c-badge-border-color, var(--_c-icon-button-outlined-inverted-disabled-badge-text-color))}::slotted(*),svg{pointer-events:none}.inner-container{align-items:center;display:flex;height:100%;inset:0;justify-content:center;overflow:hidden;position:relative;transform:translateZ(0);width:100%}";

const CIconButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this._onClick = (event) => {
      this._rippleElement.createRipple(event, this._container);
    };
    this.badge = undefined;
    this.danger = false;
    this.loading = false;
    this.text = false;
    this.inverted = false;
    this.outlined = false;
    this.path = null;
    this.ghost = false;
    this.disabled = false;
    this.size = 'default';
  }
  _renderBadge() {
    return index.h("c-badge", null, this.badge);
  }
  _hostClasses() {
    return {
      'c-icon-button': true,
      'c-icon-button--disabled': !!this.disabled,
      'c-icon-button--danger': !!this.danger,
      'c-icon-button--text': !!this.text,
      'c-icon-button--ghost': !!this.ghost,
      'c-icon-button--outlined': !!this.outlined,
      'c-icon-button--inverted': !!this.inverted,
      'c-icon-button--small': this.size === 'small',
      'c-icon-button--x-small': this.size === 'x-small',
    };
  }
  render() {
    const spinnerSizes = {
      'x-small': 18,
      small: 20,
      default: 24,
    };
    return (index.h(index.Host, { class: this._hostClasses() }, index.h("button", { disabled: this.disabled, onClick: this._onClick }, index.h("div", { class: "inner-container", ref: (el) => (this._container = el) }, this.loading && (index.h("c-spinner", { color: "var(--_c-icon-button-loader-color)", size: spinnerSizes[this.size] })), !this.loading && (index.h("slot", null, this.path && (index.h("svg", { width: "24", height: "24", viewBox: "0 0 24 24" }, index.h("path", { d: this.path })))))), this.badge && this._renderBadge(), index.h("c-ripple", { ref: (el) => (this._rippleElement = el) }))));
  }
};
CIconButton.style = cIconButtonCss;

const cInputCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-input){--_c-input-inactive-color:var(--c-tertiary-600);--_c-input-active-color:var(--c-primary-600);--_c-input-background-color:var(--c-transparent);--_c-input-text-color:var(--c-text-body);--_c-input-placeholder-color:var(--c-tertiary-500);--_c-input-shadow-active-color:var(--_c-input-active-color);--_c-input-shadow-background-color:var(--c-white);--_c-input-shadow-text-color:var(--_c-input-text-color);--_c-input-shadow-placeholder-color:var(--_c-input-placeholder-color);--_c-input-error-color:var(--c-error-600)}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.c-input{--_c-input-border-width:1px;align-items:flex-start;border-radius:4px;display:flex;flex:1 1 auto;font-family:var(--c-font-family);font-size:16px;letter-spacing:normal;max-width:100%;text-align:left}.c-input input,.c-input select,.c-input textarea{background:none;border:0;display:inline-block;font-family:var(--c-font-family);font-size:16px;line-height:1;margin:0;padding:0;vertical-align:middle;white-space:normal}.c-input input,.c-input textarea{box-sizing:content-box;background-color:transparent;border:none;color:var(--_c-input-text-color);flex:1 1 auto;font-family:var(--c-font-family);font-size:16px;line-height:20px;max-width:100%;min-width:0;width:100%}.c-input input[type=checkbox],.c-input input[type=radio],.c-input select{box-sizing:border-box}.c-input input[type=search]{appearance:textfield;box-sizing:content-box}.c-input ::-webkit-search-decoration{display:none}.c-input textarea{margin-top:4px;min-height:44px;overflow:auto;padding:8px 12px 8px 0;resize:vertical;vertical-align:top}.c-input input{max-height:32px;padding:8px 0}.c-input input:focus,.c-input input:active,.c-input input[aria-expanded=true],.c-input textarea:focus,.c-input textarea:active{outline:none}.c-input .c-input__content{align-items:center;display:flex;width:100%}.c-input .c-input__content slot{display:none}.c-input .c-input__content c-icon-button{aspect-ratio:1;margin-right:-6px}.c-input__control{border-radius:inherit;color:currentColor;display:flex;flex-flow:column wrap;flex-grow:1;gap:8px;height:auto;min-width:0;width:100%;position:relative}.c-input__slot{align-items:stretch;background:transparent;border-radius:inherit;color:inherit;cursor:text;display:flex;min-height:44px;padding:0 12px;position:relative;transition:0.3s cubic-bezier(0.25, 0.8, 0.5, 1);width:100%}.c-input__field{align-items:center;display:flex;flex:1 1 auto;gap:8px;position:relative}.c-input__field input,.c-input__field textarea{flex:1;outline:0}.c-input__field label{font-size:16px;height:20px;left:0;letter-spacing:normal;line-height:20px;max-width:90%;min-height:8px;overflow:hidden;pointer-events:none;position:absolute;right:auto;text-overflow:ellipsis;top:12px;transform-origin:top left;transform:translateX(var(--_c-input-label-position)) translateY(0) scale(1);transition:0.3s cubic-bezier(0.25, 0.8, 0.5, 1) 0.08s;white-space:nowrap}.c-input__field label.active{transform:translateY(-18px) scale(0.75)}.c-input__field label span{color:var(--c-error-600)}.c-input--select input{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.c-input--select .c-input__slot{cursor:pointer}.c-input fieldset{background-color:var(--_c-input-background-color);border-collapse:collapse;border-color:var(--_c-input-inactive-color);border-radius:inherit;border-style:solid;border-width:var(--_c-input-border-width);inset:0;margin:0;padding:0 0 0 8px;pointer-events:none;position:absolute;transition-duration:0.15s;transition-property:color;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1)}.c-input fieldset legend{float:none;line-height:11px;margin-left:-1px;padding:0;text-align:left;transition:width 0.3s cubic-bezier(0.25, 0.8, 0.5, 1);width:0}.c-input fieldset legend.active{width:var(--_c-input-legend-width)}.c-input--shadow .c-input__slot{background-color:var(--_c-input-shadow-background-color);box-shadow:rgba(0, 0, 0, 0.15) 0 5px 15px 0}.c-input--shadow .c-input__slot input,.c-input--shadow .c-input__slot textarea{color:var(--_c-input-shadow-text-color)}.c-input--shadow .c-input__slot:focus-within{outline:2px var(--_c-input-active-color) solid}.c-input--shadow .c-input__slot:focus-within c-icon{--c-icon-color:var(--_c-input-shadow-active-color) !important}.c-input--shadow input::placeholder,.c-input--shadow textarea::placeholder{color:var(--_c-input-shadow-placeholder-color);opacity:1}.c-input--disabled input,.c-input--disabled textarea,.c-input--disabled fieldset,.c-input--disabled label{--_c-input-error-color:var(--c-tertiary-500);color:var(--c-tertiary-500)}.c-input--textarea .c-input__field{margin-right:-12px}.c-input ::placeholder{color:var(--_c-input-placeholder-color);opacity:1}.c-input:focus-within,.c-input--active,.c-input:not(.c-input--disabled):active{--_c-input-border-width:2px;color:var(--_c-input-active-color)}.c-input:focus-within fieldset,.c-input--active fieldset,.c-input:not(.c-input--disabled):active fieldset{border-color:var(--_c-input-active-color)}.c-input:focus-within label,.c-input--active label,.c-input:not(.c-input--disabled):active label{color:var(--_c-input-active-color);transform:translateX(0) translateY(-18px) scale(0.75)}.c-input:focus-within legend,.c-input--active legend,.c-input:not(.c-input--disabled):active legend{width:var(--_c-input-legend-width)}.c-input.active:not(.filled) .c-input-menu__input{position:relative}.c-input.active:not(.filled) .c-input-menu__input::after{display:flex;align-items:center;position:absolute;inset:0;content:attr(data-placeholder);pointer-events:none;color:var(--_c-input-placeholder-color)}.c-input--error{color:var(--c-error-600)}.c-input--error fieldset{border-color:var(--c-error-600) !important}.c-input--error label{color:var(--c-error-600) !important}.c-input--error:focus-within{color:var(--c-error-600)}";

const CInput = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    this.itemClick = index.createEvent(this, "itemClick", 3);
    this.dropdownClose = index.createEvent(this, "dropdownClose", 3);
    this._hasBlurred = false;
    this._debounce = null;
    this._observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          this._calculateElementWidths();
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 1 });
    this._onBlur = () => {
      setTimeout(() => {
        this.isFocused = false;
        this._hasBlurred = true;
        this._onReset();
      }, 100);
    };
    this._onFocus = (click = true) => {
      var _a, _b;
      if (this.disabled)
        return;
      this.isFocused = true;
      (_a = this.inputField) === null || _a === void 0 ? void 0 : _a.focus();
      if (click) {
        (_b = this.inputField) === null || _b === void 0 ? void 0 : _b.click();
        if (this.variant === 'select') {
          this.itemClick.emit();
        }
      }
      if (this.inputField) {
        this.inputField.placeholder =
          !!this.value || !this.placeholder ? '' : this.placeholder;
      }
    };
    this.active = false;
    this.autofocus = false;
    this.disabled = false;
    this.form = false;
    this.hideDetails = false;
    this.hint = '';
    this.hostId = undefined;
    this.inputId = undefined;
    this.items = undefined;
    this.itemsPerPage = 6;
    this.label = undefined;
    this.max = null;
    this.min = null;
    this.name = undefined;
    this.placeholder = undefined;
    this.readonly = false;
    this.required = false;
    this.rows = 1;
    this.shadow = false;
    this.step = null;
    this.type = undefined;
    this.valid = true;
    this.validate = false;
    this.validateOnBlur = false;
    this.validation = 'Required field';
    this.value = undefined;
    this.variant = 'text';
    this.isFocused = false;
    this.labelWidth = 0;
    this.preSlotWidth = 0;
    this.statusText = '';
    this.currentIndex = null;
  }
  onValidChange() {
    if (this.validateOnBlur && !this._hasBlurred)
      return;
    this._setAriaDescriptionId();
  }
  onValidationMessageChange() {
    this._updateStatusText();
  }
  onValueChange(value) {
    if (!value) {
      this._onReset();
    }
  }
  onPlaceholderChange(placeholder) {
    if (placeholder)
      this._onReset();
  }
  async reset() {
    this._onReset();
  }
  componentDidLoad() {
    var _a, _b, _c, _d;
    if (this.autofocus) {
      setTimeout(() => {
        this._onFocus(false);
      }, 500);
    }
    this._calculateElementWidths();
    this._setAriaDescriptionId();
    if (this.label) {
      this._observer.observe(this._labelRef);
    }
    (_a = this.inputField) === null || _a === void 0 ? void 0 : _a.addEventListener('focus', () => this._onFocus(false));
    (_b = this.inputField) === null || _b === void 0 ? void 0 : _b.addEventListener('blur', () => this._onBlur());
    (_c = this.inputField) === null || _c === void 0 ? void 0 : _c.addEventListener('keypress', this._preventNonNumericalInput);
    if (this.inputField) {
      this.inputField.placeholder =
        !!this.label || !this.placeholder ? '' : this.placeholder;
      this.inputField.title = (_d = this.label) !== null && _d !== void 0 ? _d : this.placeholder;
      requestAnimationFrame(() => {
        const container = this.inputField.closest('.c-input-menu__input');
        if (!container)
          return;
        container.dataset.placeholder = this.placeholder;
      });
    }
  }
  disconnectedCallback() {
    var _a, _b, _c, _d;
    (_a = this.inputField) === null || _a === void 0 ? void 0 : _a.removeEventListener('focus', () => this._onFocus(false));
    (_b = this.inputField) === null || _b === void 0 ? void 0 : _b.removeEventListener('blur', () => this._onBlur());
    (_c = this.inputField) === null || _c === void 0 ? void 0 : _c.removeEventListener('keypress', this._preventNonNumericalInput);
    this._observer.disconnect();
    (_d = this._dropdownElement) === null || _d === void 0 ? void 0 : _d.remove();
  }
  get isActive() {
    return !!this.value || typeof this.value === 'boolean' || this.isFocused;
  }
  _setAriaDescriptionId() {
    this.inputField.removeAttribute('aria-describedby');
    let type = null;
    if (this.valid && !this.value && this.hint) {
      type = 'hint';
    }
    if (!this.valid) {
      type = 'error';
    }
    if (type) {
      this.inputField.setAttribute('aria-describedby', `${type}-${this.inputId}`);
    }
  }
  _calculateElementWidths() {
    this.labelWidth = !!this.label ? this._labelRef.scrollWidth * 0.75 + 6 : 0;
    this.preSlotWidth = this.inputField.offsetLeft;
  }
  _onReset() {
    if (this.inputField) {
      if (!!this.placeholder &&
        !this.value &&
        (this.active || this.isFocused)) {
        this.inputField.placeholder = this.placeholder;
        return;
      }
      this.inputField.placeholder =
        !this.label && !this.value && !!this.placeholder
          ? this.placeholder
          : '';
    }
  }
  _preventNonNumericalInput(event) {
    if (this.type !== 'number')
      return;
    if (!event.key.match(/^[0-9,\.-]+$/)) {
      event.preventDefault();
    }
  }
  _renderBorders() {
    if (this.shadow)
      return;
    const classes = {
      active: this.isActive || this.active,
    };
    return (index.h("fieldset", { "aria-hidden": "true" }, index.h("legend", { class: classes, style: {
        '--_c-input-legend-width': this.labelWidth + 'px',
      } }, index.h("span", { class: "notranslate" }))));
  }
  _renderLabel() {
    if (!this.label)
      return;
    const classes = {
      active: this.isActive,
    };
    return (index.h("label", { htmlFor: this.inputId, ref: (el) => (this._labelRef = el), class: classes }, this.label, this.required && index.h("span", null, "\u00A0*")));
  }
  get inputField() {
    var _a;
    return (_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector('.c-input__input');
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      this.statusText = this.valid ? '' : `Error: ${this.validation}`;
      this._debounce = null;
    }, 1400);
  }
  render() {
    const containerClasses = {
      'c-input': true,
      'c-input--disabled': this.disabled,
      'c-input--shadow': this.shadow,
      'c-input--textarea': this.rows > 1,
      'c-input--error': !this.valid,
      'c-input--active': this.isFocused || this.active,
      filled: !!this.value,
      [`c-input--${this.variant}`]: true,
    };
    return (index.h(index.Host, { disabled: this.disabled }, index.h("div", { id: 'announce-' + this.inputId, class: "visuallyhidden", "aria-live": "polite", "aria-atomic": "true" }, this.statusText), index.h("div", { class: containerClasses }, index.h("div", { class: "c-input__control" }, index.h("div", { class: "c-input__slot", onClick: () => this._onFocus() }, this._renderBorders(), index.h("div", { class: "c-input__field", style: {
        '--_c-input-label-position': this.preSlotWidth + 'px',
      } }, index.h("slot", { name: "pre" }), this._renderLabel(), index.h("slot", null))), this.variant === 'select' && index.h("slot", { name: "dropdown" }), !this.hideDetails && (index.h("c-message", { hint: this.hint, inputId: this.inputId, valid: this.valid, validation: this.validation }))))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "valid": ["onValidChange"],
    "validation": ["onValidationMessageChange"],
    "value": ["onValueChange"],
    "placeholder": ["onPlaceholderChange"]
  }; }
};
CInput.style = cInputCss;

const cLoaderCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-loader-color:var(--c-loader-color, var(--c-primary-600));--_c-loader-background-color:var(--c-loader-background-color, rgba(var(--c-white-rgb), 0.8));--_c-loader-text-color:var(--c-loader-text-color, var(--c-text-system));--_c-stroke-start-dasharray:1, 200;--_c-stroke-end-dasharray:89, 200;width:100%;position:absolute;inset:0;z-index:6;background:var(--_c-loader-background-color);border-radius:inherit;visibility:hidden;opacity:0;transition:opacity 0.3s ease-in-out, transform 0.3s ease-in-out}:host(.active){opacity:1;visibility:visible}:host(.active) .c-loader{transform:scale(1)}.c-loader{height:100%;width:100%;display:flex;flex-direction:column;align-items:center;justify-content:center;transform:scale(0.5);transition:transform 0.3s ease-in-out}.c-loader__slot{line-height:40px;font-size:14px;color:var(--_c-loader-text-color);text-align:center;font-weight:500;display:block;max-height:0;overflow:hidden;animation-duration:4s;animation-direction:forwards;animation-iteration-count:1;animation-name:fadein;animation-fill-mode:forwards}@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes animate-stroke{0%{stroke-dasharray:var(--_c-stroke-start-dasharray);stroke-dashoffset:0}50%{stroke-dasharray:var(--_c-stroke-end-dasharray);stroke-dashoffset:-35}100%{stroke-dasharray:var(--_c-stroke-end-dasharray);stroke-dashoffset:-124}}@keyframes fadein{0%{max-height:0}100%{max-height:300px}}";

const CLoader = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.contentdelay = 0;
    this.hide = false;
    this.size = 48;
    this.width = 4;
  }
  onElementHide(hide) {
    requestAnimationFrame(() => this.el.classList.toggle('active', !hide));
  }
  componentDidLoad() {
    requestAnimationFrame(() => this.el.classList.toggle('active', !this.hide));
  }
  render() {
    const slotHasContent = !!this.el.childNodes.length;
    const styles = {
      '--c-loader-size': `${this.size}px`,
    };
    return (index.h(index.Host, null, index.h("div", { class: "c-loader", style: styles }, index.h("c-spinner", { color: "var(--_c-loader-color)", size: this.size, width: this.width }), slotHasContent && (index.h("div", { class: "c-loader__slot", style: { 'animation-delay': `${this.contentdelay}s` } }, index.h("slot", null))))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "hide": ["onElementHide"]
  }; }
};
CLoader.style = cLoaderCss;

const cMainCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-main){--_c-main-background-color:var(--c-main-background-color, var(--c-primary-200));--_c-main-text-color:var(--c-main-text-color, var(--c-text-body));background:var(--_c-main-background-color);color:var(--_c-main-text-color);display:flex;flex-direction:column;height:100vh}:host(c-main) ::slotted(*){color:var(--_c-main-text-color)}:host(c-main) main.dashboard{display:grid;grid-template:\"toolbar toolbar\" auto \"sidenav page\" 1fr/auto 1fr;gap:0}:host(c-main) main.dashboard ::slotted(c-toolbar){grid-area:toolbar}:host(c-main) main.dashboard ::slotted(c-page){grid-area:page}:host(c-main) main.dashboard ::slotted(c-side-navigation){grid-area:sidenav}*,::after,::before,body{box-sizing:border-box;margin:0}";

const CMain = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.disableLayout = false;
  }
  render() {
    return (index.h("main", { class: { dashboard: !this.disableLayout } }, index.h("slot", null)));
  }
};
CMain.style = cMainCss;

const cMessageCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-message-error-color:var(--c-error-600);--_c-message-hint-color:var(--c-text-system);display:block;line-height:1;padding:0 12px}.c-message--active .c-message-item{opacity:1;transform:translateY(0)}.c-message-item{font-size:12px;min-height:16px;opacity:0;transform:translateY(-4px);transition:all 0.2s cubic-bezier(0.25, 0.8, 0.5, 1)}.c-message-item--hint{color:var(--_c-message-hint-color)}.c-message-item--error{color:var(--_c-message-error-color)}.c-message-item span{align-items:flex-start;color:currentColor;display:flex;gap:4px;min-height:16px}.c-message-item svg{fill:currentColor;height:16px;width:16px;position:relative;top:-2px}.c-message .visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}";

const CMessage = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this._validationIcon = (index.h("svg", { height: "16px", width: "16px", viewBox: "0 0 24 24" }, index.h("path", { d: mdi.mdiCloseCircle })));
    this.hint = '';
    this.inputId = undefined;
    this.valid = true;
    this.validation = 'Required field';
    this.messageOptions = {
      show: true,
      type: 'hint',
      content: '',
    };
  }
  onValidChange(valid) {
    this._handleValidation(valid);
  }
  onValidationMessageChange(message) {
    if (this.valid || !message)
      return;
    this.messageOptions = Object.assign(Object.assign({}, this.messageOptions), { content: (index.h("span", null, index.h("span", { class: "visuallyhidden" }, "Error: "), this._validationIcon, " ", message)) });
  }
  onHintMessageChange(message) {
    if (!this.valid || !message)
      return;
    this.messageOptions = Object.assign(Object.assign({}, this.messageOptions), { content: (index.h("span", null, index.h("span", { class: "visuallyhidden" }, "Hint: "), message)) });
  }
  _handleValidation(valid, timeout = 200) {
    this.messageOptions = Object.assign(Object.assign({}, this.messageOptions), { show: false });
    setTimeout(() => {
      this.messageOptions = Object.assign(Object.assign({}, this.messageOptions), { type: valid ? 'hint' : 'error', show: true, content: valid ? (index.h("span", { id: `hint-${this.inputId}` }, index.h("span", { class: "visuallyhidden" }, "Hint: "), this.hint)) : (index.h("span", { id: `error-${this.inputId}` }, this._validationIcon, index.h("span", { class: "visuallyhidden" }, "Error: "), this.validation)) });
    }, timeout);
  }
  componentDidLoad() {
    this._handleValidation(this.valid, 0);
  }
  render() {
    const classes = {
      'c-message': true,
      'c-message--active': this.messageOptions.show,
    };
    const messageClasses = {
      'c-message-item': true,
      [`c-message-item--${this.messageOptions.type}`]: true,
    };
    return (index.h(index.Host, null, index.h("div", { class: classes }, index.h("div", { class: messageClasses }, this.messageOptions.content))));
  }
  static get watchers() { return {
    "valid": ["onValidChange"],
    "validation": ["onValidationMessageChange"],
    "hint": ["onHintMessageChange"]
  }; }
};
CMessage.style = cMessageCss;

const cNavigationButtonCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-navigation-button-color:var(\n    --c-navigation-button-color,\n    var(--c-text-system)\n  );display:block;margin-right:0;cursor:pointer;user-select:none;border-radius:50%;--c-icon-button-text-text-color:var(--_c-navigation-button-color)}";

const CNavigationButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return (index.h(index.Host, { tabindex: 0 }, index.h("c-icon-button", { text: true }, index.h("c-icon", { path: mdi.mdiMenu }))));
  }
};
CNavigationButton.style = cNavigationButtonCss;

const cOptionCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{display:block;width:100%;padding:8px 0}";

const COption = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.selected = false;
    this.disabled = false;
    this.name = undefined;
    this.value = undefined;
  }
  render() {
    return (index.h(index.Host, { tabindex: "-1" }, index.h("slot", null)));
  }
};
COption.style = cOptionCss;

const cOtpInputCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-otp-input-border-color:var(--c-otp-input-border-color, var(--c-tertiary-500));--_c-otp-input-border-color-active:var(--c-otp-input-border-color-active, var(--c-primary-600));--_c-otp-input-height:var(--c-otp-input-height, 56px);--_c-otp-input-width:var(--c-otp-input-width, 42px);--_c-otp-input-font-size:var(--c-otp-input-font-size, 24px);--_c-otp-input-text-color:var(--c-otp-input-text-color, var(--c-text-body));--_c-otp-input-border-width:1px;display:block}:host(.error){--_c-otp-input-border-color:var(--c-error-600);--_c-otp-input-border-color-active:var(--c-error-600)}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.c-otp-input{backface-visibility:hidden;display:inline-grid;gap:8px;grid-auto-columns:minmax(auto, var(--_c-otp-input-width));grid-auto-flow:column;margin-bottom:8px;transform:translate3d(0, 0, 0)}.c-otp-input--hide-details{margin-bottom:0}.c-otp-input input{border-radius:4px;border:none;box-shadow:inset 0 0 0 var(--_c-otp-input-border-width) var(--_c-otp-input-border-color);color:var(--_c-otp-input-text-color);font-size:var(--_c-otp-input-font-size);height:var(--_c-otp-input-height);max-width:var(--_c-otp-input-width);min-width:24px;text-align:center;width:100%}.c-otp-input input:focus{--_c-otp-input-border-width:2px;--_c-otp-input-border-color:var(--_c-otp-input-border-color-active);outline:none}.c-otp-input c-message{grid-column:1/span var(--_c-otp-input-count);grid-row:2}";

const COtpInput = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    this.completion = index.createEvent(this, "completion", 3);
    if (hostRef.$hostElement$["s-ei"]) {
      this.internals = hostRef.$hostElement$["s-ei"];
    }
    else {
      this.internals = hostRef.$hostElement$.attachInternals();
      hostRef.$hostElement$["s-ei"] = this.internals;
    }
    this._backSpacePressed = false;
    this._debounce = null;
    this._isPasting = false;
    this._inputs = new Array(this.length).fill(null);
    this.hideDetails = false;
    this.hint = '';
    this.elementId = undefined;
    this.length = 6;
    this.valid = true;
    this.validation = 'Required field';
    this.value = undefined;
    this.statusText = '';
  }
  async reset() {
    this.value = '';
    this._handleValueChange(this.value, true);
    this.internals.setFormValue(this.value);
  }
  onValidationMessageChange() {
    this._updateStatusText();
  }
  onValueChange(value) {
    this._handleValueChange(value);
    this._updateStatusText();
  }
  _emitValue() {
    requestAnimationFrame(() => {
      this.value = [...this._inputs].map((input) => input.value).join('');
      const isFullyFilled = this.value.length === this.length;
      this.changeValue.emit(isFullyFilled ? this.value : null);
      if (isFullyFilled) {
        this.completion.emit(this.value || null);
      }
      this.internals.setFormValue(this.value);
      this._updateStatusText();
    });
  }
  _getElements(event) {
    const target = event.target;
    const nextElement = target.nextElementSibling;
    const previousElement = target.previousElementSibling;
    return { target, nextElement, previousElement };
  }
  _onFocus(index) {
    this._inputs[index].select();
  }
  _onKeyDown(event) {
    this._backSpacePressed = false;
    const { target, previousElement } = this._getElements(event);
    if (event.key === 'Backspace') {
      this._backSpacePressed = true;
      if (previousElement && !target.value) {
        previousElement.focus();
      }
      this._emitValue();
    }
  }
  get id() {
    return this.elementId || `c-otp-input--${COtpInput._uniqueId}`;
  }
  _onInput(event) {
    const { target, nextElement, previousElement } = this._getElements(event);
    if (isNaN(+target.value)) {
      event.preventDefault();
      target.value = null;
      return;
    }
    if (this._isPasting) {
      this._isPasting = false;
      return;
    }
    if (this._backSpacePressed) {
      return;
    }
    if (event.data) {
      nextElement === null || nextElement === void 0 ? void 0 : nextElement.focus();
    }
    else {
      previousElement === null || previousElement === void 0 ? void 0 : previousElement.focus();
    }
    this._emitValue();
  }
  _onPaste(event) {
    event.preventDefault();
    const pasteData = event.clipboardData.getData('text');
    if (isNaN(+pasteData)) {
      return;
    }
    this._isPasting = true;
    for (const [index, value] of pasteData.split('').entries()) {
      if (index >= this._inputs.length) {
        continue;
      }
      this._inputs[index].value = null;
      this._inputs[index].value = value;
    }
    const nextElementIndex = Math.min(this.length, pasteData.length) - 1;
    requestAnimationFrame(() => {
      this._inputs[nextElementIndex].focus();
      this._emitValue();
    });
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      const value = [...this._inputs].map((input) => input.value).join('');
      this.statusText = this.valid ? '' : `Error: ${this.validation} `;
      this.statusText += `Currently entered - ${!value.length ? 'nothing' : value.split('').join(' - ')}`;
      this.statusText = this.statusText.trim();
      this._debounce = null;
    }, 1400);
  }
  _handleValueChange(value, forceEmpty = false) {
    if (!value && !forceEmpty)
      return;
    const digits = value.split('');
    this._inputs.map((input, index) => (input.value = digits[index] || ''));
    this.internals.setFormValue(value);
  }
  _renderInput(index$1) {
    return (index.h("input", { id: `${this.id}--input-${index$1 + 1}`, ref: (el) => (this._inputs[index$1] = el), "aria-label": `Enter code - digit number - ${index$1 + 1} of ${this.length}`, type: "tel", maxlength: "1", onFocus: () => this._onFocus(index$1), onInput: (event) => this._onInput(event), onKeyDown: (event) => this._onKeyDown(event), onPaste: (event) => index$1 === 0 && this._onPaste(event) }));
  }
  componentWillLoad() {
    COtpInput._uniqueId += 1;
  }
  componentDidLoad() {
    this._handleValueChange(this.value);
    this.internals.setFormValue(this.value);
  }
  render() {
    const classes = {
      'c-otp-input': true,
      'c-otp-input--hide-details': this.hideDetails,
    };
    return (index.h(index.Host, { id: this.id, style: { '--_c-otp-input-count': this.length.toString() }, class: { error: !this.valid } }, index.h("div", { id: 'announce-' + this.id, class: "visuallyhidden", "aria-live": "polite", "aria-atomic": "true" }, this.statusText), index.h("div", { class: classes }, new Array(this.length)
      .fill(0)
      .map((_, index) => this._renderInput(index)), index.h("c-message", { hint: this.hint, inputId: this.elementId, valid: this.valid, validation: this.validation }))));
  }
  static get formAssociated() { return true; }
  static get watchers() { return {
    "validation": ["onValidationMessageChange"],
    "value": ["onValueChange"]
  }; }
};
COtpInput._uniqueId = 0;
COtpInput.style = cOtpInputCss;

const cPageCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-page){--_c-page-max-width:var(--c-page-max-width, 1280px);--_c-page-justify-content:var(--c-page-justify-content, start);display:grid;height:calc(100lvh - 60px);grid-template-rows:1fr auto;grid-template-columns:1fr;width:100%;overflow-y:auto;scroll-behavior:smooth;position:relative;place-items:start var(--_c-page-justify-content)}:host(c-page) .scroll-indicator{z-index:9;height:4px;background-color:var(--c-primary-600);position:fixed;top:0;left:0;width:0%}:host(c-page) .c-page__container{padding:0.5rem;position:relative;width:100%;height:100%;max-width:var(--_c-page-max-width)}@media (min-width: 640px){:host(c-page) .c-page__container{padding:0.75rem}}@media (min-width: 768px){:host(c-page) .c-page__container{padding:1rem}}";

const CPage = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.scrollIndicator = false;
  }
  _onScroll() {
    if (!this.scrollIndicator)
      return;
    const scrollTop = this.el.scrollTop;
    const height = this.el.scrollHeight - this.el.clientHeight;
    const scrolled = (scrollTop / height) * 100;
    this._scrollIndicator.style.width = scrolled + '%';
  }
  componentDidLoad() {
    this.el.onscroll = this._onScroll.bind(this);
  }
  render() {
    return (index.h(index.Host, null, this.scrollIndicator && (index.h("div", { ref: (el) => (this._scrollIndicator = el), class: "scroll-indicator" })), index.h("div", { class: "c-page__container" }, index.h("slot", null)), index.h("slot", { name: "footer" })));
  }
  get el() { return index.getElement(this); }
};
CPage.style = cPageCss;

const cRadioCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{display:block}";

const CRadio = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.checked = false;
    this.disabled = false;
    this.value = undefined;
  }
  render() {
    return index.h(index.Host, null);
  }
};
CRadio.style = cRadioCss;

const cRadioGroupCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-radio-group-background-color-hover:var(--c-radio-group-background-color-hover, rgba(var(--c-primary-rgb), 0.1));--_c-radio-group-color:var(--c-radio-group-color, var(--c-primary-600));--_c-radio-group-color-active:var(--c-radio-group-color-active, var(--_c-radio-group-color));--_c-radio-group-color-disabled:var(--c-radio-group-color-disabled, var(--c-tertiary-500));display:flex;flex-direction:column;gap:4px;width:fit-content}.c-radio-group{--_c-radio-group-error-color:var(--c-error-600);--_c-radio-flex-direction:column;--_c-radio-item-gap:2px}.c-radio-group__items{display:flex;flex-flow:var(--_c-radio-flex-direction) wrap;gap:var(--_c-radio-item-gap)}.c-radio-group__label span.required{color:var(--_c-radio-group-error-color)}.c-radio-group--disabled{--_c-radio-group-color:var(--_c-radio-group-color-disabled);--_c-radio-group-error-color:var(--_c-radio-group-color-disabled);color:var(--_c-radio-group-color-disabled);cursor:default;opacity:0.75}.c-radio-group--error{--_c-radio-group-color:var(--_c-radio-group-error-color);--_c-radio-group-color-active:var(--_c-radio-group-error-color);color:var(--_c-radio-group-error-color)}.c-radio-group--inline{--_c-radio-flex-direction:row;--_c-radio-item-gap:12px}.c-radio{align-items:flex-start;display:flex;position:relative;cursor:pointer;font-size:16px;user-select:none;gap:4px;line-height:1.2}.c-radio input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.c-radio input:checked~.ripple .selection::after{display:block;transform:scale(1)}.c-radio .ripple{position:relative;height:42px;width:42px;min-width:42px;border-radius:50%;overflow:hidden;transition:translateZ(0);color:var(--_c-radio-group-color)}.c-radio .selection{position:absolute;top:11px;left:11px;height:20px;width:20px;background-color:transparent;box-shadow:inset 0 0 0 2px var(--_c-radio-group-color);border-radius:50%;transition:box-shadow 0.15s ease-in-out}.c-radio .selection::after{content:\"\";position:absolute;transform:scale(0);transition:transform 0.15s ease-in-out;top:5px;left:5px;width:10px;height:10px;border-radius:50%;background:var(--_c-radio-group-color-active)}.c-radio__label{padding-top:12px}.c-radio--disabled{--_c-radio-group-color:var(--_c-radio-group-color-disabled);--_c-radio-group-color-active:var(--_c-radio-group-color-disabled);color:var(--_c-radio-group-color);cursor:default;opacity:0.75}.c-radio--error{--_c-radio-group-color:var(--_c-radio-group-error-color);color:var(--_c-radio-group-error-color)}.c-radio--error span,.c-radio--error svg{fill:var(--_c-radio-group-error-color);color:var(--_c-radio-group-error-color)}.c-radio input:focus{outline:none}.c-radio input:focus+.ripple{outline:2px var(--_c-radio-group-color-active) solid}@supports selector(:focus-visible){.c-radio input:focus+.ripple{outline:none}}.c-radio input:focus-visible+.ripple{outline:2px var(--_c-radio-group-color) solid}.c-radio:not(.c-radio--disabled) .ripple:hover{background-color:var(--_c-radio-group-background-color-hover)}";

const CRadioGroup = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    if (hostRef.$hostElement$["s-ei"]) {
      this.internals = hostRef.$hostElement$["s-ei"];
    }
    else {
      this.internals = hostRef.$hostElement$.attachInternals();
      hostRef.$hostElement$["s-ei"] = this.internals;
    }
    this._containers = [];
    this._rippleElements = [];
    this._handleSlotChange = () => {
      this._getRadioButtons();
    };
    this._getRadioButtons = () => {
      const radios = this.el.querySelectorAll('c-radio');
      if (radios.length) {
        this.returnObject = false;
        this.items = [
          ...Array.from(radios).map((radio) => {
            if (!!radio.checked) {
              this.value = radio.value;
              this.changeValue.emit(this.value);
            }
            radio.style.display = 'none';
            return {
              name: radio.textContent,
              value: radio.value,
              disabled: !!radio.disabled,
            };
          }),
        ];
      }
    };
    this._getRadioButton = (item, index$1) => {
      var _a, _b, _c;
      const itemId = item.value.toString().replace(/[^a-zA-Z0-9-_]/g, '');
      const isChecked = !this.returnObject
        ? ((_b = (_a = this.items) === null || _a === void 0 ? void 0 : _a.find((i) => i.value === item.value)) === null || _b === void 0 ? void 0 : _b.value) === this.value
        : ((_c = this.value) === null || _c === void 0 ? void 0 : _c.value) === item.value;
      const classes = {
        'c-radio': true,
        'c-radio--disabled': !!item.disabled || this.disabled,
        'c-radio--error': !this.valid,
      };
      return (index.h("label", { class: classes, id: itemId, onKeyDown: (event) => this._handleKeyDown(event, item, index$1) }, index.h("input", { type: "radio", "aria-checked": (this.value === item).toString(), "aria-disabled": (!!item.disabled || this.disabled).toString(), "aria-labelledby": itemId, disabled: !!item.disabled || this.disabled, checked: isChecked, name: CRadioGroup._uniqueId.toString(), onChange: (event) => this._select(event, item, index$1) }), index.h("span", { class: "ripple", ref: (el) => (this._containers[index$1] = el) }, index.h("span", { class: "selection" }), index.h("c-ripple", { ref: (el) => (this._rippleElements[index$1] = el) })), index.h("div", { class: "c-radio__label" }, item.name)));
    };
    this.value = undefined;
    this.hideDetails = false;
    this.hint = '';
    this.inline = false;
    this.label = undefined;
    this.color = '';
    this.hostId = undefined;
    this.items = [];
    this.disabled = false;
    this.returnObject = false;
    this.required = false;
    this.valid = true;
    this.validation = 'Required field';
  }
  get _id() {
    return this.hostId || `radio-group_${CRadioGroup._uniqueId}`;
  }
  _handleKeyDown(event, item, index) {
    if (['Space', 'Enter'].includes(event.code)) {
      event.preventDefault();
      this._select(event, item, index);
    }
  }
  _select(event, item, index) {
    if (!!item.disabled || this.disabled)
      return;
    this._rippleElements[index].createRipple(event, this._containers[index], true);
    this.value = !this.returnObject ? item === null || item === void 0 ? void 0 : item.value : item;
    this.changeValue.emit(this.value);
    const value = !this.returnObject
      ? this.value
      : this.value.value;
    this.internals.setFormValue(value);
  }
  componentWillLoad() {
    CRadioGroup._uniqueId += 1;
    const radios = this.el.querySelectorAll('c-radio');
    const checkedRadio = Array.from(radios).find((item) => item.checked);
    if (checkedRadio) {
      const value = checkedRadio.value;
      this.internals.setFormValue(value);
    }
    else if (this.value) {
      const value = !this.returnObject
        ? this.value
        : this.value.value;
      this.internals.setFormValue(value);
    }
  }
  render() {
    const slotHasContent = !!this.el.childNodes.length;
    const wrapperClasses = {
      'c-radio-group': true,
      'c-radio-group--disabled': this.disabled,
      'c-radio-group--inline': this.inline,
      'c-radio-group--error': !this.valid,
    };
    return (index.h("div", { class: wrapperClasses, role: "radiogroup", "aria-labelledby": "c-radio-group__label" }, (!!this.label || slotHasContent) && (index.h("label", { class: "c-radio-group__label" }, !!this.label && this.label, index.h("slot", { onSlotchange: this._handleSlotChange }), this.required && index.h("span", { class: "required" }, "\u00A0*"))), index.h("div", { class: "c-radio-group__items" }, this.items.map((item, index) => this._getRadioButton(item, index))), !this.hideDetails && (index.h("c-message", { hint: this.hint, inputId: this._id, valid: this.valid, validation: this.validation }))));
  }
  static get formAssociated() { return true; }
  get el() { return index.getElement(this); }
};
CRadioGroup._uniqueId = 0;
CRadioGroup.style = cRadioGroupCss;

const cRippleCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{pointer-events:none;user-select:none;display:block;overflow:hidden;position:absolute;top:0;left:0;border-radius:inherit;z-index:1}.c-ripple{position:absolute;pointer-events:none;border-radius:50%;transform:scale(0);background:currentColor;opacity:0}.c-ripple.animate{animation:ripple 0.5s backwards linear;opacity:0.3}@keyframes ripple{100%{opacity:0;transform:scale(5)}}";

const CRipple = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  async createRipple(event, parent, center = false) {
    this._rippleElement.classList.remove('animate');
    const width = parent.offsetWidth;
    const height = parent.offsetHeight;
    const rect = event.target.getBoundingClientRect();
    const maxDimension = this._calculateHeight(Math.max(parent.offsetWidth, parent.offsetHeight));
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const top = y - maxDimension / 2 + 'px';
    const left = x - maxDimension / 2 + 'px';
    const centerPosition = {
      top: maxDimension === height
        ? '0px'
        : ((maxDimension - height) / 2) * -1 + 'px',
      left: maxDimension === width
        ? '0px'
        : ((maxDimension - width) / 2) * -1 + 'px',
    };
    this.el.style.width = width + 'px';
    this.el.style.height = height + 'px';
    this._rippleElement.style.width = maxDimension + 'px';
    this._rippleElement.style.height = maxDimension + 'px';
    this._rippleElement.style.top = center ? centerPosition.top : top;
    this._rippleElement.style.left = center ? centerPosition.left : left;
    this._rippleElement.classList.add('animate');
    setTimeout(() => {
      this._rippleElement.classList.remove('animate');
    }, 500);
  }
  _calculateHeight(height) {
    const radius = (height / 2) * Math.sqrt(2);
    return radius * 2;
  }
  render() {
    return (index.h(index.Host, { "aria-hidden": "true" }, index.h("div", { ref: (el) => (this._rippleElement = el), class: "c-ripple" })));
  }
  get el() { return index.getElement(this); }
};
CRipple.style = cRippleCss;

const cSelectCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-select-active-color:var(--c-select-active-color, var(--c-primary-600));--_c-select-inactive-color:var(--c-select-inactive-color, var(--c-tertiary-600));--_c-select-background-color:var(--c-select-background-color, var(--c-transparent));--_c-select-text-color:var(--c-select-text-color, var(--c-text-body));--_c-select-placeholder-color:var(--c-select-placeholder-color, var(--c-tertiary-500));--_c-select-option-background-color:var(--c-select-option-background-color, var(--c-white));--_c-select-option-background-color-hover:var(--c-select-option-background-color-hover, var(--c-primary-100));--_c-select-option-text-color:var(--c-select-option-text-color, var(--c-text-body));--_c-select-shadow-active-color:var(--c-select-shadow-active-color, var(--_c-select-active-color));--_c-select-shadow-background-color:var(--c-select-shadow-background-color, var(--c-white));--_c-select-shadow-text-color:var(--c-select-shadow-text-color, var(--_c-select-text-color));--_c-select-shadow-placeholder-color:var(--c-select-shadow-placeholder-color, var(--_c-select-placeholder-color));--_c-input-active-color:var(--_c-select-active-color);--_c-input-inactive-color:var(--_c-select-inactive-color);--_c-input-background-color:var(--_c-select-background-color);--_c-input-text-color:var(--_c-select-text-color);--_c-input-placeholder-color:var(--_c-select-placeholder-color);--_c-input-shadow-active-color:var(--_c-select-shadow-active-color);--_c-input-shadow-background-color:var(--_c-select-shadow-background-color);--_c-input-shadow-text-color:var(--_c-select-shadow-text-color);--_c-input-shadow-placeholder-color:var(--_c-select-shadow-placeholder-color)}:host{display:block;cursor:text}.c-input-menu__chevron{fill:currentColor;transform:rotate(0deg);transition:transform 0.3s ease-in-out}.c-input-menu__chevron--active{transform:rotate(180deg)}.c-input-menu__input{width:100%;display:flex;justify-items:stretch}.c-input-menu__selection{display:none;pointer-events:none}.c-input-menu__selection--show{align-items:center;display:flex;width:100%;color:var(--_c-select-active-color)}.c-input-menu__item-wrapper{position:absolute;width:100%;top:44px;z-index:10;margin-left:calc(var(--_c-input-label-position) * -1)}.c-input-menu__item-wrapper--shadow{top:47px}.c-input-menu__items{position:absolute;background-color:var(--_c-select-option-background-color);min-width:calc(100% + 24px);box-shadow:0 8px 16px 0 rgba(0, 0, 0, 0.2);z-index:10;user-select:none;border-radius:4px;margin:0 -12px;overflow-y:scroll;list-style:none;padding:0}.c-input-menu__items--hidden{display:none}.c-input-menu__items li{cursor:pointer;display:flex;min-height:48px;padding:0 12px;transition:background-color 0.3s;font-size:14px;align-items:center;justify-content:flex-start;color:var(--_c-select-option-text-color)}.c-input-menu__items li.disabled{background-color:var(--c-tertiary-100);filter:grayscale(1) opacity(0.6);cursor:default}.c-input-menu__items li.disabled:hover{background-color:var(--c-tertiary-100)}.c-input-menu__items li.dense{padding:10px 14px}.c-input-menu__items li:hover{background-color:var(--_c-select-option-background-color-hover)}.c-input-menu__items li[aria-selected=true]{background-color:var(--_c-select-option-background-color-hover);box-shadow:inset 0 0 0 1px var(--_c-select-active-color);border-radius:4px;backface-visibility:hidden;transform:translate3d(0, 0, 0)}.c-input-menu__items li.none{color:rgba(0, 0, 0, 0.5)}.c-input-menu__items--empty li{color:var(--c-text-system);cursor:default;gap:8px;pointer-events:none}.c-input-menu__items--empty li svg{fill:var(--c-warning-600);height:18px;width:18px}input{max-height:32px;padding:8px 0;background-color:transparent;border:none;color:var(--c-text-body);flex:1 1 auto;font-family:var(--c-font-family);font-size:16px;line-height:20px;max-width:100%;min-width:0;width:100%;pointer-events:none}input:focus,input:active{outline:none}input::-ms-reveal{display:none}svg{fill:currentColor;height:22px;width:22px}.c-input--disabled{color:var(--c-tertiary-400)}.c-input:focus-within{color:var(--c-primary-600)}.c-input--error{color:var(--c-error-600)}.c-input--error:focus-within{color:var(--c-error-600)}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}";

const CSelect = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    if (hostRef.$hostElement$["s-ei"]) {
      this.internals = hostRef.$hostElement$["s-ei"];
    }
    else {
      this.internals = hostRef.$hostElement$.attachInternals();
      hostRef.$hostElement$["s-ei"] = this.internals;
    }
    this._preventDialogOpen = false;
    this._debounce = null;
    this._lastKeyPressTime = null;
    this._searchString = '';
    this._toggleDropdown = (event) => {
      event.stopPropagation();
      if (this.dropdownVisible) {
        this._dropdownElement.close();
        return;
      }
      this._dropdownElement.open();
    };
    this._onButtonKeyDown = (src, event) => {
      event.stopPropagation();
      if (event.key !== 'Tab')
        event.preventDefault();
      if (['Enter', ' '].includes(event.key)) {
        if (src === 'chevron') {
          this._toggleDropdown(event);
          return;
        }
        this._onReset(event);
        this._preventDialogOpen = true;
        requestAnimationFrame(() => {
          this._inputElement.focus();
        });
      }
    };
    this._onSlotChange = () => {
      this.optionElements = this.el.querySelectorAll('c-option');
      if (this.optionElements.length && !this.optionElementsExist) {
        this.optionElementsExist = true;
      }
      const selection = Array.from(this.optionElements).find((option) => option.selected);
      if (selection) {
        this.value = this.returnObject
          ? { name: selection.name, value: selection.value }
          : selection.value;
        this.changeValue.emit(this.value);
        this.internals.setFormValue(selection.value.toString());
      }
    };
    this._onReset = (event) => {
      event.stopPropagation();
      this.changeValue.emit(null);
      this.internals.setFormValue(null);
      this._selectionElement.classList.remove('c-input-menu__selection--show');
      this._selectionElement.replaceChildren(null);
      this._preventDialogOpen = true;
      this._cInputElement.reset();
      this._inputElement.focus();
      this._dropdownElement.updateList();
    };
    this._onInputFocus = () => {
      if (this.disabled)
        return;
      if (!this._preventDialogOpen) {
        this._dropdownElement.open();
      }
      this._updateStatusText();
      this._preventDialogOpen = false;
    };
    this.items = [];
    this.value = null;
    this.hostId = undefined;
    this.clearable = false;
    this.disabled = false;
    this.label = undefined;
    this.name = undefined;
    this.placeholder = '';
    this.hideDetails = false;
    this.hint = '';
    this.loading = false;
    this.required = false;
    this.valid = true;
    this.validate = false;
    this.validateOnBlur = false;
    this.validation = 'Required field';
    this.shadow = false;
    this.returnObject = false;
    this.itemsPerPage = 6;
    this.optionAsSelection = undefined;
    this.optionElements = undefined;
    this.currentIndex = null;
    this.dropdownVisible = false;
    this.statusText = '';
    this.optionElementsExist = false;
  }
  get _id() {
    return this.hostId || `select_${CSelect._uniqueId}`;
  }
  get _items() {
    return this.optionElementsExist ? this.optionElements : this.items;
  }
  get _value() {
    var _a, _b, _c, _d;
    if (!this.value)
      return '';
    if (!this.returnObject &&
      !['number', 'string'].includes(typeof this.value)) {
      console.warn(`[C-SELECT] The value should be of type 'number' or 'string' when return-object is not used.`);
      return '';
    }
    if (!this.returnObject &&
      ['number', 'string'].includes(typeof this.value)) {
      return (_b = (_a = Array.from(this._items)) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === this.value)) === null || _b === void 0 ? void 0 : _b.name;
    }
    return (_d = (_c = Array.from(this._items)) === null || _c === void 0 ? void 0 : _c.find((item) => item.value === this.value.value)) === null || _d === void 0 ? void 0 : _d.name;
  }
  async reset() {
    this.changeValue.emit(null);
    this.internals.setFormValue(null);
    this._dropdownElement.updateList();
  }
  handleKeyDown(event) {
    const alphanumeric = /^[0-9a-zA-Z ]+$/;
    if (this.disabled)
      return;
    if (event.key.match(alphanumeric) && event.key.length === 1) {
      if (this.dropdownVisible)
        return;
      if (Date.now() - this._lastKeyPressTime > 3000) {
        this._searchString = event.key;
      }
      else {
        this._searchString += event.key;
      }
      this._lastKeyPressTime = Date.now();
      const selectionIndex = Array.from(this._items).findIndex((i) => i.name.toLowerCase().startsWith(this._searchString));
      this.currentIndex = selectionIndex >= 0 ? selectionIndex : null;
      if (this.currentIndex !== null) {
        this._dropdownElement.selectItem(this.currentIndex);
      }
      return;
    }
    if (event.key === 'Escape') {
      this._preventDialogOpen = true;
      this._dropdownElement.close();
      this._inputElement.focus();
      return;
    }
    if (event.key === 'Tab') {
      this._dropdownElement.close();
    }
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      if (!this._items.length)
        return;
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
      }
      this.currentIndex =
        this.currentIndex === null
          ? 0
          : Math.min(this.currentIndex + 1, this._items.length - 1);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === 'ArrowUp') {
      event.preventDefault();
      if (this.currentIndex === 0) {
        this._dropdownElement.close();
        this._inputElement.focus();
      }
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
      }
      this.currentIndex =
        this.currentIndex === null
          ? this._items.length - 1
          : Math.max(this.currentIndex - 1, 0);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === ' ') {
      event.preventDefault();
    }
    if (event.key === 'Enter') {
      event.preventDefault();
      if (this.currentIndex === null)
        return;
      this._dropdownElement.selectItem(this.currentIndex);
    }
    if (event.key === 'Home' && this.dropdownVisible) {
      this.currentIndex = 0;
    }
    if (event.key === 'End' && this.dropdownVisible) {
      this.currentIndex = this._items.length - 1;
    }
  }
  onDropdownStateChange(event) {
    const isOpen = event.detail;
    this.dropdownVisible = isOpen;
  }
  onSelectOption(event) {
    this._dropdownElement.close();
    const { name, value } = event.detail;
    const selection = this._setCurrentIndex({ name, value });
    if (this.optionElementsExist && this.optionAsSelection && selection) {
      const clone = selection.cloneNode(true);
      this._selectionElement.classList.add('c-input-menu__selection--show');
      this._selectionElement.replaceChildren(clone);
    }
    this._dropdownElement.updateList();
    this.value = this.returnObject ? event.detail : value;
    this.changeValue.emit(this.value);
    this.internals.setFormValue(value);
    this._preventDialogOpen = true;
    this._inputElement.focus();
  }
  _setCurrentIndex({ value, name }) {
    let selection = null;
    Array.from(this._items).forEach((item, index) => {
      const selected = item.value === value && item.name === name;
      if (this.optionElementsExist) {
        item.selected = selected;
      }
      if (selected) {
        this.currentIndex = index;
        selection = item;
      }
    });
    return selection;
  }
  _updateInput() {
    this._dropdownElement.open();
    this._dropdownElement.updateList();
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      this.statusText = '';
      if (this.currentIndex === null) {
        this.statusText = this._items.length
          ? `${this._items.length} option${this._items.length !== 1 ? 's' : ''} available`
          : 'No options available';
      }
      const ending = !!this._items.length
        ? ', navigate using the up and down arrows'
        : '';
      this._dropdownElement.setStatusText(this.statusText + ending);
      this._debounce = null;
    }, 1400);
  }
  componentWillLoad() {
    CSelect._uniqueId += 1;
    this._inputId =
      'input_' +
        (this.hostId || this.label || this.placeholder).replace(/[^a-zA-Z0-9-_]/g, '');
  }
  componentDidLoad() {
    if (!this.value)
      return;
    const selection = Array.from(this._items).find((item) => {
      if (this.returnObject) {
        return (item.name === this.value.name &&
          item.value === this.value.value);
      }
      return item.value === this.value;
    });
    this._setCurrentIndex({
      name: selection.name,
      value: selection.value.toString(),
    });
  }
  _renderLoader() {
    return index.h("c-spinner", { color: "var(--_c-autocomplete-active-color)", size: 20 });
  }
  _renderChevron() {
    const classes = {
      'c-input-menu__chevron': true,
      'c-input-menu__chevron--active': this.dropdownVisible,
    };
    return (index.h("c-icon-button", { size: "x-small", class: classes, disabled: this.disabled, text: true, onClick: (event) => this._toggleDropdown(event), onKeyDown: (event) => this._onButtonKeyDown('chevron', event) }, index.h("c-icon", { path: mdi.mdiChevronDown, size: 24 })));
  }
  _renderInputElement() {
    var _a;
    return (index.h("div", { class: "c-input-menu__input" }, index.h("input", { type: "text", readonly: true, ref: (el) => (this._inputElement = el), "aria-expanded": this.dropdownVisible.toString(), "aria-owns": this._inputId + '-items', "aria-autocomplete": "list", autocomplete: "off", class: "c-input__input", role: "combobox", value: this._value, name: (_a = this.name) !== null && _a !== void 0 ? _a : null, disabled: this.disabled, onInput: () => this._updateInput(), onFocus: () => this._onInputFocus() }), index.h("div", { ref: (el) => (this._selectionElement = el), class: "c-input-menu__selection" })));
  }
  _renderReset() {
    return (index.h("c-icon-button", { "aria-label": "", size: "x-small", disabled: this.disabled, text: true, onClick: (event) => this._onReset(event), onKeyDown: (event) => this._onButtonKeyDown('reset', event) }, index.h("c-icon", { path: mdi.mdiClose, size: 20 })));
  }
  render() {
    const itemType = this.optionElementsExist ? 'option' : 'item';
    return (index.h(index.Host, null, index.h("c-dropdown", { ref: (el) => (this._dropdownElement = el), id: `${this._id}-dropdown`, index: this.currentIndex, "items-per-page": this.itemsPerPage, "item-type": itemType, items: this._items, parent: this.el, type: "select" }, index.h("c-input", { slot: "default", ref: (el) => (this._cInputElement = el), active: this.dropdownVisible, disabled: this.disabled, "hide-details": this.hideDetails, hint: this.hint, id: this.hostId, "input-id": this._inputId, label: this.label, name: this.name, placeholder: this.placeholder, required: this.required, shadow: this.shadow, valid: this.valid, validate: this.validate, "validate-on-blur": this.validateOnBlur, validation: this.validation, value: this.value, variant: "select", onClick: () => !this.disabled && this._dropdownElement.open() }, index.h("slot", { name: "pre", slot: "pre" }), index.h("div", { class: "c-input__content" }, this._renderInputElement(), this.loading && this._renderLoader(), !this.loading &&
      this.value &&
      this.clearable &&
      this._renderReset(), !this.loading &&
      (!this.value || !this.clearable) &&
      this._renderChevron(), index.h("slot", { onSlotchange: () => this._onSlotChange() })), index.h("slot", { name: "post", slot: "post" })))));
  }
  static get formAssociated() { return true; }
  get el() { return index.getElement(this); }
};
CSelect._uniqueId = 0;
CSelect.style = cSelectCss;

const cSideNavigationCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-side-navigation-background-color:var(\n    --c-side-navigation-background-color,\n    var(--c-primary-600)\n  );--_c-side-navigation-overlay-color:var(\n    --c-side-navigation-overlay-color,\n    rgba(var(--c-black), 0.5)\n  )}:host(.autoheight){height:calc(100vh - 60px);overflow-y:auto;overflow-x:hidden}:host(.desktop){background-color:var(--_c-side-navigation-background-color);display:flex;min-width:clamp(300px, 20vw, 340px)}.c-side-navigation{background-color:var(--_c-side-navigation-background-color);display:flex;flex-flow:column nowrap;flex:1;gap:4px;min-height:fit-content;padding:24px 0 24px 24px;position:relative;transition:transform 0.3s ease;width:100%;z-index:8}.c-side-navigation__content{display:flex;flex-direction:column;flex:1 2 260px;width:320px}.c-side-navigation__content--mobile{height:100vh;max-width:320px;overflow-y:scroll;position:fixed;right:0;top:0;transition:transform 0.2s cubic-bezier(0.25, 0.8, 0.5, 1);transform:translateX(0%);z-index:999}.c-side-navigation__content--mobile.c-side-navigation__content--hidden{transform:translateX(100%)}.c-side-navigation__content--mobile>nav{min-height:auto;padding-top:0}.c-side-navigation__burger{background-color:var(--_c-side-navigation-background-color);display:flex;justify-content:flex-end;padding:8px 16px}.c-side-navigation ul{display:flex;flex-flow:column nowrap;gap:8px;list-style:none;margin:0;padding:0}.autoheight>nav{height:calc(100vh - 60px);overflow-x:hidden;overflow-y:auto}.vertical-spacer{flex:1;margin-bottom:8px}.c-overlay{background:var(--_c-side-navigation-overlay-color);backdrop-filter:blur(4px);inset:0;position:fixed;z-index:998}@keyframes fade-in{0%{opacity:0}100%{opacity:1}}.c-fade-in{animation-duration:0.5s;animation-iteration-count:1;animation-name:fade-in;z-index:997}c-side-navigation-item,c-sub-navigation-item{display:contents}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}";

const CSideNavigation = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.mobile = undefined;
    this.menuVisible = false;
  }
  handleChange(event) {
    const slotted = this.host.querySelectorAll('c-side-navigation-item');
    const target = event.target;
    const { active } = target;
    slotted.forEach((item) => {
      if (item.querySelector('c-sub-navigation-item[slot="sub-item"]')) {
        item.active = false;
      }
    });
    if (target.querySelector('[slot="sub-item"]')) {
      target.active = !active;
    }
    else {
      target.active = true;
    }
  }
  _assignSubItemSlots() {
    const subItems = this.host.querySelectorAll('c-sub-navigation-item');
    Array.from(subItems).forEach((item) => {
      item.setAttribute('slot', 'sub-item');
    });
  }
  componentWillLoad() {
    this._assignSubItemSlots();
  }
  componentDidLoad() {
    const el = document.querySelector('body');
    ['click', 'keyup'].forEach((eventType) => {
      el.addEventListener(eventType, (e) => {
        if (e.target.matches('c-navigation-button')) {
          if (eventType === 'click') {
            this.menuVisible = !this.menuVisible;
          }
          else if (e instanceof KeyboardEvent && e.key === 'Enter') {
            this.menuVisible = !this.menuVisible;
          }
        }
      });
    });
  }
  _closeMenu() {
    this.menuVisible = false;
  }
  render() {
    const classes = {
      'c-side-navigation': true,
      'hide-menu': !this.menuVisible,
      mobile: !!this.mobile,
      desktop: !this.mobile,
    };
    const containerClasses = {
      'c-side-navigation__content': true,
      'c-side-navigation__content--hidden': !this.menuVisible,
      'c-side-navigation__content--mobile': !!this.mobile,
      'c-side-navigation__content--desktop': !this.mobile,
    };
    return (index.h(index.Host, { class: { desktop: !this.mobile } }, index.h("div", { class: containerClasses }, this.mobile && (index.h("div", { class: "c-side-navigation__burger" }, index.h("c-icon-button", { inverted: true, text: true, onClick: () => this._closeMenu() }, index.h("span", { class: "visuallyhidden" }, "Close sidemenu"), index.h("c-icon", { path: mdi.mdiArrowRight })))), index.h("nav", { class: classes, role: "menubar" }, index.h("slot", null), index.h("div", { class: "vertical-spacer" }), index.h("slot", { name: "bottom" }))), this.menuVisible && this.mobile && (index.h("div", { class: "c-overlay c-fade-in", onClick: () => this._closeMenu() }))));
  }
  get host() { return index.getElement(this); }
};
CSideNavigation.style = cSideNavigationCss;

const cSideNavigationItemCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-side-navigation-item){--_c-side-navigation-item-background-color-active:var(--c-side-navigation-item-background-color-active, var(--c-primary-200));--_c-side-navigation-item-background-color-hover:var(--c-side-navigation-item-background-color-hover, var(--c-primary-500));--_c-side-navigation-item-background-color:var(--c-side-navigation-item-background-color, var(--c-transparent));--_c-side-navigation-item-outline-color:var(--c-side-navigation-item-outline-color, var(--c-white));--_c-side-navigation-item-text-color-active:var(--c-side-navigation-item-text-color-active, var(--c-primary-600));--_c-side-navigation-item-text-color:var(--c-side-navigation-item-text-color, var(--c-white));--_c-side-navigation-item-sub-item-background-color-active:var(--c-side-navigation-item-sub-item-background-color-active, var(--c-white));--_c-side-navigation-item-sub-item-background-color-hover:var(--c-side-navigation-item-sub-item-background-color-hover, var(--c-primary-100));--_c-side-navigation-item-sub-item-background-color:var(--c-side-navigation-item-sub-item-background-color, var(--c-white));--_c-side-navigation-item-sub-item-outline-color:var(--c-side-navigation-item-sub-item-outline-color, var(--c-primary-600));--_c-side-navigation-item-sub-item-text-color-active:var(--c-side-navigation-item-sub-item-text-color-active, var(--c-primary-600));--_c-side-navigation-item-sub-item-text-color:var(--c-side-navigation-item-sub-item-text-color, var(--c-primary-600))}:host(.c-side-navigation-item){align-items:center;backface-visibility:hidden;border-radius:4px 0 0 4px;background-color:var(--_c-side-navigation-item-background-color);color:var(--_c-side-navigation-item-text-color);cursor:pointer;display:grid;grid-template-columns:1fr;font-weight:400;overflow:hidden;position:relative;transform:translate3d(0, 0, 0);user-select:none}:host(.c-side-navigation-item:hover){background-color:var(--_c-side-navigation-item-background-color-hover)}:host(.c-side-navigation-item:focus){outline:none}:host(.c-side-navigation-item:focus-visible){outline:2px var(--_c-side-navigation-item-outline-color) solid;outline-offset:2px}:host(.c-side-navigation-item.active){background-color:var(--_c-side-navigation-item-background-color-active);color:var(--_c-side-navigation-item-text-color-active)}:host(.c-side-navigation-item.active) .svg{fill:var(--_c-side-navigation-item-text-color-active);transform:rotate(90deg)}:host(.c-side-navigation-item.active) .c-side-navigation-item__header{color:var(--_c-side-navigation-item-text-color-active)}.c-side-navigation-item__header{align-items:center;color:var(--_c-side-navigation-item-text-color);display:grid;gap:8px;grid-template-columns:1fr;min-height:46px;padding:8px 12px}.c-side-navigation-item__header--expandable{grid-template-columns:auto 1fr}.c-side-navigation-item__slot{align-items:center;display:flex;gap:8px;line-height:normal;max-width:100%}:host(.c-side-navigation-item--parent.active){padding-bottom:4px}::slotted(span),::slotted(c-icon){font-size:20px}.styleMain{padding-left:16px}.sub-item{height:0;overflow-y:hidden;transition:all 500ms ease;width:100%}.subnavactive{height:max-content;width:100%}.svg{align-self:center;fill:var(--_c-side-navigation-item-text-color);transition:transform 0.3s ease}:host>div.active .svg{fill:var(--_c-side-navigation-item-text-color-active);transform:rotate(90deg)}.svg.hidden{opacity:0}.middle{display:flex;height:100%;align-items:center}:host([slot=sub-item]){--_c-side-navigation-item-text-color:var(--c-side-navigation-item-text-color, var(--_c-side-navigation-item-sub-item-text-color));--_c-side-navigation-item-background-color:var(--c-side-navigation-item-background-color, var(--_c-side-navigation-item-sub-item-background-color));--_c-side-navigation-item-background-color-hover:var(--c-side-navigation-item-background-color-hover, var(--_c-side-navigation-item-sub-item-background-color-hover));--_c-side-navigation-item-text-color-active:var(--c-side-navigation-item-text-color-active, var(--_c-side-navigation-item-sub-item-text-color-active));--_c-side-navigation-item-background-color-active:var(--c-side-navigation-item-background-color-active, var(--_c-side-navigation-item-sub-item-background-color-active));--_c-side-navigation-item-outline-color:var(--c-side-navigation-item-outline-color, var(--_c-side-navigation-item-sub-item-outline-color));border-radius:4px;margin:0 8px 4px}";

const CSideNavigationItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.itemChange = index.createEvent(this, "itemChange", 7);
    this._isSubItem = false;
    this._slotHasContent = false;
    this.active = undefined;
    this.href = undefined;
    this.target = null;
    this.loading = false;
  }
  handleChange(event) {
    if (this._isSubItem) {
      event.stopPropagation();
      event.stopImmediatePropagation();
      event.preventDefault();
      this.active = !this.active;
    }
  }
  onActiveChange(active) {
    this._handleChildFocusableChange(active);
  }
  _handleChildFocusableChange(focusable) {
    if (!this._slotHasContent)
      return;
    Array.from(this.hostElement.querySelectorAll('[slot="sub-item"]')).forEach((child) => {
      child.ariaHidden = (!focusable).toString();
      child.focusable = focusable;
    });
  }
  _redirect(event) {
    if ((event instanceof KeyboardEvent && (event === null || event === void 0 ? void 0 : event.key) === 'Enter') ||
      !(event instanceof KeyboardEvent)) {
      if (this._isSubItem) {
        event.stopPropagation();
        event.stopImmediatePropagation();
        event.preventDefault();
      }
      this.itemChange.emit(event);
      if (!this._slotHasContent) {
        const sidenav = document.querySelector('c-side-navigation');
        sidenav.menuVisible = false;
      }
      if (this.href) {
        if (this.target) {
          window.open(this.href, this.target);
        }
        else {
          window.location.href = this.href;
        }
      }
    }
  }
  _assignSubItemSlots() {
    const subItems = this.hostElement.querySelectorAll('c-side-navigation-item');
    Array.from(subItems).forEach((item) => {
      item.setAttribute('slot', 'sub-item');
    });
  }
  componentWillLoad() {
    this._assignSubItemSlots();
    this._slotHasContent =
      !!this.hostElement.querySelector('[slot="sub-item"]');
    this._isSubItem = !!this.hostElement.getAttribute('slot');
    this._handleChildFocusableChange(this.active);
  }
  componentDidLoad() {
    for (const node of this.hostElement.childNodes) {
      if (node.nodeName === '#text') {
        this._ariaLabel = node.nodeValue.trim();
        break;
      }
    }
    this._handleChildClasses();
  }
  _handleChildClasses() {
    if (!this._isSubItem)
      return;
    Array.from(this.hostElement.children)
      .filter((child) => child.tagName === 'C-SUB-NAVIGATION-ITEM')
      .forEach((child) => {
      child.classList.add('c-sub-navigation-item--sub-level');
    });
  }
  render() {
    var _a, _b;
    const classes = {
      'c-side-navigation-item': true,
      'c-side-navigation-item--parent': this._slotHasContent,
      active: this.active,
    };
    const subNavigationClasses = {
      subnavactive: this.active,
      'sub-item': !this.active,
    };
    const a11y = {
      role: 'menuitem',
      tabindex: '0',
    };
    if (this._slotHasContent) {
      a11y['aria-expanded'] = (_a = (!!this.active)) === null || _a === void 0 ? void 0 : _a.toString();
    }
    else if (this.active) {
      a11y['aria-current'] = 'page';
    }
    return (index.h(index.Host, Object.assign({}, a11y, { class: classes, onClick: (e) => this._redirect(e), onKeyDown: (e) => this._redirect(e) }), index.h("div", { class: {
        'c-side-navigation-item__header': true,
        'c-side-navigation-item__header--expandable': this._slotHasContent,
      } }, this._slotHasContent && (index.h("c-icon", { class: "svg", path: mdi.mdiChevronRight })), index.h("div", { class: "c-side-navigation-item__slot" }, index.h("slot", null))), this._slotHasContent && (index.h("nav", { role: "menubar", "aria-label": this._ariaLabel, "aria-expanded": (_b = (!!this.active)) === null || _b === void 0 ? void 0 : _b.toString(), class: subNavigationClasses }, index.h("slot", { name: "sub-item" }))), index.h("c-loader", { size: 32, hide: !this.loading, style: { pointerEvents: 'none' } })));
  }
  get hostElement() { return index.getElement(this); }
  static get watchers() { return {
    "active": ["onActiveChange"]
  }; }
};
CSideNavigationItem.style = cSideNavigationItemCss;

const cSideNavigationTitleCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-side-navigation-title-color:var(--c-side-navigation-title-color, var(--c-white));--_c-side-navigation-title-border-color:var(--c-side-navigation-title-border-color, var(--c-white));align-items:center;box-shadow:0 1px 0 0 var(--_c-side-navigation-title-border-color);color:var(--_c-side-navigation-title-color);display:flex;gap:8px;margin:1.25rem 0 1rem;padding:4px 0}";

const CSideNavigationTitle = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return (index.h(index.Host, null, index.h("slot", null)));
  }
};
CSideNavigationTitle.style = cSideNavigationTitleCss;

const cSpacerCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{flex-grow:1 !important}";

const CSpacer = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return index.h(index.Host, null);
  }
};
CSpacer.style = cSpacerCss;

const cSpinnerCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-spinner-color:var(--c-spinner-color, var(--c-color));--_c-spinner-size:var(--c-size);--_c-spinner-width:var(--c-width);display:block;height:var(--_c-spinner-size);width:var(--_c-spinner-size)}:host(.c-spinner) svg{fill:var(--_c-spinner-color);height:var(--_c-spinner-size);overflow:visible;width:var(--_c-spinner-size)}:host(.c-spinner) svg circle{animation:spinner 2.5s linear infinite;fill:transparent;stroke-dasharray:calc(3.14 * var(--_c-spinner-size));stroke-linecap:round;stroke-width:var(--_c-spinner-width);stroke:var(--_c-spinner-color);transform-origin:calc(0.5px * var(--_c-spinner-size)) calc(0.5px * var(--_c-spinner-size)) 0}@keyframes spinner{0%{transform:rotate(0deg);stroke-dashoffset:calc(0.66 * var(--_c-spinner-size))}50%{transform:rotate(720deg);stroke-dashoffset:calc(3.14 * var(--_c-spinner-size))}100%{transform:rotate(1080deg);stroke-dashoffset:calc(0.66 * var(--_c-spinner-size))}}";

const CSpinner = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.color = 'var(--c-primary-600)';
    this.size = 24;
    this.width = 2;
  }
  render() {
    const iconParams = {
      cx: this.size / 2,
      cy: this.size / 2,
      r: this.size / 2 - 2,
    };
    const style = {
      '--c-size': `${this.size}px`,
      '--c-width': `${this.width}px`,
      '--c-color': this.color,
    };
    return (index.h(index.Host, { class: "c-spinner", style: style }, index.h("svg", null, index.h("circle", Object.assign({}, iconParams)))));
  }
};
CSpinner.style = cSpinnerCss;

const cSubNavigationItemCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-sub-navigation-item){--_c-sub-navigation-item-text-color:var(\n    --c-sub-navigation-item-text-color,\n    var(--c-text-body)\n  );--_c-sub-navigation-item-background-color:var(\n    --c-sub-navigation-item-background-color,\n    var(--c-transparent)\n  );--_c-sub-navigation-item-background-color-hover:var(\n    --c-sub-navigation-item-background-color-hover,\n    var(--c-primary-100)\n  );--_c-sub-navigation-item-text-color-active:var(\n    --c-sub-navigation-item-text-color-active,\n    var(--c-primary-600)\n  );--_c-sub-navigation-item-background-color-active:var(\n    --c-sub-navigation-item-background-color-active,\n    var(--c-white)\n  );--_c-sub-navigation-item-sub-item-background-color-active:var(\n    --c-sub-navigation-item-sub-item-background-color-active,\n    var(--c-primary-100)\n  );--_c-sub-navigation-item-sub-item-background-color-hover:var(\n    --c-sub-navigation-item-sub-item-background-color-hover,\n    var(--c-primary-100)\n  );--_c-sub-navigation-item-sub-item-background-color:var(\n    --c-sub-navigation-item-sub-item-background-color,\n    var(--c-transparent)\n  );--_c-sub-navigation-item-sub-item-text-color-active:var(\n    --c-sub-navigation-item-sub-item-text-color-active,\n    var(--c-primary-600)\n  );--_c-sub-navigation-item-sub-item-text-color:var(\n    --c-sub-navigation-item-sub-item-text-color,\n    var(--c-text-body)\n  )}:host(.c-sub-navigation-item--sub-level){--_c-sub-navigation-item-background-color:var(\n    --_c-sub-navigation-item-sub-item-background-color\n  );--_c-sub-navigation-item-text-color:var(\n    --_c-sub-navigation-item-sub-item-text-color\n  );--_c-sub-navigation-item-background-color-hover:var(\n    --_c-sub-navigation-item-sub-item-background-color-hover\n  );--_c-sub-navigation-item-text-color-active:var(\n    --_c-sub-navigation-item-sub-item-text-color-active\n  );--_c-sub-navigation-item-background-color-active:var(\n    --_c-sub-navigation-item-sub-item-background-color-active\n  )}.c-sub-navigation-item{align-items:center;background-color:var(--_c-sub-navigation-item-background-color);border-radius:4px;color:var(--_c-sub-navigation-item-text-color);cursor:pointer;display:flex;font-weight:400;line-height:46px;margin:0 8px;overflow:hidden;padding-left:34px;position:relative;transition:background-color 0.2s ease-in;user-select:none}.c-sub-navigation-item__wrapper{padding:2px 0}.c-sub-navigation-item__content{display:flex;align-items:center;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.c-sub-navigation-item__content::before{background-color:var(--_c-sub-navigation-item-text-color-active);content:\"\";height:100%;left:0;position:absolute;top:0;transform:translateZ(0) translateX(-8px);transition:transform 0.2s ease-in-out;width:8px}.c-sub-navigation-item:hover{background-color:var(--_c-sub-navigation-item-background-color-hover);color:var(--_c-sub-navigation-item-text-color-active)}:host(.active) .c-sub-navigation-item{background-color:var(--_c-sub-navigation-item-background-color-active)}:host(.active) .c-sub-navigation-item__content::before{transform:translateZ(0) translateX(0)}::slotted(span){margin-right:8px;font-size:20px;line-height:1}:host(:host:focus),:host(:host:focus) .c-sub-navigation-item{outline:none}:host(:host:focus-visible) .c-sub-navigation-item{outline:2px var(--_c-sub-navigation-item-text-color-active) solid;outline-offset:2px}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.c-sub-navigation-item__slot{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.c-sub-navigation-item__slot slot{display:flex;gap:8px;align-items:center}";

const CSubNavigationItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.active = undefined;
    this.focusable = false;
    this.href = undefined;
    this.target = null;
    this.loading = false;
  }
  _redirect(event) {
    if ((event instanceof KeyboardEvent && (event === null || event === void 0 ? void 0 : event.key) === 'Enter') ||
      event instanceof MouseEvent ||
      event instanceof PointerEvent) {
      event.stopPropagation();
      const sidenav = document.querySelector('c-side-navigation');
      sidenav.menuVisible = false;
      if (this.href) {
        if (this.target) {
          window.open(this.href, this.target);
        }
        else {
          window.location.href = this.href;
        }
      }
    }
  }
  render() {
    const a11y = {
      tabindex: this.focusable ? '0' : '-1',
      role: 'menuitem',
    };
    if (this.active) {
      a11y['aria-current'] = 'page';
    }
    return (index.h(index.Host, Object.assign({}, a11y, { class: { active: this.active }, onClick: (e) => this._redirect(e), onKeyDown: (e) => this._redirect(e) }), index.h("div", { class: "c-sub-navigation-item__wrapper" }, index.h("div", { class: "c-sub-navigation-item" }, index.h("div", { class: "c-sub-navigation-item__content" }, index.h("div", { class: "c-sub-navigation-item__slot" }, index.h("slot", null)), this.active && (index.h("span", { class: "visuallyhidden" }, ", Current page"))), index.h("c-loader", { size: 32, hide: !this.loading, style: { pointerEvents: 'none' } })))));
  }
  get element() { return index.getElement(this); }
};
CSubNavigationItem.style = cSubNavigationItemCss;

const cSwitchCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-switch){--_c-switch-border-color:var(--c-switch-border-color, var(--c-tertiary-600));--_c-switch-handle-color:var(--c-switch-handle-color, var(--c-tertiary-600));--_c-switch-slider-color:var(--c-switch-slider-color, var(--c-transparent));--_c-switch-border-color-disabled:var(--c-switch-border-color-disabled, var(--c-transparent));--_c-switch-handle-color-disabled:var(--c-switch-handle-color-disabled, var(--c-tertiary-500));--_c-switch-slider-color-disabled:var(--c-switch-slider-color-disabled, var(--c-tertiary-200));--_c-switch-border-color-active:var(--c-switch-border-color-active, var(--c-primary-600));--_c-switch-handle-color-active:var(--c-switch-handle-color-active, var(--c-white));--_c-switch-slider-color-active:var(--c-switch-slider-color-active, var(--c-primary-600));--_c-switch-border-color-active-disabled:var(--c-switch-border-color-active-disabled, var(--c-tertiary-400));--_c-switch-handle-color-active-disabled:var(--c-switch-handle-color-active-disabled, var(--c-white));--_c-switch-slider-color-active-disabled:var(--c-switch-slider-color-active-disabled, var(--c-tertiary-400));display:inline-block}.c-switch{--_c-switch-handle-margin:5px;--_c-switch-pointer:pointer;--_c-switch-height:22px;--_c-switch-width:44px;--_c-switch-handle-size:calc(var(--_c-switch-height) - 2 * var(--_c-switch-handle-margin));--_c-switch-handle-position-active:calc(\n    var(--_c-switch-width) - var(--_c-switch-handle-size) - 2 * var(--_c-switch-handle-margin)\n  );backface-visibility:hidden;transform:translate3d(0, 0, 0);display:inline-grid;height:var(--_c-switch-height);position:relative;grid-template-columns:1fr;gap:12px;align-items:center}.c-switch--disabled{--_c-switch-pointer:default;--_c-switch-handle-color:var(--_c-switch-handle-color-disabled);--_c-switch-slider-color:var(--_c-switch-slider-color-disabled);--_c-switch-border-color:var(--_c-switch-border-color-disabled);--c-error-600:var(--c-tertiary-400);color:var(--c-tertiary-500)}.c-switch--label{grid-template-columns:var(--_c-switch-width) auto}.c-switch__label span.required{color:var(--c-error-600)}.c-switch__input{height:var(--_c-switch-height);position:relative;width:var(--_c-switch-width);align-self:start}.c-switch__slider{background-color:var(--_c-switch-slider-color);border-radius:var(--_c-switch-height);box-shadow:inset 0 0 0 2px var(--_c-switch-border-color);inset:0;cursor:var(--_c-switch-pointer);position:absolute;transform-origin:50% 50%;transition:0.3s cubic-bezier(0.25, 0.8, 0.5, 1)}.c-switch__slider::before{background-color:var(--_c-switch-handle-color);border-radius:50%;bottom:var(--_c-switch-handle-margin);content:\"\";height:var(--_c-switch-handle-size);left:var(--_c-switch-handle-margin);position:absolute;transition:0.3s cubic-bezier(0.25, 0.8, 0.5, 1);width:var(--_c-switch-handle-size)}.c-switch input{height:0;opacity:0;width:0}.c-switch input:checked+.c-switch__slider{--_c-switch-handle-color:var(--_c-switch-handle-color-active);--_c-switch-slider-color:var(--_c-switch-slider-color-active);--_c-switch-border-color:var(--_c-switch-border-color-active)}.c-switch input:checked+.c-switch__slider::before{transform:translateX(var(--_c-switch-handle-position-active))}.c-switch input:checked+.c-switch__slider--disabled{--_c-switch-handle-color:var(--_c-switch-handle-color-active-disabled);--_c-switch-slider-color:var(--_c-switch-slider-color-active-disabled);--_c-switch-border-color:var(--_c-switch-border-color-active-disabled)}.c-switch input:focus+.c-switch__slider{outline:none}.c-switch input:focus-visible+.c-switch__slider{outline:2px var(--c-primary-600) solid;outline-offset:2px}";

const CSwitch = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    if (hostRef.$hostElement$["s-ei"]) {
      this.internals = hostRef.$hostElement$["s-ei"];
    }
    else {
      this.internals = hostRef.$hostElement$.attachInternals();
      hostRef.$hostElement$["s-ei"] = this.internals;
    }
    this._toggleState = () => {
      if (this.hostDisabled)
        return;
      this.checked = !this.checked;
      this.changeValue.emit(this.checked ? this.trueValue : this.falseValue);
      this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
    };
    this.checked = false;
    this.value = false;
    this.trueValue = true;
    this.falseValue = false;
    this.hostDisabled = false;
    this.hostId = undefined;
    this.required = false;
    this.hasLabel = false;
  }
  componentWillLoad() {
    this.checked = this.checked || this.value === this.trueValue;
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  componentDidLoad() {
    const slotted = this.host.childNodes;
    this.hasLabel = slotted && slotted.length > 0;
  }
  render() {
    const classes = {
      'c-switch': true,
      'c-switch--disabled': !!this.hostDisabled,
      'c-switch--label': this.hasLabel,
    };
    const sliderClasses = {
      'c-switch__slider': true,
      'c-switch__slider--disabled': !!this.hostDisabled,
    };
    return (index.h("label", { class: classes, htmlFor: this.hostId }, index.h("div", { class: "c-switch__input" }, index.h("input", { id: this.hostId, "aria-checked": this.checked.toString(), type: "checkbox", role: "switch", disabled: this.hostDisabled, checked: this.checked ? true : undefined, onChange: () => this._toggleState() }), index.h("span", { class: sliderClasses })), this.hasLabel ? (index.h("div", { class: "c-switch__label" }, index.h("slot", null), this.required && index.h("span", { class: "required" }, "\u00A0*"))) : null));
  }
  static get formAssociated() { return true; }
  get host() { return index.getElement(this); }
};
CSwitch.style = cSwitchCss;

const cTableCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host,:root{--_c-table-border-color:var(--c-table-border-color, var(--c-tertiary-200));--_c-table-header-text-color:var(--c-table-header-text-color, var(--c-text-system));--_c-table-row-background-color-mobile:var(--c-table-row-background-color-mobile, rgba(var(--c-primary-rgb), 0.05))}table.c-table{border-collapse:collapse;border-spacing:0;border:0;font-size:100%;font-family:var(--c-font-family);margin:0;padding:0;width:100%}table.c-table slot{display:table}table.c-table caption,table.c-table tbody,table.c-table tfoot,table.c-table thead,table.c-table tr,table.c-table th,table.c-table td{border:0;font-size:100%;font-family:var(--c-font-family);margin:0;padding:0}table.c-table thead{background-color:var(--c-white);position:relative}table.c-table thead th{border-bottom:2px solid var(--_c-table-border-color);text-align:left}table.c-table tbody{box-shadow:inset 1px 0 0 0 var(--_c-table-border-color), inset -1px 0 0 0 var(--_c-table-border-color), inset 0 1px 0 0 var(--_c-table-border-color), inset 0 -1px 0 0 var(--_c-table-border-color);}@supports (-webkit-hyphens: none){table.c-table tbody{border:1px solid var(--_c-table-border-color)}table.c-table tbody tr{border-bottom:1px solid var(--_c-table-border-color)}}table.c-table tbody tr{box-shadow:inset 0 1px 0 0 var(--_c-table-border-color)}table.c-table tfoot{background-color:var(--c-white)}table.c-table tfoot tr{box-shadow:inset 0 1px 0 0 var(--_c-table-border-color)}table.c-table tfoot td{min-height:48px}table.c-table tfoot td c-pagination{flex:1}table.c-table th,table.c-table td{font-weight:400;box-sizing:border-box;line-height:normal;padding:16px}table.c-table th{height:48px;font-size:14px;color:var(--_c-table-header-text-color)}table.c-table td{font-size:16px;color:var(--c-text-body)}table.c-table--mobile{border-spacing:0 16px;border-collapse:separate}table.c-table--mobile tbody{box-shadow:none}table.c-table--mobile tbody tr{border-radius:4px;box-shadow:inset 0 0 0 1px var(--_c-table-border-color)}@supports (-webkit-hyphens: none){table.c-table--mobile tbody tr{display:grid;margin-bottom:16px;border:none}}table.c-table--mobile thead{display:none}table.c-table--mobile td{display:grid;gap:4px;padding:12px;min-height:62px}table.c-table--mobile td::before{font-size:14px;color:var(--_c-table-header-text-color);content:attr(data-title);display:inline-block;text-align:start;padding-right:8px}table.c-table--mobile td:nth-of-type(even){background-color:var(--_c-table-row-background-color-mobile)}";

const CTable = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.mobileBreakpoint = 600;
    this.responsive = false;
  }
  get cells() {
    return Array.from(this._tableElement.querySelectorAll('td'));
  }
  get headers() {
    return Array.from(this._tableElement.querySelectorAll('th')).map((th) => th.innerHTML);
  }
  _handleResize(width) {
    const isMobile = width <= this.mobileBreakpoint;
    this._tableElement.classList.toggle('c-table--mobile', isMobile);
  }
  componentWillLoad() {
    this._tableElement = this.el.querySelector('table');
    this._tableElement.classList.add('c-table');
    this._observer = new ResizeObserver(([entry]) => {
      const { width } = entry.contentRect;
      this._handleResize(width);
    });
  }
  componentDidLoad() {
    if (this.responsive) {
      this._observer.observe(this._tableElement);
    }
    this.cells.forEach((cell, index) => {
      cell.dataset.title = this.headers[+index % this.headers.length];
    });
  }
  render() {
    return (index.h(index.Host, null, index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
};
CTable.style = cTableCss;

const cTextFieldCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:root,:host{--_c-text-field-active-color:var(--c-text-field-active-color, var(--c-primary-600));--_c-text-field-inactive-color:var(--c-text-field-inactive-color, var(--c-tertiary-600));--_c-text-field-background-color:var(--c-text-field-background-color, var(--c-transparent));--_c-text-field-text-color:var(--c-text-field-text-color, var(--c-text-body));--_c-text-field-placeholder-color:var(--c-text-field-placeholder-color, var(--c-tertiary-500));--_c-text-field-shadow-active-color:var(--c-text-field-shadow-active-color, var(--_c-text-field-active-color));--_c-text-field-shadow-background-color:var(--c-text-field-shadow-background-color, var(--c-white));--_c-text-field-shadow-text-color:var(--c-text-field-shadow-text-color, var(--_c-text-field-text-color));--_c-text-field-shadow-placeholder-color:var(--c-text-field-shadow-placeholder-color, var(--_c-text-field-placeholder-color))}.c-input{--_c-input-active-color:var(--_c-text-field-active-color);--_c-input-inactive-color:var(--_c-text-field-inactive-color);--_c-input-background-color:var(--_c-text-field-background-color);--_c-input-text-color:var(--_c-text-field-text-color);--_c-input-placeholder-color:var(--_c-text-field-placeholder-color);--_c-input-shadow-active-color:var(--_c-text-field-shadow-active-color);--_c-input-shadow-background-color:var(--_c-text-field-shadow-background-color);--_c-input-shadow-text-color:var(--_c-text-field-shadow-text-color);--_c-input-shadow-placeholder-color:var(--_c-text-field-shadow-placeholder-color)}.c-input__password-toggle,.c-input__date-toggle{cursor:pointer;fill:currentColor;height:22px;width:22px}.c-input__password-toggle--disabled,.c-input__date-toggle--disabled{cursor:not-allowed;fill:var(--c-tertiary-500)}.c-input input[type=date]{opacity:0}.c-input input[type=date]::-webkit-calendar-picker-indicator,.c-input input[type=date]::-webkit-inner-spin-button{display:none;appearance:none}.c-input input[type=date]:focus,.c-input input[type=date].c-input__input--filled{opacity:1}";

const CTextField = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    if (hostRef.$hostElement$["s-ei"]) {
      this.internals = hostRef.$hostElement$["s-ei"];
    }
    else {
      this.internals = hostRef.$hostElement$.attachInternals();
      hostRef.$hostElement$["s-ei"] = this.internals;
    }
    this._originalType = '';
    this._handleChange = (event) => {
      if (this.type === 'number' && !event.target.value && event.key === '-') {
        return;
      }
      this.value = this.trimWhitespace
        ? event.target.value.trim()
        : event.target.value;
      this.changeValue.emit(this.value);
      this.internals.setFormValue(this.value);
    };
    this._handleBlur = (event) => {
      if (this.trimWhitespace) {
        const trimmedValue = event.target.value.trim();
        event.target.value = trimmedValue;
      }
    };
    this._togglePasswordVisibility = () => {
      if (this.disabled)
        return;
      this.type = this.type === 'password' ? 'text' : 'password';
    };
    this.autofocus = false;
    this.autocapitalize = '';
    this.autocorrect = '';
    this.autocomplete = '';
    this.disabled = false;
    this.hideDetails = false;
    this.hint = '';
    this.hostId = undefined;
    this.trimWhitespace = false;
    this.label = undefined;
    this.max = null;
    this.min = null;
    this.name = undefined;
    this.placeholder = undefined;
    this.readonly = false;
    this.required = false;
    this.rows = 1;
    this.shadow = false;
    this.step = null;
    this.type = 'text';
    this.valid = true;
    this.validate = false;
    this.validateOnBlur = false;
    this.validation = 'Required field';
    this.value = undefined;
    this.isFocused = false;
    this.labelWidth = 0;
    this.preSlotWidth = 0;
  }
  componentWillLoad() {
    CTextField._uniqueId += 1;
    this._originalType = this.type;
    this._inputId = `${(this.hostId ||
      this.label ||
      this.placeholder ||
      '').replace(/[^a-zA-Z0-9-_]/g, '')}_${CTextField._uniqueId}`;
    this.internals.setFormValue(this.value);
  }
  get isActive() {
    return !!this.value || this.isFocused;
  }
  get passwordIcon() {
    return this.type === 'password' ? mdi.mdiEye : mdi.mdiEyeOff;
  }
  _renderInputElement() {
    const props = {
      classes: {
        'c-input__input': true,
        'c-input__input--filled': !!this.value,
      },
      shared: {
        id: this._inputId,
        name: this.name,
        disabled: this.disabled,
        readonly: this.readonly,
        value: this.value,
        onInput: this._handleChange,
        onChange: this._handleChange,
        onBlur: this._handleBlur,
      },
      input: Object.assign(Object.assign(Object.assign({ type: this.type, min: this.min, max: this.max, step: this.step }, (!!this.autocomplete && { autocomplete: this.autocomplete })), (!!this.autocapitalize && { autocapitalize: this.autocapitalize })), (!!this.autocorrect && { autocorrect: this.autocorrect })),
      textArea: {
        rows: this.rows,
      },
    };
    const textInput = (index.h("input", Object.assign({ class: props.classes }, props.input, props.shared, { ref: (el) => (this._inputElement = el) })));
    const textArea = (index.h("textarea", Object.assign({ class: props.classes }, props.shared, props.textArea)));
    return this.rows > 1 ? textArea : textInput;
  }
  _isFirefox() {
    return !!navigator.userAgent.match(/firefox|fxios/i);
  }
  _renderDateToggle() {
    if (this._originalType !== 'date' || this._isFirefox())
      return;
    const classes = {
      'c-input__date-toggle': true,
      'c-input__date-toggle--disabled': this.disabled,
    };
    return (index.h("svg", { class: classes, viewBox: "0 0 24 24", onClick: this._toggleDatepicker.bind(this) }, index.h("path", { d: mdi.mdiCalendar })));
  }
  _toggleDatepicker() {
    var _a;
    (_a = this._inputElement) === null || _a === void 0 ? void 0 : _a.showPicker();
  }
  _renderPasswordToggle() {
    if (this._originalType !== 'password')
      return;
    const classes = {
      'c-input__password-toggle': true,
      'c-input__password-toggle--disabled': this.disabled,
    };
    return (index.h("svg", { class: classes, viewBox: "0 0 24 24", onClick: this._togglePasswordVisibility }, index.h("path", { d: this.passwordIcon })));
  }
  render() {
    return (index.h(index.Host, null, index.h("c-input", { autofocus: this.autofocus, disabled: this.disabled, "hide-details": this.hideDetails, hint: this.hint, id: this.hostId, "input-id": this._inputId, label: this.label, name: this.name, placeholder: this.placeholder, readonly: this.readonly, required: this.required, rows: this.rows, shadow: this.shadow, type: this.type, valid: this.valid, validate: this.validate, "validate-on-blur": this.validateOnBlur, validation: this.validation, value: this.value }, index.h("slot", { name: "pre", slot: "pre" }), this._renderInputElement(), this._renderPasswordToggle(), this._renderDateToggle(), index.h("slot", { name: "post" }))));
  }
  static get formAssociated() { return true; }
  get hiddenEl() { return index.getElement(this); }
};
CTextField._uniqueId = 0;
CTextField.style = cTextFieldCss;

const cToolbarCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-toolbar-background-color:var(--c-toolbar-background-color, var(--c-white));--_c-toolbar-text-color:var(--c-toolbar-text-color, var(--c-text-system));z-index:1}:host .c-toolbar{align-items:center;background:var(--_c-toolbar-background-color);box-shadow:2px 4px 10px rgba(0, 0, 0, 0.1607843137);color:var(--_c-toolbar-text-color);column-gap:12px;display:flex;height:60px;padding-left:16px;padding-right:16px;position:fixed;width:100%}:host .spacer{height:60px;width:100%}:host(.relative) .c-toolbar{position:relative;margin-bottom:-60px}";

const CToolbar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "c-toolbar" }, index.h("slot", null)), index.h("div", { class: "spacer" })));
  }
};
CToolbar.style = cToolbarCss;

exports.c_autocomplete = CAutocomplete;
exports.c_badge = CBadge;
exports.c_button = CButton;
exports.c_card = CCard;
exports.c_card_actions = CCardActions;
exports.c_card_content = CCardContent;
exports.c_card_title = CCardTitle;
exports.c_checkbox = CCheckbox;
exports.c_csc_logo = CCscLogo;
exports.c_dropdown = CDropdown;
exports.c_icon = CIcon;
exports.c_icon_button = CIconButton;
exports.c_input = CInput;
exports.c_loader = CLoader;
exports.c_main = CMain;
exports.c_message = CMessage;
exports.c_navigation_button = CNavigationButton;
exports.c_option = COption;
exports.c_otp_input = COtpInput;
exports.c_page = CPage;
exports.c_radio = CRadio;
exports.c_radio_group = CRadioGroup;
exports.c_ripple = CRipple;
exports.c_select = CSelect;
exports.c_side_navigation = CSideNavigation;
exports.c_side_navigation_item = CSideNavigationItem;
exports.c_side_navigation_title = CSideNavigationTitle;
exports.c_spacer = CSpacer;
exports.c_spinner = CSpinner;
exports.c_sub_navigation_item = CSubNavigationItem;
exports.c_switch = CSwitch;
exports.c_table = CTable;
exports.c_text_field = CTextField;
exports.c_toolbar = CToolbar;

//# sourceMappingURL=c-autocomplete_34.cjs.entry.js.map