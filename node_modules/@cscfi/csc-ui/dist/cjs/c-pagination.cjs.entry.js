'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-91ba22ab.js');
const mdi = require('./mdi-66dcba4d.js');

const cPaginationCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-pagination-button-active-background-color:var(--c-pagination-button-active-background-color, var(--c-primary-600));--_c-pagination-button-active-background-color-hover:var(--c-pagination-button-active-background-color-hover, var(--c-primary-400));--_c-pagination-button-active-text-color:var(--c-pagination-button-active-text-color, var(--c-white));--_c-pagination-button-background-color:var(--c-pagination-button-background-color, var(--c-transparent));--_c-pagination-button-background-color-hover:var(--c-pagination-button-background-color-hover, rgba(var(--c-primary-rgb), 0.1));--_c-pagination-button-text-color:var(--c-pagination-button-text-color, var(--_c-pagination-button-active-background-color));--_c-pagination-text-color:var(--c-pagination-text-color, var(--c-text-system));--_c-pagination-menu-text-color:var(--c-pagination-menu-text-color, var(--c-text-system));--_c-pagination-menu-text-color-active:var(--c-pagination-menu-text-color-active, var(--c-primary-600));--_c-pagination-menu-background-color-hover:var(--c-pagination-menu-background-color-hover, var(--c-primary-200));--_c-pagination-menu-outline-color:var(--c-pagination-menu-outline-color, var(--c-primary-600));display:block}:host c-icon-button{--c-icon-button-background-color:var(--_c-pagination-button-active-background-color);--c-icon-button-background-color-hover:var(--_c-pagination-button-active-background-color-hover);--c-icon-button-text-color:var(--_c-pagination-button-active-text-color);--c-icon-button-text-background-color:var(--_c-pagination-button-background-color);--c-icon-button-text-background-color-hover:var(--_c-pagination-button-background-color-hover);--c-icon-button-text-text-color:var(--_c-pagination-button-text-color)}:host span{font-size:14px;text-align:right;white-space:nowrap}:host .range{min-width:132px}:host .visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}:host(.c-pagination) nav{align-items:center;display:flex;flex-wrap:wrap;gap:0 24px;justify-content:center;width:100%}:host(.c-pagination) ul{align-items:center;display:flex;gap:4px;justify-content:center;list-style:none;margin:0;padding:0}:host(.c-pagination) .c-pagination__details{color:var(--_c-pagination-text-color);align-items:center;display:flex;flex-wrap:wrap;flex:auto;justify-content:space-between}:host(.c-pagination) .c-pagination__items-per-page{color:var(--_c-pagination-text-color);font-size:14px;text-align:right;white-space:nowrap;display:flex;align-items:center;gap:4px}:host(.c-pagination) c-menu{--c-menu-text-color:var(--_c-pagination-menu-text-color);--c-menu-text-color-active:var(--_c-pagination-menu-text-color-active);--c-menu-background-color-hover:var(--_c-pagination-menu-background-color-hover);--c-menu-outline-color:var(--_c-pagination-menu-outline-color)}:host(.c-pagination--simple) ul{flex:1;justify-content:flex-end}:host(.c-pagination--small) ul{gap:2px}";

const CPagination = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    this._textContent = {
      itemsPerPageText: 'Items per page:',
      nextPage: 'Next page',
      prevPage: 'Previous page',
    };
    this._buttons = [];
    this._increasePageNumber = () => {
      if (this._currentPage < this._getTotalPages()) {
        this._currentPage += 1;
        this._valueChangeHandler();
      }
    };
    this._decreasePageNumber = () => {
      if (this._currentPage > 1) {
        this._currentPage -= 1;
        this._valueChangeHandler();
      }
    };
    this.value = {
      itemCount: 0,
    };
    this.hideDetails = false;
    this.simple = false;
    this.size = 'default';
    this._currentPage = undefined;
    this._itemsPerPage = undefined;
    this._pageSizes = undefined;
    this._totalVisible = undefined;
    this.hideRange = false;
    this.tick = '';
  }
  valueHandler(value, oldValue) {
    if (this._isEqual(value, oldValue))
      return;
    requestAnimationFrame(() => {
      this._setRange();
    });
  }
  _isEqual(options1, options2) {
    const keys1 = Object.keys(options1 || {});
    const keys2 = Object.keys(options2 || {});
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (const key of keys1) {
      if (options1[key] !== options2[key]) {
        return false;
      }
    }
    return true;
  }
  componentWillLoad() {
    this._setRange();
  }
  _getText(key) {
    var _a;
    const source = ((_a = this.value.textOverrides) === null || _a === void 0 ? void 0 : _a[key])
      ? this.value.textOverrides
      : this._textContent;
    return source[key];
  }
  _setRange() {
    if (!this.value)
      return;
    this._currentPage = this.value.currentPage || 1;
    this._itemsPerPage = this.value.itemsPerPage || 25;
    this._totalVisible = this.value.totalVisible || 7;
    this._pageSizes = this.value.pageSizes || [5, 25, 50, 100];
    this.value.startFrom =
      this._currentPage * this._itemsPerPage - this._itemsPerPage;
    this.value.endTo = this._currentPage * this._itemsPerPage - 1;
    this.changeValue.emit(this.value);
  }
  _valueChangeHandler() {
    this.value.currentPage = this._currentPage;
    this.value.itemsPerPage = this._itemsPerPage;
    this._setRange();
  }
  _renderMenu() {
    const pageSizes = this._pageSizes.map((i) => ({
      name: i.toString(),
      action: () => {
        this._itemsPerPage = i;
        this._currentPage = 1;
        this._valueChangeHandler();
      },
    }));
    const onMenuClick = (event) => {
      event.stopPropagation();
    };
    return (index.h("div", { class: "c-pagination__items-per-page" }, this._getText('itemsPerPageText'), index.h("c-menu", { items: pageSizes, onClick: onMenuClick }, index.h("div", null, index.h("span", { class: "items-per-page" }, this._itemsPerPage)))));
  }
  _getTotalPages() {
    return Math.ceil(this.value.itemCount / this._itemsPerPage);
  }
  _setPage(number) {
    this._currentPage = number;
    this._valueChangeHandler();
  }
  _getRange() {
    var _a;
    if (this.hideRange || !this.value.itemCount)
      return;
    const end = Math.min(this._currentPage * this._itemsPerPage, this.value.itemCount);
    const start = this.value.startFrom + 1;
    const pageTextOverride = (_a = this.value.textOverrides) === null || _a === void 0 ? void 0 : _a.pageText;
    let parsedPageTextOverride;
    if (pageTextOverride) {
      parsedPageTextOverride = pageTextOverride({
        start: start,
        end: end,
        count: this.value.itemCount,
      });
    }
    return pageTextOverride
      ? parsedPageTextOverride
      : `${start} - ${end} of ${this.value.itemCount} items`;
  }
  _getArrowLeft(size) {
    return (index.h("li", null, index.h("c-icon-button", { "aria-disabled": this.value.currentPage <= 1 ? 'true' : 'false', "aria-label": `${this._getText('prevPage')}`, disabled: this.value.currentPage <= 1, size: size, text: true, onClick: this._decreasePageNumber }, index.h("span", { class: "visuallyhidden" }, this._getText('prevPage')), index.h("c-icon", { path: mdi.mdiChevronLeft }))));
  }
  _getArrowRight(size) {
    return (index.h("li", null, index.h("c-icon-button", { "aria-disabled": this.value.currentPage >= this._getTotalPages() ? 'true' : 'false', "aria-label": `${this._getText('nextPage')}`, disabled: this.value.currentPage >= this._getTotalPages(), size: size, text: true, onClick: this._increasePageNumber }, index.h("span", { class: "visuallyhidden" }, this._getText('nextPage')), index.h("c-icon", { path: mdi.mdiChevronRight }))));
  }
  _button(number, size) {
    var _a;
    const params = {
      text: this._currentPage !== number,
      onClick: () => this._setPage(number),
      size,
    };
    if (this._currentPage === number) {
      params['aria-current'] = 'page';
    }
    const pageOfTextOverride = (_a = this.value.textOverrides) === null || _a === void 0 ? void 0 : _a.pageOfText;
    let parsedPageOfTextOverride;
    if (pageOfTextOverride) {
      parsedPageOfTextOverride = pageOfTextOverride({
        pageNumber: number,
        count: this._getTotalPages(),
      });
    }
    return (index.h("li", null, index.h("c-icon-button", Object.assign({}, params), index.h("span", { "aria-label": pageOfTextOverride
        ? parsedPageOfTextOverride
        : `page ${number} of ${this._getTotalPages()}` }, number))));
  }
  _addButton(number, size) {
    this._buttons.push(this._button(number, size));
  }
  _addSeparator(size) {
    this._buttons.push(index.h("li", null, index.h("c-icon-button", { "aria-disabled": "true", size: size, tabindex: "-1", role: "separator", disabled: true, text: true }, index.h("svg", { width: "16", height: "16", viewBox: "0 0 24 24" }, index.h("path", { d: mdi.mdiDotsHorizontal })))));
  }
  _addButtons(buttonStart, buttonCount, size) {
    if (buttonStart > 1) {
      this._addButton(1, size);
      this._addSeparator(size);
    }
    for (let index = 1; index < buttonCount; index++) {
      this._addButton(buttonStart + index, size);
    }
    const allPagesVisible = this._getTotalPages() <= this._totalVisible;
    if ((this._currentPage < this._totalVisible - 1 ||
      this._currentPage < this._getTotalPages() - this._totalVisible + 4) &&
      !allPagesVisible) {
      this._addSeparator(size);
    }
  }
  _getPageButtons(size) {
    this._buttons = [];
    let buttonStart = 0;
    let buttonCount = this._getTotalPages() + 1;
    const morePagesThanVisible = this._getTotalPages() > this._totalVisible;
    if (morePagesThanVisible) {
      if (this._currentPage < this._totalVisible - 2) {
        buttonCount = this._totalVisible - 1;
      }
      else if (this._currentPage <
        this._getTotalPages() - this._totalVisible + 4) {
        buttonStart = Math.ceil(this._currentPage - this._totalVisible / 2) + 1;
        buttonCount = this._totalVisible - 3;
      }
      else {
        buttonStart = this._getTotalPages() - this._totalVisible + 2;
        buttonCount = this._totalVisible - 2;
      }
    }
    this._addButtons(buttonStart, buttonCount, size);
    if (morePagesThanVisible) {
      this._buttons.push(this._button(this._getTotalPages(), size));
    }
    return this._buttons;
  }
  _renderPaginationButtons() {
    if (!this.value.itemCount)
      return '';
    const buttonsize = this.size === 'small' ? 'x-small' : 'small';
    return (index.h("ul", null, this._getArrowLeft(buttonsize), !this.simple && this._getPageButtons(buttonsize), this._getArrowRight(buttonsize)));
  }
  render() {
    const classes = {
      'c-pagination': true,
      'c-pagination--small': this.size === 'small',
      'c-pagination--simple': this.simple,
    };
    return (index.h(index.Host, { class: classes }, index.h("nav", { role: "navigation", "aria-label": "pagination" }, !this.hideDetails && (index.h("div", { class: "c-pagination__details" }, this._renderMenu(), index.h("span", { class: { range: !this.simple } }, this._getRange()))), this._renderPaginationButtons())));
  }
  static get watchers() { return {
    "value": ["valueHandler"]
  }; }
};
CPagination.style = cPaginationCss;

exports.c_pagination = CPagination;

//# sourceMappingURL=c-pagination.cjs.entry.js.map