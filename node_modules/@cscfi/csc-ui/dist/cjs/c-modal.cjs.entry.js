'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-91ba22ab.js');

const cModalCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}dialog{background-color:transparent;border:none;color:var(--c-text-body);inset:0;margin:auto;max-width:calc(100% - 32px);overflow:visible;padding:0;width:var(--_c-modal-width, 600px)}dialog:not([open]){pointer-events:none;opacity:0}dialog::backdrop{background-color:rgba(0, 0, 0, 0.5)}dialog.backdrop-blur::backdrop{backdrop-filter:blur(4px)}@media (prefers-reduced-motion: no-preference){dialog.nudging{animation:dialog-nudge 0.15s cubic-bezier(0.25, 0.8, 0.25, 1) !important}dialog.opening{animation:dialog-open 0.3s cubic-bezier(0.25, 0.8, 0.5, 1) forwards}dialog.opening::backdrop{animation:backdrop-fadein 0.3s forwards}dialog.closing{animation:dialog-close 0.3s cubic-bezier(0.25, 0.8, 0.5, 1) forwards}dialog.closing::backdrop{animation:backdrop-fadeout 0.3s forwards}}@keyframes dialog-nudge{0%{transform:scale(1)}50%{transform:scale(1.03)}100%{transform:scale(1)}}@keyframes dialog-open{from{transform:scale(0)}to{transform:scale(1)}}@keyframes dialog-close{to{transform:scale(0)}}@keyframes backdrop-fadein{from{opacity:0}to{opacity:1}}@keyframes backdrop-fadeout{from{opacity:1}to{opacity:0}}";

const CModal = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeValue = index.createEvent(this, "changeValue", 3);
    this._debounce = null;
    this._handleShow = () => {
      if (this._dialog) {
        this._dialog.addEventListener('animationend', this._onDialogOpened);
        this._dialog.classList.add('opening');
        this._dialog.showModal();
      }
    };
    this._onDialogOpened = () => {
      if (this._dialog) {
        this._dialog.removeEventListener('animationend', this._onDialogOpened);
        this._dialog.classList.remove('opening');
      }
    };
    this._handleClose = () => {
      if (this._dialog) {
        this._dialog.addEventListener('animationend', this._onDialogClosed);
        this._dialog.classList.add('closing');
      }
    };
    this._onDialogClosed = () => {
      if (this._dialog) {
        this._dialog.removeEventListener('animationend', this._onDialogClosed);
        this._dialog.classList.remove('closing');
        this._dialog.close();
      }
      if (!document.fullscreenElement)
        return;
      document.exitFullscreen();
    };
    this._handleClickOutside = () => {
      this._dialog.addEventListener('click', (e) => {
        if (e.clientX === 0 && e.clientY === 0)
          return;
        const dialogDimensions = this._dialog.getBoundingClientRect();
        if (e.clientX < dialogDimensions.left ||
          e.clientX > dialogDimensions.right ||
          e.clientY < dialogDimensions.top ||
          e.clientY > dialogDimensions.bottom) {
          if (!this.dismissable) {
            this._dialog.classList.add('nudging');
            if (this._debounce !== null) {
              clearTimeout(this._debounce);
              this._debounce = null;
            }
            this._debounce = window.setTimeout(() => {
              this._dialog.classList.remove('nudging');
              this._debounce = null;
            }, 150);
            return;
          }
          this._handleClose();
          this.changeValue.emit(false);
        }
      });
    };
    this._handleKeyDown = (e) => {
      if (e.keyCode === 27) {
        e.preventDefault();
        this._handleClose();
        this.changeValue.emit(false);
      }
    };
    this.value = false;
    this.dismissable = false;
    this.width = 600;
    this.zIndex = 10;
    this.disableBackdropBlur = false;
    this.innerValue = false;
    this.animateModal = false;
  }
  onValueChange(value) {
    if (value) {
      this._handleShow();
      return;
    }
    this._handleClose();
  }
  componentWillLoad() {
    this.innerValue = this.value;
    const width = isNaN(this.width) ? this.width : `${this.width}px`;
    this.el.style.setProperty('--_c-modal-width', `${width}`);
  }
  componentDidLoad() {
    this._handleClickOutside();
    if (this.value) {
      this._handleShow();
    }
  }
  render() {
    const dialogStyle = {
      'z-index': `${this.zIndex}`,
    };
    const classes = {
      'backdrop-blur': !this.disableBackdropBlur,
    };
    return (index.h("dialog", { ref: (el) => (this._dialog = el), style: dialogStyle, class: classes, onKeyDown: this._handleKeyDown }, index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "value": ["onValueChange"]
  }; }
};
CModal.style = cModalCss;

exports.c_modal = CModal;

//# sourceMappingURL=c-modal.cjs.entry.js.map