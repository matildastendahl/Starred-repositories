import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const cListItemTitleCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(.c-list-item-title){--_c-list-item-title-color:var(--c-list-item-title-color, var(--c-text-body));--_c-list-item-title-color-active:var(--c-list-item-title-color-active, var(--c-primary-600));display:block;font-weight:500;color:var(--_c-list-item-title-color)}:host(.c-list-item-title--active){color:var(--_c-list-item-title-color-active)}";

const CListItemTitle$1 = proxyCustomElement(class CListItemTitle extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.active = false;
  }
  render() {
    const classes = {
      'c-list-item-title': true,
      'c-list-item-title--active': this.active,
    };
    return (h(Host, { class: classes }, h("slot", null)));
  }
  static get style() { return cListItemTitleCss; }
}, [1, "c-list-item-title", {
    "active": [4]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-list-item-title"];
  components.forEach(tagName => { switch (tagName) {
    case "c-list-item-title":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CListItemTitle$1);
      }
      break;
  } });
}

const CListItemTitle = CListItemTitle$1;
const defineCustomElement = defineCustomElement$1;

export { CListItemTitle, defineCustomElement };

//# sourceMappingURL=c-list-item-title.js.map