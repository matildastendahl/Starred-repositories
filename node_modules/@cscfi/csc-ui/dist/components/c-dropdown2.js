import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as mdiInformation, a as mdiAlert } from './mdi.js';
import { d as defineCustomElement$1 } from './c-icon2.js';

const cDropdownCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-dropdown){--_c-dropdown-background-color:var(\n    --c-dropdown-background-color,\n    var(--c-white)\n  );--_c-dropdown-background-color-hover:var(\n    --c-dropdown-background-color-hover,\n    var(--c-primary-200)\n  );--_c-dropdown-text-color:var(--c-dropdown-text-color, var(--c-text-body));--_c-dropdown-text-color-active:var(\n    --c-dropdown-text-color-active,\n    var(--c-primary-600)\n  );--_c-dropdown-font-size:14px;--_c-dropdown-height:42px;display:block;position:relative}:host(c-dropdown) mark{background-color:transparent;box-shadow:0 2px 0 0 var(--_c-dropdown-text-color-active);color:inherit}:host(c-dropdown) dialog{border-radius:4px;background-color:transparent;border:none;margin:-4px 0 0;overflow:visible;padding:4px 0 0;position:fixed}:host(c-dropdown) dialog::backdrop{opacity:0}:host(c-dropdown) dialog[open].mobile{background-color:var(--_c-dropdown-background-color);width:100vw;max-width:100vw;height:100vh;max-height:100svh;inset:0}:host(c-dropdown) dialog[open].mobile .input-top-wrapper{padding:8px}:host(c-dropdown) dialog .input-bottom-wrapper.active{padding-top:8px}:host(c-dropdown) .dummy{display:none}:host(c-dropdown) ul{background-color:var(--_c-dropdown-background-color);box-shadow:2px 4px 10px rgba(0, 0, 0, 0.1607843137);border-radius:4px;list-style:none;margin:0;outline:none;padding:0;pointer-events:auto;visibility:hidden;width:100%;height:max-content;overflow-y:scroll}:host(c-dropdown) ul.active{visibility:visible;animation:0.2s 1 fade-in cubic-bezier(0.25, 0.8, 0.5, 1)}:host(c-dropdown) ul.active.mobile{width:100vw;max-width:100vw;height:100vh;max-height:calc(100svh - 60px)}:host(c-dropdown) li{align-items:center;column-gap:12px;cursor:pointer;display:flex;flex-wrap:nowrap;font-size:var(--_c-dropdown-font-size);min-height:var(--_c-dropdown-height);outline:none;padding-left:10px;padding-right:10px;pointer-events:auto;white-space:nowrap;width:100%;border-radius:4px}:host(c-dropdown) li span,:host(c-dropdown) li c-option-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}:host(c-dropdown) li:hover,:host(c-dropdown) li:focus,:host(c-dropdown) li.active{background:var(--_c-dropdown-background-color-hover);color:var(--_c-dropdown-text-color-active);box-shadow:inset 0 0 0 1px var(--_c-dropdown-text-color-active)}:host(c-dropdown) li:not(.disabled,:hover,:focus)[aria-selected=true]{background:var(--_c-dropdown-background-color-hover);color:var(--_c-dropdown-text-color-active);border-radius:0}:host(c-dropdown) li.disabled{background-color:rgba(var(--c-tertiary-rgb), 0.05);cursor:default;filter:grayscale(1) opacity(0.75)}:host(c-dropdown) .visuallyhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes fade-in{from{opacity:0;transform:translateY(-8px)}to{opacity:1;transform:translateY(0)}}";

const CDropdown = proxyCustomElement(class CDropdown extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.selectOption = createEvent(this, "selectOption", 7);
    this.dropdownStateChange = createEvent(this, "dropdownStateChange", 7);
    this._debounce = null;
    this._isMobile = false;
    this._listItems = [];
    this._isOpening = false;
    this._inputSize = {
      height: 0,
      width: 0,
    };
    this._openedOnTop = false;
    this._hideDetails = false;
    this.itemsPerPage = undefined;
    this.parent = undefined;
    this.items = undefined;
    this.index = undefined;
    this.hostId = undefined;
    this.type = undefined;
    this.itemType = undefined;
    this.renderedList = null;
    this.isOpen = false;
    this.statusText = '';
  }
  optionsWatcher() {
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  async stateWatcher(isOpen) {
    this._originalOverflowValue =
      this._originalOverflowValue ||
        window.getComputedStyle(document.body).overflow;
    if (isOpen) {
      this._handleOpen();
      this._disableScroll();
    }
    else {
      this._enableScroll();
    }
    this.dropdownStateChange.emit(isOpen);
  }
  handleIndexChange(index) {
    requestAnimationFrame(() => {
      var _a;
      this._updateStatusText();
      (_a = this._listItems[index]) === null || _a === void 0 ? void 0 : _a.focus();
    });
  }
  async setStatusText(text) {
    requestAnimationFrame(() => {
      this.statusText = text;
    });
  }
  async focusItem(index) {
    requestAnimationFrame(() => {
      var _a;
      (_a = this._listItems[index]) === null || _a === void 0 ? void 0 : _a.focus();
    });
  }
  async open() {
    if (this._dialog.open)
      return;
    this._outsideClickFn = this._handleOutsideClick.bind(this);
    this._dialog.addEventListener('click', this._outsideClickFn);
    requestAnimationFrame(() => {
      this.isOpen = true;
      this._positionMenu();
    });
  }
  async close() {
    this._dialog.close();
    this.isOpen = false;
    this._inputElement.slot = 'default';
    this._inputElement.hideDetails = this._hideDetails;
    this._dummyElement.style.width = '0';
    this._dummyElement.style.display = 'none';
    this._dialog.style.width = '0';
    window.removeEventListener('click', this._outsideClickFn);
  }
  _setIsMobile() {
    this._isMobile = window.matchMedia('only screen and (max-width: 760px)').matches;
  }
  _handleOpen() {
    this._isOpening = true;
    setTimeout(() => {
      this._isOpening = false;
    }, 500);
  }
  _disableScroll() {
    document.body.style.overflow = 'hidden';
  }
  _enableScroll() {
    if (this._originalOverflowValue &&
      this._originalOverflowValue !== 'visible') {
      document.body.style.overflow = this._originalOverflowValue;
      return;
    }
    document.body.style.removeProperty('overflow');
  }
  componentDidLoad() {
    this._setIsMobile();
    this._hideDetails = this.parent.hideDetails;
    this._inputElement = this.el.querySelector('c-input');
    this._resizeObserver = new ResizeObserver((entries) => {
      if (!this._dialog.open)
        return;
      requestAnimationFrame(() => {
        if (!Array.isArray(entries) || !entries.length || this._isOpening)
          return;
        this._setIsMobile();
        this.close();
      });
    });
    this._resizeObserver.observe(window.document.body);
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  async selectItem(index) {
    const item = this._listItems[index];
    if (item.classList.contains('disabled')) {
      return true;
    }
    this._listItems[index].click();
    return false;
  }
  async updateList() {
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  _handleOutsideClick() {
    if (!this.isOpen)
      return;
    this.close();
  }
  _highlightMatchingText(value) {
    const { query } = this.parent;
    if (this.parent.tagName === 'C-SELECT' || query === '')
      return value;
    const regex = new RegExp(query, 'gi');
    const highlighted = value
      .replace(/(<([^>]+)>)/gi, '')
      .replace(regex, (match) => `<mark>${match}</mark>`);
    return highlighted;
  }
  _getParentPosition() {
    return this.parent.shadowRoot
      .querySelector('.c-input__slot')
      .getBoundingClientRect();
  }
  _positionMenu() {
    const { innerWidth, innerHeight } = window;
    this._dialog.style.width = 'auto';
    this._dialog.style.opacity = '0';
    this._dialog.showModal();
    requestAnimationFrame(() => {
      let inputSlot = 'input-top';
      const { top: parentTop, width } = this._getParentPosition();
      const inputSize = this.el.getBoundingClientRect();
      this._inputSize = {
        height: inputSize.height,
        width: inputSize.width,
      };
      if (!this._isMobile) {
        this._dialog.style.width = `${width}px`;
        this._dialog.style.top = `${inputSize.top}px`;
        this._dialog.style.bottom = 'auto';
        this._dialog.style.left = `${inputSize.left}px`;
        const { bottom, right, height } = this._dialog.getBoundingClientRect();
        const isInView = {
          x: right < innerWidth,
          y: bottom < innerHeight,
        };
        const fitsOnTop = parentTop - height > 0;
        if (!fitsOnTop && !isInView.y) {
          this._dialog.style.maxHeight = `${parentTop}px`;
        }
        if (!isInView.y || this._openedOnTop) {
          this._openedOnTop = true;
          this._inputElement.hideDetails = true;
          inputSlot = 'input-bottom';
          this._dialog.style.top = 'auto';
          this._dialog.style.bottom = `${innerHeight - inputSize.top - 44}px`;
        }
      }
      this._dummyElement.style.width = `${this._getParentPosition().width}px`;
      this._dummyElement.style.height = `${this._inputSize.height}px`;
      this._dummyElement.style.display = 'block';
      this._dummyElement.slot = 'default';
      this._inputElement.slot = inputSlot;
      this._inputElement.hideDetails = true;
      this._dialog.style.opacity = '1';
      const input = this.parent.shadowRoot.querySelector('input');
      input.focus();
    });
  }
  _minimumQueryItem() {
    const { query, loading, minimumQueryLength, minimumQueryLengthMessage } = this.parent;
    if (query.length > minimumQueryLength || loading)
      return;
    return (h("li", null, h("c-icon", { path: mdiInformation, size: 18, color: "var(--c-info-600)" }), minimumQueryLengthMessage.replace('{n}', minimumQueryLength.toString())));
  }
  _emptyItem() {
    const { query, loading, noMatchingItemsMessage } = this
      .parent;
    if (!query || loading)
      return;
    return (h("li", null, h("c-icon", { path: mdiAlert, size: 18, color: "var(--c-warning-600)" }), noMatchingItemsMessage));
  }
  _renderList() {
    return this.itemType === 'option'
      ? this._renderOptionsList()
      : this._renderItemsList();
  }
  _renderOptionsList() {
    if (!this.items.length)
      return this._minimumQueryItem() || this._emptyItem();
    const options = Array.from(this.items);
    this._listItems.length = 0;
    return options.map((option, index) => {
      const optionValue = option.querySelector('c-option-value');
      if (optionValue) {
        optionValue.innerHTML = this._highlightMatchingText(optionValue.textContent);
      }
      return (h("li", { ref: (el) => this._listItems.push(el), id: `${this.hostId}-option-${option.value}`, tabindex: "-1", role: "option", "aria-set-size": this.items.length.toString(), "aria-pos-in-set": (index + 1).toString(), "aria-selected": (!!option.selected).toString(), class: { disabled: !!option.disabled }, "data-name": option.name, onClick: (event) => {
          if (option.disabled) {
            event.preventDefault();
            return;
          }
          this.selectOption.emit({ name: option.name, value: option.value });
        }, innerHTML: option.outerHTML }));
    });
  }
  _renderItemsList() {
    if (!this.items.length)
      return this._minimumQueryItem() || this._emptyItem();
    this._listItems.length = 0;
    return this.items.map((item, index) => {
      return (h("li", { ref: (el) => this._listItems.push(el), id: `${this.hostId}-option-${item.value}`, tabindex: "-1", role: "option", "aria-set-size": this.items.length.toString(), "aria-pos-in-set": (index + 1).toString(), "aria-selected": (this.index === index).toString(), class: { disabled: !!item.disabled }, "data-name": item.name, onClick: (event) => {
          if (item.disabled) {
            event.preventDefault();
            return;
          }
          this.selectOption.emit({ name: item.name, value: item.value });
        } }, h("span", { innerHTML: this._highlightMatchingText(item.name) })));
    });
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      var _a;
      const selection = this._listItems[this.index];
      const ending = !!this.items.length
        ? ', to navigate use up and down arrows'
        : '';
      const total = this._listItems.length;
      const position = this.index + 1;
      const isDisabled = !!((_a = selection === null || selection === void 0 ? void 0 : selection.classList) === null || _a === void 0 ? void 0 : _a.contains('disabled'));
      const beginning = isDisabled ? 'Disabled option - ' : '';
      let selectionText = !!selection
        ? `${beginning}${selection.dataset.name} -  ${position} of ${total} is highlighted`
        : null;
      if (this.index === null && this.type === 'autocomplete') {
        selectionText = this.items.length
          ? `${this.items.length} result${this.items.length !== 1 ? 's' : ''} available`
          : 'No search results available';
      }
      this.statusText = `${selectionText || ending}`;
      this._debounce = null;
    }, 1400);
  }
  render() {
    if (!this._isMobile &&
      this._dialog &&
      this.itemsPerPage &&
      this.itemsPerPage > 0 &&
      this.items.length > this.itemsPerPage) {
      this._dialog.style.maxHeight = 42 * (this.itemsPerPage + 0.5) + 60 + 'px';
      this._list.style.maxHeight = 42 * (this.itemsPerPage + 0.5) + 'px';
    }
    return (h(Host, null, h("slot", { name: "default" }), h("div", { class: "dummy", ref: (el) => (this._dummyElement = el) }), h("dialog", { tabindex: "-1", ref: (el) => (this._dialog = el), class: { mobile: this._isMobile }, onCancel: () => this.close() }, h("div", { onClick: (event) => event.stopPropagation() }, h("div", { id: 'announce-' + this.hostId, class: "visuallyhidden", "aria-live": "polite", "aria-atomic": "true" }, this.statusText), h("div", { class: "input-top-wrapper" }, h("slot", { name: "input-top" })), h("ul", { ref: (el) => (this._list = el), id: `${this.hostId}--results`, role: "listbox", "aria-expanded": this.isOpen.toString(), class: { active: this.isOpen, mobile: this._isMobile }, tabindex: "-1" }, this.renderedList), h("div", { class: {
        active: this._openedOnTop,
        'input-bottom-wrapper': true,
      } }, h("slot", { name: "input-bottom" }))))));
  }
  get el() { return this; }
  static get watchers() { return {
    "items": ["optionsWatcher"],
    "isOpen": ["stateWatcher"],
    "index": ["handleIndexChange"]
  }; }
  static get style() { return cDropdownCss; }
}, [1, "c-dropdown", {
    "itemsPerPage": [2, "items-per-page"],
    "parent": [16],
    "items": [16],
    "index": [2],
    "hostId": [1, "id"],
    "type": [1],
    "itemType": [1, "item-type"],
    "renderedList": [32],
    "isOpen": [32],
    "statusText": [32],
    "setStatusText": [64],
    "focusItem": [64],
    "open": [64],
    "close": [64],
    "selectItem": [64],
    "updateList": [64]
  }, undefined, {
    "items": ["optionsWatcher"],
    "isOpen": ["stateWatcher"],
    "index": ["handleIndexChange"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-dropdown", "c-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "c-dropdown":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CDropdown);
      }
      break;
    case "c-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { CDropdown as C, defineCustomElement as d };

//# sourceMappingURL=c-dropdown2.js.map