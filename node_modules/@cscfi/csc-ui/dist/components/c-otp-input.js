import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './c-message2.js';

const cOtpInputCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-otp-input-border-color:var(--c-otp-input-border-color, var(--c-tertiary-500));--_c-otp-input-border-color-active:var(--c-otp-input-border-color-active, var(--c-primary-600));--_c-otp-input-height:var(--c-otp-input-height, 56px);--_c-otp-input-width:var(--c-otp-input-width, 42px);--_c-otp-input-font-size:var(--c-otp-input-font-size, 24px);--_c-otp-input-text-color:var(--c-otp-input-text-color, var(--c-text-body));--_c-otp-input-border-width:1px;display:block}:host(.error){--_c-otp-input-border-color:var(--c-error-600);--_c-otp-input-border-color-active:var(--c-error-600)}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.c-otp-input{backface-visibility:hidden;display:inline-grid;gap:8px;grid-auto-columns:minmax(auto, var(--_c-otp-input-width));grid-auto-flow:column;margin-bottom:8px;transform:translate3d(0, 0, 0)}.c-otp-input--hide-details{margin-bottom:0}.c-otp-input input{border-radius:4px;border:none;box-shadow:inset 0 0 0 var(--_c-otp-input-border-width) var(--_c-otp-input-border-color);color:var(--_c-otp-input-text-color);font-size:var(--_c-otp-input-font-size);height:var(--_c-otp-input-height);max-width:var(--_c-otp-input-width);min-width:24px;text-align:center;width:100%}.c-otp-input input:focus{--_c-otp-input-border-width:2px;--_c-otp-input-border-color:var(--_c-otp-input-border-color-active);outline:none}.c-otp-input c-message{grid-column:1/span var(--_c-otp-input-count);grid-row:2}";

const COtpInput$1 = proxyCustomElement(class COtpInput extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.changeValue = createEvent(this, "changeValue", 3);
    this.completion = createEvent(this, "completion", 3);
    this.internals = this.attachInternals();
    this._backSpacePressed = false;
    this._debounce = null;
    this._isPasting = false;
    this._inputs = new Array(this.length).fill(null);
    this.hideDetails = false;
    this.hint = '';
    this.elementId = undefined;
    this.length = 6;
    this.valid = true;
    this.validation = 'Required field';
    this.value = undefined;
    this.statusText = '';
  }
  async reset() {
    this.value = '';
    this._handleValueChange(this.value, true);
    this.internals.setFormValue(this.value);
  }
  onValidationMessageChange() {
    this._updateStatusText();
  }
  onValueChange(value) {
    this._handleValueChange(value);
    this._updateStatusText();
  }
  _emitValue() {
    requestAnimationFrame(() => {
      this.value = [...this._inputs].map((input) => input.value).join('');
      const isFullyFilled = this.value.length === this.length;
      this.changeValue.emit(isFullyFilled ? this.value : null);
      if (isFullyFilled) {
        this.completion.emit(this.value || null);
      }
      this.internals.setFormValue(this.value);
      this._updateStatusText();
    });
  }
  _getElements(event) {
    const target = event.target;
    const nextElement = target.nextElementSibling;
    const previousElement = target.previousElementSibling;
    return { target, nextElement, previousElement };
  }
  _onFocus(index) {
    this._inputs[index].select();
  }
  _onKeyDown(event) {
    this._backSpacePressed = false;
    const { target, previousElement } = this._getElements(event);
    if (event.key === 'Backspace') {
      this._backSpacePressed = true;
      if (previousElement && !target.value) {
        previousElement.focus();
      }
      this._emitValue();
    }
  }
  get id() {
    return this.elementId || `c-otp-input--${COtpInput._uniqueId}`;
  }
  _onInput(event) {
    const { target, nextElement, previousElement } = this._getElements(event);
    if (isNaN(+target.value)) {
      event.preventDefault();
      target.value = null;
      return;
    }
    if (this._isPasting) {
      this._isPasting = false;
      return;
    }
    if (this._backSpacePressed) {
      return;
    }
    if (event.data) {
      nextElement === null || nextElement === void 0 ? void 0 : nextElement.focus();
    }
    else {
      previousElement === null || previousElement === void 0 ? void 0 : previousElement.focus();
    }
    this._emitValue();
  }
  _onPaste(event) {
    event.preventDefault();
    const pasteData = event.clipboardData.getData('text');
    if (isNaN(+pasteData)) {
      return;
    }
    this._isPasting = true;
    for (const [index, value] of pasteData.split('').entries()) {
      if (index >= this._inputs.length) {
        continue;
      }
      this._inputs[index].value = null;
      this._inputs[index].value = value;
    }
    const nextElementIndex = Math.min(this.length, pasteData.length) - 1;
    requestAnimationFrame(() => {
      this._inputs[nextElementIndex].focus();
      this._emitValue();
    });
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      const value = [...this._inputs].map((input) => input.value).join('');
      this.statusText = this.valid ? '' : `Error: ${this.validation} `;
      this.statusText += `Currently entered - ${!value.length ? 'nothing' : value.split('').join(' - ')}`;
      this.statusText = this.statusText.trim();
      this._debounce = null;
    }, 1400);
  }
  _handleValueChange(value, forceEmpty = false) {
    if (!value && !forceEmpty)
      return;
    const digits = value.split('');
    this._inputs.map((input, index) => (input.value = digits[index] || ''));
    this.internals.setFormValue(value);
  }
  _renderInput(index) {
    return (h("input", { id: `${this.id}--input-${index + 1}`, ref: (el) => (this._inputs[index] = el), "aria-label": `Enter code - digit number - ${index + 1} of ${this.length}`, type: "tel", maxlength: "1", onFocus: () => this._onFocus(index), onInput: (event) => this._onInput(event), onKeyDown: (event) => this._onKeyDown(event), onPaste: (event) => index === 0 && this._onPaste(event) }));
  }
  componentWillLoad() {
    COtpInput._uniqueId += 1;
  }
  componentDidLoad() {
    this._handleValueChange(this.value);
    this.internals.setFormValue(this.value);
  }
  render() {
    const classes = {
      'c-otp-input': true,
      'c-otp-input--hide-details': this.hideDetails,
    };
    return (h(Host, { id: this.id, style: { '--_c-otp-input-count': this.length.toString() }, class: { error: !this.valid } }, h("div", { id: 'announce-' + this.id, class: "visuallyhidden", "aria-live": "polite", "aria-atomic": "true" }, this.statusText), h("div", { class: classes }, new Array(this.length)
      .fill(0)
      .map((_, index) => this._renderInput(index)), h("c-message", { hint: this.hint, inputId: this.elementId, valid: this.valid, validation: this.validation }))));
  }
  static get formAssociated() { return true; }
  static get watchers() { return {
    "validation": ["onValidationMessageChange"],
    "value": ["onValueChange"]
  }; }
  static get style() { return cOtpInputCss; }
}, [65, "c-otp-input", {
    "hideDetails": [4, "hide-details"],
    "hint": [1],
    "elementId": [1, "id"],
    "length": [2],
    "valid": [4],
    "validation": [1],
    "value": [1025],
    "statusText": [32],
    "reset": [64]
  }, undefined, {
    "validation": ["onValidationMessageChange"],
    "value": ["onValueChange"]
  }]);
COtpInput$1._uniqueId = 0;
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-otp-input", "c-message"];
  components.forEach(tagName => { switch (tagName) {
    case "c-otp-input":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, COtpInput$1);
      }
      break;
    case "c-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const COtpInput = COtpInput$1;
const defineCustomElement = defineCustomElement$1;

export { COtpInput, defineCustomElement };

//# sourceMappingURL=c-otp-input.js.map