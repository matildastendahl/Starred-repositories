import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { p as mdiArrowRight } from './mdi.js';
import { d as defineCustomElement$6 } from './c-badge2.js';
import { d as defineCustomElement$5 } from './c-icon2.js';
import { d as defineCustomElement$4 } from './c-icon-button2.js';
import { d as defineCustomElement$3 } from './c-ripple2.js';
import { d as defineCustomElement$2 } from './c-spinner2.js';

const cSideNavigationCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-side-navigation-background-color:var(\n    --c-side-navigation-background-color,\n    var(--c-primary-600)\n  );--_c-side-navigation-overlay-color:var(\n    --c-side-navigation-overlay-color,\n    rgba(var(--c-black), 0.5)\n  )}:host(.autoheight){height:calc(100vh - 60px);overflow-y:auto;overflow-x:hidden}:host(.desktop){background-color:var(--_c-side-navigation-background-color);display:flex;min-width:clamp(300px, 20vw, 340px)}.c-side-navigation{background-color:var(--_c-side-navigation-background-color);display:flex;flex-flow:column nowrap;flex:1;gap:4px;min-height:fit-content;padding:24px 0 24px 24px;position:relative;transition:transform 0.3s ease;width:100%;z-index:8}.c-side-navigation__content{display:flex;flex-direction:column;flex:1 2 260px;width:320px}.c-side-navigation__content--mobile{height:100vh;max-width:320px;overflow-y:scroll;position:fixed;right:0;top:0;transition:transform 0.2s cubic-bezier(0.25, 0.8, 0.5, 1);transform:translateX(0%);z-index:999}.c-side-navigation__content--mobile.c-side-navigation__content--hidden{transform:translateX(100%)}.c-side-navigation__content--mobile>nav{min-height:auto;padding-top:0}.c-side-navigation__burger{background-color:var(--_c-side-navigation-background-color);display:flex;justify-content:flex-end;padding:8px 16px}.c-side-navigation ul{display:flex;flex-flow:column nowrap;gap:8px;list-style:none;margin:0;padding:0}.autoheight>nav{height:calc(100vh - 60px);overflow-x:hidden;overflow-y:auto}.vertical-spacer{flex:1;margin-bottom:8px}.c-overlay{background:var(--_c-side-navigation-overlay-color);backdrop-filter:blur(4px);inset:0;position:fixed;z-index:998}@keyframes fade-in{0%{opacity:0}100%{opacity:1}}.c-fade-in{animation-duration:0.5s;animation-iteration-count:1;animation-name:fade-in;z-index:997}c-side-navigation-item,c-sub-navigation-item{display:contents}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}";

const CSideNavigation$1 = proxyCustomElement(class CSideNavigation extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.mobile = undefined;
    this.menuVisible = false;
  }
  handleChange(event) {
    const slotted = this.host.querySelectorAll('c-side-navigation-item');
    const target = event.target;
    const { active } = target;
    slotted.forEach((item) => {
      if (item.querySelector('c-sub-navigation-item[slot="sub-item"]')) {
        item.active = false;
      }
    });
    if (target.querySelector('[slot="sub-item"]')) {
      target.active = !active;
    }
    else {
      target.active = true;
    }
  }
  _assignSubItemSlots() {
    const subItems = this.host.querySelectorAll('c-sub-navigation-item');
    Array.from(subItems).forEach((item) => {
      item.setAttribute('slot', 'sub-item');
    });
  }
  componentWillLoad() {
    this._assignSubItemSlots();
  }
  componentDidLoad() {
    const el = document.querySelector('body');
    ['click', 'keyup'].forEach((eventType) => {
      el.addEventListener(eventType, (e) => {
        if (e.target.matches('c-navigation-button')) {
          if (eventType === 'click') {
            this.menuVisible = !this.menuVisible;
          }
          else if (e instanceof KeyboardEvent && e.key === 'Enter') {
            this.menuVisible = !this.menuVisible;
          }
        }
      });
    });
  }
  _closeMenu() {
    this.menuVisible = false;
  }
  render() {
    const classes = {
      'c-side-navigation': true,
      'hide-menu': !this.menuVisible,
      mobile: !!this.mobile,
      desktop: !this.mobile,
    };
    const containerClasses = {
      'c-side-navigation__content': true,
      'c-side-navigation__content--hidden': !this.menuVisible,
      'c-side-navigation__content--mobile': !!this.mobile,
      'c-side-navigation__content--desktop': !this.mobile,
    };
    return (h(Host, { class: { desktop: !this.mobile } }, h("div", { class: containerClasses }, this.mobile && (h("div", { class: "c-side-navigation__burger" }, h("c-icon-button", { inverted: true, text: true, onClick: () => this._closeMenu() }, h("span", { class: "visuallyhidden" }, "Close sidemenu"), h("c-icon", { path: mdiArrowRight })))), h("nav", { class: classes, role: "menubar" }, h("slot", null), h("div", { class: "vertical-spacer" }), h("slot", { name: "bottom" }))), this.menuVisible && this.mobile && (h("div", { class: "c-overlay c-fade-in", onClick: () => this._closeMenu() }))));
  }
  get host() { return this; }
  static get style() { return cSideNavigationCss; }
}, [1, "c-side-navigation", {
    "mobile": [4],
    "menuVisible": [1028, "menu-visible"]
  }, [[0, "itemChange", "handleChange"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-side-navigation", "c-badge", "c-icon", "c-icon-button", "c-ripple", "c-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "c-side-navigation":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CSideNavigation$1);
      }
      break;
    case "c-badge":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "c-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "c-icon-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "c-ripple":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "c-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const CSideNavigation = CSideNavigation$1;
const defineCustomElement = defineCustomElement$1;

export { CSideNavigation, defineCustomElement };

//# sourceMappingURL=c-side-navigation.js.map