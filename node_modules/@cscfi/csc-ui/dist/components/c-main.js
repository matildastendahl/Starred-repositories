import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const cMainCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-main){--_c-main-background-color:var(--c-main-background-color, var(--c-primary-200));--_c-main-text-color:var(--c-main-text-color, var(--c-text-body));background:var(--_c-main-background-color);color:var(--_c-main-text-color);display:flex;flex-direction:column;height:100vh}:host(c-main) ::slotted(*){color:var(--_c-main-text-color)}:host(c-main) main.dashboard{display:grid;grid-template:\"toolbar toolbar\" auto \"sidenav page\" 1fr/auto 1fr;gap:0}:host(c-main) main.dashboard ::slotted(c-toolbar){grid-area:toolbar}:host(c-main) main.dashboard ::slotted(c-page){grid-area:page}:host(c-main) main.dashboard ::slotted(c-side-navigation){grid-area:sidenav}*,::after,::before,body{box-sizing:border-box;margin:0}";

const CMain$1 = proxyCustomElement(class CMain extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.disableLayout = false;
  }
  render() {
    return (h("main", { class: { dashboard: !this.disableLayout } }, h("slot", null)));
  }
  static get style() { return cMainCss; }
}, [1, "c-main", {
    "disableLayout": [4, "disable-layout"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-main"];
  components.forEach(tagName => { switch (tagName) {
    case "c-main":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CMain$1);
      }
      break;
  } });
}

const CMain = CMain$1;
const defineCustomElement = defineCustomElement$1;

export { CMain, defineCustomElement };

//# sourceMappingURL=c-main.js.map