{"file":"c-card.js","mappings":";;;;;;;;AAAA,MAAM,QAAQ,GAAG,iiCAAiiC;;MCqBriCA,OAAK;;;;;sBAIK,KAAK;wBAEF,KAAK;;EAIrB,iBAAiB;IACvB,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;GACxC;EAEO,aAAa;;IACnB,IAAI,QAAQ,CAAC,iBAAiB,EAAE;MAC9B,IAAI,CAAC,cAAc,EAAE,CAAC;MAEtB,OAAO;KACR;IAED,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAE9B,MAAM,YAAY,GAChB,MAAA,MAAA,IAAI,CAAC,IAAI,CAAC,aAAa,0CAAE,UAAU,0CAAE,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAEvE,IAAI,YAAY,EAAE;MACf,YAA+B,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY;UAC9D,OAAO;UACP,MAAM,CAAC;KACZ;GACF;EAED,gBAAgB;IACd,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAEtD,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE;MAC9B,KAAK,CAAC,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC;KAClC;IAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,CACxB,kBAAkB,EAClB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAClC,CAAC;GACH;EAED,oBAAoB;IAClB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAC3B,kBAAkB,EAClB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAClC,CAAC;GACH;EAMD,MAAM,cAAc;;IAClB,IAAI,CAAC,QAAQ,CAAC,iBAAiB;MAAE,OAAO;IAExC,QAAQ,CAAC,cAAc,EAAE,CAAC;IAE1B,MAAM,YAAY,GAChB,MAAA,MAAA,IAAI,CAAC,IAAI,CAAC,aAAa,0CAAE,UAAU,0CAAE,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAEvE,IAAI,YAAY,EAAE;MACf,YAA+B,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;KACzD;GACF;EAMD,MAAM,eAAe;IACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;GAC1B;EAED,MAAM;IACJ,MAAM,WAAW,GAAG;MAClB,QAAQ,EAAE,IAAI;MACd,oBAAoB,EAAE,IAAI,CAAC,YAAY;KACxC,CAAC;IAEF,QACE,EAAC,IAAI,IAAC,KAAK,EAAE,WAAW,IACtB,mBACG,IAAI,CAAC,UAAU,KACd,oCACc,MAAM,EAClB,KAAK,EAAC,2BAA2B,EACjC,KAAK,EAAE,IAAI,CAAC,YAAY,GAAG,iBAAiB,GAAG,kBAAkB,EACjE,IAAI,QACJ,OAAO,EAAE,MAAM,IAAI,CAAC,aAAa,EAAE,IAEnC,cACE,IAAI,EAAE,IAAI,CAAC,YAAY,GAAG,iBAAiB,GAAG,aAAa,GAC3D,CACY,CACjB,EACD,eAAa,CACL,CACL,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["CCard"],"sources":["src/components/c-card/c-card.scss?tag=c-card&encapsulation=shadow","src/components/c-card/c-card.tsx"],"sourcesContent":[":host(c-card) {\n  /**\n   * @prop --c-card-gap: Card column gap / padding\n   * @prop --c-card-background-color: Card background color\n   */\n  --_c-card-gap: var(--c-card-gap, clamp(1rem, 2vw, 1.5rem));\n  --_c-card-background-color: var(--c-card-background-color, var(--c-white));\n\n  display: flex;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.15) 0 10px 20px, rgba(0, 0, 0, 0.2) 0 5px 5px;\n  padding-block: var(--_c-card-gap);\n  position: relative;\n  background-color: var(--_c-card-background-color);\n\n  article {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: var(--_c-card-gap);\n    max-width: 100%;\n  }\n}\n\n:host(.c-card--fullscreen) {\n  --c-icon-button-text-background-color: var(--c-white);\n\n  overflow: auto;\n\n  .c-card {\n    &__fullscreen-toggle {\n      position: fixed;\n\n      @-moz-document url-prefix() {\n        position: absolute;\n      }\n    }\n  }\n}\n\n::slotted(c-loader) {\n  border-radius: 6px;\n}\n\n.c-card {\n  &__fullscreen-toggle {\n    position: absolute;\n    right: calc(var(--_c-card-gap) - 8px);\n    top: calc(var(--_c-card-gap) - 8px);\n  }\n}\n","import { mdiFullscreen, mdiFullscreenExit } from '@mdi/js';\nimport {\n  Component,\n  Element,\n  Host,\n  h,\n  Prop,\n  State,\n  Method,\n} from '@stencil/core';\n\n/**\n * @group Cards\n * @slot Default slot - Card components\n */\n@Component({\n  tag: 'c-card',\n  styleUrl: 'c-card.scss',\n  shadow: true,\n  assetsDirs: ['assets'],\n})\nexport class CCard {\n  /**\n   * Enable the fullscreen toggle button\n   */\n  @Prop() fullscreen = false;\n\n  @State() isFullscreen = false;\n\n  @Element() host: HTMLCCardElement;\n\n  private _toggleFullscreen() {\n    this.isFullscreen = !this.isFullscreen;\n  }\n\n  private _onFullscreen() {\n    if (document.fullscreenElement) {\n      this.exitFullscreen();\n\n      return;\n    }\n\n    this.host.requestFullscreen();\n\n    const modalWrapper =\n      this.host.parentElement?.shadowRoot?.querySelector('.modal-wrapper');\n\n    if (modalWrapper) {\n      (modalWrapper as HTMLDivElement).style.display = this.isFullscreen\n        ? 'block'\n        : 'flex';\n    }\n  }\n\n  componentDidLoad() {\n    const title = this.host.querySelector('c-card-title');\n\n    if (!!title && this.fullscreen) {\n      title.style.marginRight = '40px';\n    }\n\n    this.host.addEventListener(\n      'fullscreenchange',\n      this._toggleFullscreen.bind(this),\n    );\n  }\n\n  disconnectedCallback() {\n    this.host.removeEventListener(\n      'fullscreenchange',\n      this._toggleFullscreen.bind(this),\n    );\n  }\n\n  /**\n   * Exit fullscreen from the outside\n   */\n  @Method()\n  async exitFullscreen() {\n    if (!document.fullscreenElement) return;\n\n    document.exitFullscreen();\n\n    const modalWrapper =\n      this.host.parentElement?.shadowRoot?.querySelector('.modal-wrapper');\n\n    if (modalWrapper) {\n      (modalWrapper as HTMLDivElement).style.display = 'flex';\n    }\n  }\n\n  /**\n   * Enter fullscreen from the outside\n   */\n  @Method()\n  async enterFullscreen() {\n    this.isFullscreen = true;\n  }\n\n  render() {\n    const hostClasses = {\n      'c-card': true,\n      'c-card--fullscreen': this.isFullscreen,\n    };\n\n    return (\n      <Host class={hostClasses}>\n        <article>\n          {this.fullscreen && (\n            <c-icon-button\n              aria-hidden=\"true\"\n              class=\"c-card__fullscreen-toggle\"\n              title={this.isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen'}\n              text\n              onClick={() => this._onFullscreen()}\n            >\n              <c-icon\n                path={this.isFullscreen ? mdiFullscreenExit : mdiFullscreen}\n              />\n            </c-icon-button>\n          )}\n          <slot></slot>\n        </article>\n      </Host>\n    );\n  }\n}\n"],"version":3}