import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const cBadgeCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-badge-background-color:var(--c-badge-background-color, var(--c-warning-600));--_c-badge-text-color:var(--c-badge-text-color, var(--c-white));--_c-badge-border-color:var(--c-badge-border-color, var(--c-white));align-items:center;background-color:var(--_c-badge-background-color);border-radius:16px;box-shadow:0 0 0 2px var(--_c-badge-border-color);color:var(--_c-badge-text-color);display:flex;font-size:12px;height:16px;justify-content:center;justify-items:center;line-height:1;min-width:16px;padding:0 4px;pointer-events:none;position:absolute;right:-6px;top:-6px;z-index:2}";

const CBadge = proxyCustomElement(class CBadge extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
  }
  render() {
    return (h(Host, { class: "c-badge" }, h("slot", null)));
  }
  static get style() { return cBadgeCss; }
}, [1, "c-badge"]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-badge"];
  components.forEach(tagName => { switch (tagName) {
    case "c-badge":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CBadge);
      }
      break;
  } });
}

export { CBadge as C, defineCustomElement as d };

//# sourceMappingURL=c-badge2.js.map