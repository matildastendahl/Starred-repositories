import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const cListCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}.c-list{display:grid;gap:2px}";

const CList$1 = proxyCustomElement(class CList extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.disabled = false;
  }
  onDisabledChange(disabled) {
    this._items.forEach((item) => {
      const isDisabled = item.hasAttribute('disabled') && !('disabled' in item.dataset);
      if (!isDisabled) {
        item.disabled = !!disabled;
        item.disabledByParent = !!disabled;
      }
    });
  }
  get _items() {
    return Array.from(this.el.querySelectorAll('c-list-item'));
  }
  componentDidLoad() {
    this.onDisabledChange(this.disabled);
  }
  render() {
    const classes = {
      'c-list': true,
      'c-list--disabled': this.disabled,
    };
    return h(Host, { role: "list", class: classes });
  }
  get el() { return this; }
  static get watchers() { return {
    "disabled": ["onDisabledChange"]
  }; }
  static get style() { return cListCss; }
}, [0, "c-list", {
    "disabled": [4]
  }, undefined, {
    "disabled": ["onDisabledChange"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-list"];
  components.forEach(tagName => { switch (tagName) {
    case "c-list":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CList$1);
      }
      break;
  } });
}

const CList = CList$1;
const defineCustomElement = defineCustomElement$1;

export { CList, defineCustomElement };

//# sourceMappingURL=c-list.js.map