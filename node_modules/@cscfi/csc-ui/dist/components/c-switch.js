import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

const cSwitchCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-switch){--_c-switch-border-color:var(--c-switch-border-color, var(--c-tertiary-600));--_c-switch-handle-color:var(--c-switch-handle-color, var(--c-tertiary-600));--_c-switch-slider-color:var(--c-switch-slider-color, var(--c-transparent));--_c-switch-border-color-disabled:var(--c-switch-border-color-disabled, var(--c-transparent));--_c-switch-handle-color-disabled:var(--c-switch-handle-color-disabled, var(--c-tertiary-500));--_c-switch-slider-color-disabled:var(--c-switch-slider-color-disabled, var(--c-tertiary-200));--_c-switch-border-color-active:var(--c-switch-border-color-active, var(--c-primary-600));--_c-switch-handle-color-active:var(--c-switch-handle-color-active, var(--c-white));--_c-switch-slider-color-active:var(--c-switch-slider-color-active, var(--c-primary-600));--_c-switch-border-color-active-disabled:var(--c-switch-border-color-active-disabled, var(--c-tertiary-400));--_c-switch-handle-color-active-disabled:var(--c-switch-handle-color-active-disabled, var(--c-white));--_c-switch-slider-color-active-disabled:var(--c-switch-slider-color-active-disabled, var(--c-tertiary-400));display:inline-block}.c-switch{--_c-switch-handle-margin:5px;--_c-switch-pointer:pointer;--_c-switch-height:22px;--_c-switch-width:44px;--_c-switch-handle-size:calc(var(--_c-switch-height) - 2 * var(--_c-switch-handle-margin));--_c-switch-handle-position-active:calc(\n    var(--_c-switch-width) - var(--_c-switch-handle-size) - 2 * var(--_c-switch-handle-margin)\n  );backface-visibility:hidden;transform:translate3d(0, 0, 0);display:inline-grid;height:var(--_c-switch-height);position:relative;grid-template-columns:1fr;gap:12px;align-items:center}.c-switch--disabled{--_c-switch-pointer:default;--_c-switch-handle-color:var(--_c-switch-handle-color-disabled);--_c-switch-slider-color:var(--_c-switch-slider-color-disabled);--_c-switch-border-color:var(--_c-switch-border-color-disabled);--c-error-600:var(--c-tertiary-400);color:var(--c-tertiary-500)}.c-switch--label{grid-template-columns:var(--_c-switch-width) auto}.c-switch__label span.required{color:var(--c-error-600)}.c-switch__input{height:var(--_c-switch-height);position:relative;width:var(--_c-switch-width);align-self:start}.c-switch__slider{background-color:var(--_c-switch-slider-color);border-radius:var(--_c-switch-height);box-shadow:inset 0 0 0 2px var(--_c-switch-border-color);inset:0;cursor:var(--_c-switch-pointer);position:absolute;transform-origin:50% 50%;transition:0.3s cubic-bezier(0.25, 0.8, 0.5, 1)}.c-switch__slider::before{background-color:var(--_c-switch-handle-color);border-radius:50%;bottom:var(--_c-switch-handle-margin);content:\"\";height:var(--_c-switch-handle-size);left:var(--_c-switch-handle-margin);position:absolute;transition:0.3s cubic-bezier(0.25, 0.8, 0.5, 1);width:var(--_c-switch-handle-size)}.c-switch input{height:0;opacity:0;width:0}.c-switch input:checked+.c-switch__slider{--_c-switch-handle-color:var(--_c-switch-handle-color-active);--_c-switch-slider-color:var(--_c-switch-slider-color-active);--_c-switch-border-color:var(--_c-switch-border-color-active)}.c-switch input:checked+.c-switch__slider::before{transform:translateX(var(--_c-switch-handle-position-active))}.c-switch input:checked+.c-switch__slider--disabled{--_c-switch-handle-color:var(--_c-switch-handle-color-active-disabled);--_c-switch-slider-color:var(--_c-switch-slider-color-active-disabled);--_c-switch-border-color:var(--_c-switch-border-color-active-disabled)}.c-switch input:focus+.c-switch__slider{outline:none}.c-switch input:focus-visible+.c-switch__slider{outline:2px var(--c-primary-600) solid;outline-offset:2px}";

const CSwitch$1 = proxyCustomElement(class CSwitch extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.changeValue = createEvent(this, "changeValue", 3);
    this.internals = this.attachInternals();
    this._toggleState = () => {
      if (this.hostDisabled)
        return;
      this.checked = !this.checked;
      this.changeValue.emit(this.checked ? this.trueValue : this.falseValue);
      this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
    };
    this.checked = false;
    this.value = false;
    this.trueValue = true;
    this.falseValue = false;
    this.hostDisabled = false;
    this.hostId = undefined;
    this.required = false;
    this.hasLabel = false;
  }
  componentWillLoad() {
    this.checked = this.checked || this.value === this.trueValue;
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  componentDidLoad() {
    const slotted = this.host.childNodes;
    this.hasLabel = slotted && slotted.length > 0;
  }
  render() {
    const classes = {
      'c-switch': true,
      'c-switch--disabled': !!this.hostDisabled,
      'c-switch--label': this.hasLabel,
    };
    const sliderClasses = {
      'c-switch__slider': true,
      'c-switch__slider--disabled': !!this.hostDisabled,
    };
    return (h("label", { class: classes, htmlFor: this.hostId }, h("div", { class: "c-switch__input" }, h("input", { id: this.hostId, "aria-checked": this.checked.toString(), type: "checkbox", role: "switch", disabled: this.hostDisabled, checked: this.checked ? true : undefined, onChange: () => this._toggleState() }), h("span", { class: sliderClasses })), this.hasLabel ? (h("div", { class: "c-switch__label" }, h("slot", null), this.required && h("span", { class: "required" }, "\u00A0*"))) : null));
  }
  static get formAssociated() { return true; }
  get host() { return this; }
  static get style() { return cSwitchCss; }
}, [65, "c-switch", {
    "checked": [1028],
    "value": [8],
    "trueValue": [8, "true-value"],
    "falseValue": [8, "false-value"],
    "hostDisabled": [4, "disabled"],
    "hostId": [1, "id"],
    "required": [4],
    "hasLabel": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-switch"];
  components.forEach(tagName => { switch (tagName) {
    case "c-switch":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CSwitch$1);
      }
      break;
  } });
}

const CSwitch = CSwitch$1;
const defineCustomElement = defineCustomElement$1;

export { CSwitch, defineCustomElement };

//# sourceMappingURL=c-switch.js.map