import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './c-ripple2.js';

const cListItemCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-list-item){--_c-list-item-text-color:var(--c-list-item-text-color, var(--c-text-system));--_c-list-item-text-color-active:var(--c-list-item-text-color-active, var(--c-primary-600));--_c-list-item-background-color:var(--c-list-item-background-color, var(--c-transparent));--_c-list-item-background-color-active:var(--c-list-item-background-color-active, rgba(var(--c-primary-rgb), 0.1));--_c-list-item-background-color-hover:var(--c-list-item-background-color-hover, rgba(var(--c-primary-rgb), 0.2));--_c-list-item-outline-color:var(--c-list-item-outline-color, var(--c-primary-600));--_c-list-item-border-radius:4px;display:block;background-color:var(--_c-list-item-background-color);border-radius:var(--_c-list-item-border-radius)}:host(c-list-item) .c-list-item__content{align-items:center;border-radius:var(--_c-list-item-border-radius);color:var(--_c-list-item-text-color);display:flex;gap:16px;min-height:42px;padding:12px;width:100%;position:relative}:host(c-list-item) .c-list-item__content slot{display:grid;gap:4px;line-height:1.5}:host(c-list-item) .c-list-item__content slot:not([name]){flex:1}:host(c-list-item) .c-list-item__content:is(a){text-decoration:none;border-radius:var(--_c-list-item-border-radius)}:host(c-list-item:focus-visible){outline:2px var(--_c-list-item-outline-color) solid;outline-offset:2px}:host(c-list-item.c-list-item--hoverable:hover){background-color:var(--_c-list-item-background-color-hover)}:host(.c-list-item--active){--_c-list-item-text-color:var(--_c-list-item-text-color-active);background-color:var(--_c-list-item-background-color-active)}:host(.c-list-item--ripple){cursor:pointer}:host(.c-list-item--disabled){background-color:rgba(var(--c-tertiary-rgb), 0.05);cursor:default;opacity:0.75;pointer-events:none}:host(.c-list-item--disabled) ::slotted(c-icon){--c-icon-color:var(--c-tertiary-400) !important}";

const CListItem$1 = proxyCustomElement(class CListItem extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this._onClick = (event, center = false) => {
      if (this.disabled) {
        event.preventDefault();
        return;
      }
      if (!this.ripple)
        return;
      this.el.shadowRoot
        .querySelector('c-ripple')
        .createRipple(event, this.el, center);
    };
    this._onKeyup = (event) => {
      if ([' ', 'Enter'].includes(event.key)) {
        this._onClick(event, true);
      }
    };
    this.active = false;
    this.disabled = false;
    this.disabledByParent = false;
    this.hoverable = false;
    this.ripple = false;
    this.href = undefined;
    this.target = '_blank';
  }
  onActiveChange(active) {
    const title = this.el.querySelector('c-list-item-title');
    if (!title)
      return;
    title.active = active;
  }
  get _slots() {
    const hasPreSlot = !!this.el.querySelector('[slot="pre"]');
    const hasPostSlot = !!this.el.querySelector('[slot="post"]');
    return {
      pre: hasPreSlot,
      post: hasPostSlot,
    };
  }
  get _tabindex() {
    if (this.disabled)
      return -1;
    if (this.ripple && !this.href)
      return 0;
    return null;
  }
  render() {
    const Tag = !!this.href ? 'a' : 'div';
    const classes = {
      'c-list-item': true,
      'c-list-item--active': this.active,
      'c-list-item--disabled': this.disabled,
      'c-list-item--hoverable': this.ripple || !!this.href || this.hoverable,
      'c-list-item--ripple': this.ripple,
    };
    let linkAttributes = {};
    if (!!this.href) {
      linkAttributes = { href: this.href, target: this.target };
    }
    return (h(Host, Object.assign({ role: "listitem", "aria-disabled": (!!this.disabled).toString(), onClick: this._onClick, onKeyup: this._onKeyup, class: classes }, (!!this.disabled ? { disabled: 'true' } : {}), (!!this.disabledByParent ? { 'data-disabled': 'true' } : {}), ([0, -1].includes(this._tabindex)
      ? { tabindex: this._tabindex }
      : {})), h(Tag, Object.assign({}, linkAttributes, { class: "c-list-item__content" }), this._slots.pre && h("slot", { name: "pre" }), h("slot", null), this._slots.post && h("slot", { name: "post" }), this.ripple && h("c-ripple", null))));
  }
  get el() { return this; }
  static get watchers() { return {
    "active": ["onActiveChange"]
  }; }
  static get style() { return cListItemCss; }
}, [1, "c-list-item", {
    "active": [4],
    "disabled": [4],
    "disabledByParent": [4, "disabled-by-parent"],
    "hoverable": [4],
    "ripple": [4],
    "href": [1],
    "target": [1]
  }, undefined, {
    "active": ["onActiveChange"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-list-item", "c-ripple"];
  components.forEach(tagName => { switch (tagName) {
    case "c-list-item":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CListItem$1);
      }
      break;
    case "c-ripple":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const CListItem = CListItem$1;
const defineCustomElement = defineCustomElement$1;

export { CListItem, defineCustomElement };

//# sourceMappingURL=c-list-item.js.map