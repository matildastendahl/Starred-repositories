{"file":"c-ripple2.js","mappings":";;AAAA,MAAM,UAAU,GAAG,mjBAAmjB;;MCUzjB,OAAO;;;;;;EASlB,MAAM,YAAY,CAAC,KAAiB,EAAE,MAAmB,EAAE,MAAM,GAAG,KAAK;IAEvE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAEhD,MAAM,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC;IACjC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC;IACnC,MAAM,IAAI,GAAI,KAAK,CAAC,MAAsB,CAAC,qBAAqB,EAAE,CAAC;IAEnE,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CACxC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,YAAY,CAAC,CAClD,CAAC;IAEF,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;IACpC,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;IAEnC,MAAM,GAAG,GAAG,CAAC,GAAG,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC;IACxC,MAAM,IAAI,GAAG,CAAC,GAAG,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC;IAEzC,MAAM,cAAc,GAAG;MACrB,GAAG,EACD,YAAY,KAAK,MAAM;UACnB,KAAK;UACL,CAAC,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI;MAC/C,IAAI,EACF,YAAY,KAAK,KAAK;UAClB,KAAK;UACL,CAAC,CAAC,YAAY,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI;KAC/C,CAAC;IAEF,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;IACnC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC;IAErC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,GAAG,YAAY,GAAG,IAAI,CAAC;IACtD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,GAAG,YAAY,GAAG,IAAI,CAAC;IAEvD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,GAAG,cAAc,CAAC,GAAG,GAAG,GAAG,CAAC;IAClE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,GAAG,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC;IAErE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAE7C,UAAU,CAAC;MACT,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KACjD,EAAE,GAAG,CAAC,CAAC;GACT;EAEO,gBAAgB,CAAC,MAAc;IACrC,MAAM,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAE3C,OAAO,MAAM,GAAG,CAAC,CAAC;GACnB;EAED,MAAM;IACJ,QACE,EAAC,IAAI,mBAAa,MAAM,IACtB,WAAK,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC,EAAE,KAAK,EAAC,UAAU,GAAG,CAC5D,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/c-ripple/c-ripple.scss?tag=c-ripple&encapsulation=shadow","src/components/c-ripple/c-ripple.tsx"],"sourcesContent":[":host {\n  pointer-events: none;\n  user-select: none;\n  display: block;\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: inherit;\n  z-index: 1;\n}\n\n.c-ripple {\n  position: absolute;\n  pointer-events: none;\n  border-radius: 50%;\n  transform: scale(0);\n  background: currentColor;\n  opacity: 0;\n\n  &.animate {\n    animation: ripple 0.5s backwards linear;\n    opacity: 0.3;\n  }\n\n  @keyframes ripple {\n    100% {\n      opacity: 0;\n      transform: scale(5);\n    }\n  }\n}\n","import { Component, Element, Host, Method, h } from '@stencil/core';\n\n/**\n * @parent None\n */\n@Component({\n  tag: 'c-ripple',\n  styleUrl: 'c-ripple.scss',\n  shadow: true,\n})\nexport class CRipple {\n  @Element() el: HTMLCRippleElement;\n\n  private _rippleElement: HTMLDivElement;\n\n  /**\n   * Creates a ripple\n   */\n  @Method()\n  async createRipple(event: MouseEvent, parent: HTMLElement, center = false) {\n    // clear animation on repeat clicks\n    this._rippleElement.classList.remove('animate');\n\n    const width = parent.offsetWidth;\n    const height = parent.offsetHeight;\n    const rect = (event.target as HTMLElement).getBoundingClientRect();\n\n    const maxDimension = this._calculateHeight(\n      Math.max(parent.offsetWidth, parent.offsetHeight),\n    );\n\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    const top = y - maxDimension / 2 + 'px';\n    const left = x - maxDimension / 2 + 'px';\n\n    const centerPosition = {\n      top:\n        maxDimension === height\n          ? '0px'\n          : ((maxDimension - height) / 2) * -1 + 'px',\n      left:\n        maxDimension === width\n          ? '0px'\n          : ((maxDimension - width) / 2) * -1 + 'px',\n    };\n\n    this.el.style.width = width + 'px';\n    this.el.style.height = height + 'px';\n\n    this._rippleElement.style.width = maxDimension + 'px';\n    this._rippleElement.style.height = maxDimension + 'px';\n\n    this._rippleElement.style.top = center ? centerPosition.top : top;\n    this._rippleElement.style.left = center ? centerPosition.left : left;\n\n    this._rippleElement.classList.add('animate');\n\n    setTimeout(() => {\n      this._rippleElement.classList.remove('animate');\n    }, 500);\n  }\n\n  private _calculateHeight(height: number) {\n    const radius = (height / 2) * Math.sqrt(2);\n\n    return radius * 2;\n  }\n\n  render() {\n    return (\n      <Host aria-hidden=\"true\">\n        <div ref={(el) => (this._rippleElement = el)} class=\"c-ripple\" />\n      </Host>\n    );\n  }\n}\n"],"version":3}