import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { g as mdiFullscreenExit, h as mdiFullscreen } from './mdi.js';
import { d as defineCustomElement$6 } from './c-badge2.js';
import { d as defineCustomElement$5 } from './c-icon2.js';
import { d as defineCustomElement$4 } from './c-icon-button2.js';
import { d as defineCustomElement$3 } from './c-ripple2.js';
import { d as defineCustomElement$2 } from './c-spinner2.js';

const cCardCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-card){--_c-card-gap:var(--c-card-gap, clamp(1rem, 2vw, 1.5rem));--_c-card-background-color:var(--c-card-background-color, var(--c-white));display:flex;border-radius:6px;box-shadow:rgba(0, 0, 0, 0.15) 0 10px 20px, rgba(0, 0, 0, 0.2) 0 5px 5px;padding-block:var(--_c-card-gap);position:relative;background-color:var(--_c-card-background-color)}:host(c-card) article{display:flex;flex-direction:column;flex:1;gap:var(--_c-card-gap);max-width:100%}:host(.c-card--fullscreen){--c-icon-button-text-background-color:var(--c-white);overflow:auto}:host(.c-card--fullscreen) .c-card__fullscreen-toggle{position:fixed}@-moz-document url-prefix(){:host(.c-card--fullscreen) .c-card__fullscreen-toggle{position:absolute}}::slotted(c-loader){border-radius:6px}.c-card__fullscreen-toggle{position:absolute;right:calc(var(--_c-card-gap) - 8px);top:calc(var(--_c-card-gap) - 8px)}";

const CCard$1 = proxyCustomElement(class CCard extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.fullscreen = false;
    this.isFullscreen = false;
  }
  _toggleFullscreen() {
    this.isFullscreen = !this.isFullscreen;
  }
  _onFullscreen() {
    var _a, _b;
    if (document.fullscreenElement) {
      this.exitFullscreen();
      return;
    }
    this.host.requestFullscreen();
    const modalWrapper = (_b = (_a = this.host.parentElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.modal-wrapper');
    if (modalWrapper) {
      modalWrapper.style.display = this.isFullscreen
        ? 'block'
        : 'flex';
    }
  }
  componentDidLoad() {
    const title = this.host.querySelector('c-card-title');
    if (!!title && this.fullscreen) {
      title.style.marginRight = '40px';
    }
    this.host.addEventListener('fullscreenchange', this._toggleFullscreen.bind(this));
  }
  disconnectedCallback() {
    this.host.removeEventListener('fullscreenchange', this._toggleFullscreen.bind(this));
  }
  async exitFullscreen() {
    var _a, _b;
    if (!document.fullscreenElement)
      return;
    document.exitFullscreen();
    const modalWrapper = (_b = (_a = this.host.parentElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.modal-wrapper');
    if (modalWrapper) {
      modalWrapper.style.display = 'flex';
    }
  }
  async enterFullscreen() {
    this.isFullscreen = true;
  }
  render() {
    const hostClasses = {
      'c-card': true,
      'c-card--fullscreen': this.isFullscreen,
    };
    return (h(Host, { class: hostClasses }, h("article", null, this.fullscreen && (h("c-icon-button", { "aria-hidden": "true", class: "c-card__fullscreen-toggle", title: this.isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen', text: true, onClick: () => this._onFullscreen() }, h("c-icon", { path: this.isFullscreen ? mdiFullscreenExit : mdiFullscreen }))), h("slot", null))));
  }
  static get assetsDirs() { return ["assets"]; }
  get host() { return this; }
  static get style() { return cCardCss; }
}, [1, "c-card", {
    "fullscreen": [4],
    "isFullscreen": [32],
    "exitFullscreen": [64],
    "enterFullscreen": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-card", "c-badge", "c-icon", "c-icon-button", "c-ripple", "c-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "c-card":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CCard$1);
      }
      break;
    case "c-badge":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "c-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "c-icon-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "c-ripple":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "c-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const CCard = CCard$1;
const defineCustomElement = defineCustomElement$1;

export { CCard, defineCustomElement };

//# sourceMappingURL=c-card.js.map