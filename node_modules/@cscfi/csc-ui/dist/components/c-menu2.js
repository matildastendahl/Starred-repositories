import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { e as mdiChevronDown } from './mdi.js';
import { d as defineCustomElement$2 } from './c-icon2.js';
import { d as defineCustomElement$1 } from './c-menu-items2.js';

const cMenuCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-menu-text-color:var(--c-menu-text-color, var(--c-text-system));--_c-menu-text-color-active:var(\n    --c-menu-text-color-active,\n    var(--c-primary-600)\n  );--_c-menu-background-color-hover:var(\n    --c-menu-background-color-hover,\n    var(--c-primary-200)\n  );--_c-menu-outline-color:var(--c-menu-outline-color, var(--c-primary-600));--_c-menu-header-height:38px;--_c-menu-padding:0 14px;border-radius:4px;display:block;font-size:14px;position:relative;user-select:none;height:fit-content}:host button{background:none;border-radius:4px;border:none;color:var(--_c-menu-text-color);cursor:pointer;display:block;font-family:var(--c-font-family);margin:0;padding:var(--_c-menu-padding);position:relative;user-select:none}:host button:focus{outline:2px var(--_c-menu-outline-color) solid;outline-offset:2px}@supports selector(:focus-visible){:host button:focus{outline:none}}:host button:focus-visible{outline:2px var(--_c-menu-outline-color) solid;outline-offset:2px}:host button:hover{background-color:var(--_c-menu-background-color-hover)}:host .c-menu__icon{line-height:20px;transition:transform 0.25s}:host .c-menu__icon--rotated{transform:rotate(180deg)}:host .c-menu__header{display:flex;flex:1 1 auto;margin-left:0;align-items:center;gap:8px;height:var(--_c-menu-header-height)}:host(.c-menu--custom){--_c-menu-padding:0;--_c-menu-background-color-hover:transparent !important;background:transparent !important}:host(.c-menu--small){--_c-menu-header-height:32px}:host(.c-menu--active) c-icon,:host(:hover) c-icon{color:var(--_c-menu-text-color-active)}:host(.c-menu--no-hover){--_c-menu-background-color-hover:transparent !important}.c-menu-overlay{position:fixed;inset:0;pointer-events:none}.c-menu-overlay__content{position:relative;height:100%;width:100%}";

const CMenu = proxyCustomElement(class CMenu extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.items = [];
    this.contentClass = '';
    this.custom = false;
    this.small = false;
    this.flat = false;
    this.itemsPerPage = 6;
    this.menuItemsComponent = null;
    this.menuWrapperComponent = null;
    this.currentIndex = null;
    this.active = false;
  }
  handleKeyDown(ev) {
    const openKeys = ['ArrowDown', 'ArrowUp', 'Enter', ' '];
    if (!this.active && openKeys.includes(ev.key)) {
      ev.preventDefault();
      this.currentIndex = null;
      if (ev.key === 'ArrowDown') {
        this.currentIndex = 0;
      }
      if (ev.key === 'ArrowUp') {
        this.currentIndex = this.items.length - 1;
      }
      this._onClick();
    }
    if (ev.key === 'Escape') {
      this._hideMenu();
    }
  }
  _createWrapperElement() {
    const existingOverlay = document.querySelector('.c-menu-overlay__content');
    if (existingOverlay)
      return existingOverlay;
    const overlay = document.createElement('div');
    overlay.classList.add('c-menu-overlay');
    const overlayContent = document.createElement('div');
    overlayContent.classList.add('c-menu-overlay__content');
    overlay.appendChild(overlayContent);
    document.body.appendChild(overlay);
    return overlayContent;
  }
  _getNativeChild(parent = this.host) {
    let element = parent.shadowRoot.children[0];
    if (!!element.shadowRoot) {
      element = this._getNativeChild(element);
    }
    return element;
  }
  _addMenuItemsComponentListeners(height, width) {
    this.menuItemsComponent.onclose = () => {
      this._hideMenu();
      const element = this._getNativeChild();
      element.focus();
    };
    this.menuItemsComponent.addEventListener('open', (event) => this._onOpen(event, height, width), {
      once: true,
    });
  }
  _getHostPosition() {
    return this.host.getBoundingClientRect();
  }
  _hideMenu() {
    var _a;
    (_a = this.menuItemsComponent) === null || _a === void 0 ? void 0 : _a.remove();
    this.menuItemsComponent = null;
    this.active = false;
  }
  _onOpen(event, height, width) {
    window.requestAnimationFrame(() => {
      var _a, _b, _c;
      const { isInView, height: menuHeight, width: menuWidth } = event.detail;
      if (!isInView.y) {
        const posY = parseFloat(this.menuItemsComponent.style.top) - menuHeight - height;
        this.menuItemsComponent.style.top = `${posY}px`;
        this.menuItemsComponent.top = posY;
      }
      if (!isInView.x) {
        this.menuItemsComponent.style.left = `${parseFloat(this.menuItemsComponent.style.left) - menuWidth + width}px`;
      }
      this.active = true;
      this.menuItemsComponent.active = true;
      (_c = (_b = (_a = this.menuItemsComponent) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('ul')) === null || _c === void 0 ? void 0 : _c.focus();
    });
  }
  _onClick() {
    if (this.menuItemsComponent)
      return;
    const { bottom, left, width, height } = this._getHostPosition();
    this.menuItemsComponent = document.createElement('c-menu-items');
    this.menuItemsComponent.style.top = `${bottom}px`;
    this.menuItemsComponent.style.left = `${left}px`;
    this.menuItemsComponent.style.minWidth = `${width}px`;
    this.menuItemsComponent.parent = this.host;
    this.menuItemsComponent.items = this.items;
    this.menuItemsComponent.small = this.small;
    this.menuItemsComponent.itemsPerPage = this.itemsPerPage;
    this.menuItemsComponent.top = bottom;
    this.menuItemsComponent.id = `c-menu-items-${CMenu._uniqueId}`;
    this.menuItemsComponent.index = this.currentIndex;
    this.menuItemsComponent.setAttribute('tabindex', '-1');
    this.menuItemsComponent.setAttribute('role', 'listbox');
    if (this.contentClass) {
      this.menuItemsComponent.classList.add(this.contentClass);
    }
    this._addMenuItemsComponentListeners(height, width);
    this._createWrapperElement().appendChild(this.menuItemsComponent);
    window.setTimeout(() => {
      var _a, _b, _c, _d;
      (_d = (_c = (_b = (_a = this.menuItemsComponent) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.children[0]) === null || _c === void 0 ? void 0 : _c.children[0]) === null || _d === void 0 ? void 0 : _d.focus();
    }, 200);
  }
  componentWillLoad() {
    CMenu._uniqueId += 1;
  }
  disconnectedCallback() {
    this._hideMenu();
  }
  render() {
    const hostClasses = {
      'c-menu': true,
      'c-menu--custom': this.custom,
      'c-menu--active': this.active,
      'c-menu--no-hover': this.flat,
      'c-menu--small': this.small,
    };
    return (h(Host, { class: hostClasses }, h("button", { "aria-expanded": this.active.toString(), "aria-haspopup": "listbox", "aria-controls": `c-menu-items-${CMenu._uniqueId}`, class: {
        'c-menu-wrapper': !this.custom,
        custom: this.custom,
      }, tabindex: "0", type: "button", onClick: () => this._onClick() }, this.custom ? (h("slot", null)) : (h("div", { class: "c-menu__header" }, h("slot", null), h("c-icon", { path: mdiChevronDown, class: this.active
        ? 'c-menu__icon c-menu__icon--rotated'
        : 'c-menu__icon' }))))));
  }
  get host() { return this; }
  static get style() { return cMenuCss; }
}, [1, "c-menu", {
    "items": [16],
    "contentClass": [1, "content-class"],
    "custom": [4],
    "small": [4],
    "flat": [4],
    "itemsPerPage": [2, "items-per-page"],
    "menuItemsComponent": [32],
    "menuWrapperComponent": [32],
    "currentIndex": [32],
    "active": [32]
  }, [[2, "keydown", "handleKeyDown"]]]);
CMenu._uniqueId = 0;
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-menu", "c-icon", "c-menu-items"];
  components.forEach(tagName => { switch (tagName) {
    case "c-menu":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CMenu);
      }
      break;
    case "c-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "c-menu-items":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { CMenu as C, defineCustomElement as d };

//# sourceMappingURL=c-menu2.js.map