import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './c-message2.js';
import { d as defineCustomElement$1 } from './c-ripple2.js';

const cCheckboxCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-checkbox-background-color-hover:var(--c-checkbox-background-color-hover, rgba(var(--c-primary-rgb), 0.1));--_c-checkbox-color-active:var(--c-checkbox-color-active, var(--_c-checkbox-color));--_c-checkbox-color-disabled:var(--c-checkbox-color-disabled, var(--c-tertiary-500));--_c-checkbox-color:var(--c-checkbox-color, var(--c-primary-600));--_c-checkbox-color-error:var(--c-error-600)}.c-checkbox{position:relative;width:fit-content}.c-checkbox__label-content{padding-top:10px;text-align:left;user-select:none}.c-checkbox__label-content span.required{color:var(--c-error-600)}.c-checkbox--disabled{--_c-checkbox-color:var(--_c-checkbox-color-disabled);--c-error-600:var(--_c-checkbox-color);--_c-checkbox-color-active:var(--_c-checkbox-color-disabled);color:var(--_c-checkbox-color);opacity:0.75}.c-checkbox--disabled .c-checkbox__label{cursor:default}.c-checkbox--error{--_c-checkbox-color:var(--c-error-600);--_c-checkbox-color-active:var(--_c-checkbox-color-error);color:var(--_c-checkbox-color-error)}.c-checkbox input:focus{outline:none}.c-checkbox input:focus+.c-checkbox__label .ripple{outline:2px var(--_c-checkbox-color-active) solid}@supports selector(:focus-visible){.c-checkbox input:focus+.c-checkbox__label .ripple{outline:none}}.c-checkbox input:focus-visible+.c-checkbox__label .ripple{outline:2px var(--_c-checkbox-color-active) solid}.c-checkbox:not(.c-checkbox--disabled) .ripple:hover{background-color:var(--_c-checkbox-background-color-hover)}.c-checkbox .visuallyhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;width:1px}.c-checkbox input:checked+.c-checkbox__label .ripple::before{background:var(--_c-checkbox-color-active);border-color:var(--_c-checkbox-color-active)}.c-checkbox input:checked+.c-checkbox__label .path{stroke:#ffffff;fill:#ffffff;stroke-dashoffset:0;stroke-width:13;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}.c-checkbox__label{cursor:pointer;display:flex;gap:4px;position:relative;user-select:none}.c-checkbox__label svg{height:14px;left:14px;position:absolute;top:14px;width:14px}.c-checkbox__label--indeterminate .path{stroke-dasharray:0 !important;stroke-dashoffset:0 !important;stroke:transparent}.c-checkbox__label .ripple{border-radius:50%;color:var(--_c-checkbox-color-active);display:grid;height:42px;min-width:42px;overflow:hidden;place-content:center;position:relative;transform:translateZ(0);width:42px}.c-checkbox__label .ripple::before{border-radius:2px;border:2px solid var(--_c-checkbox-color);content:\"\";display:inline-block;height:18px;left:12px;position:absolute;top:12px;transition:all 0.25s ease-out;vertical-align:middle;width:18px}";

const CCheckbox = proxyCustomElement(class CCheckbox extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.changeValue = createEvent(this, "changeValue", 3);
    this.internals = this.attachInternals();
    this.checked = false;
    this.disabled = false;
    this.hideDetails = false;
    this.hint = '';
    this.hostId = undefined;
    this.indeterminate = false;
    this.label = '';
    this.required = false;
    this.valid = true;
    this.validation = 'Required field';
    this.value = false;
    this.trueValue = true;
    this.falseValue = false;
    this.hostName = undefined;
  }
  get _id() {
    return this.hostId || `checkbox_${CCheckbox._uniqueId}`;
  }
  onValueChange(value) {
    this.checked = this.trueValue === value;
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  handleKeyDown(event) {
    if (['Space'].includes(event.code)) {
      event.preventDefault();
      this._toggleState(event);
    }
  }
  componentWillLoad() {
    CCheckbox._uniqueId += 1;
    this.checked = this.checked || this.value === this.trueValue;
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  _toggleState(event) {
    if (this.disabled)
      return;
    this._rippleElement.createRipple(event, this._container, true);
    this.checked = !this.checked;
    this.changeValue.emit(this.checked ? this.trueValue : this.falseValue);
    this.internals.setFormValue(this.checked ? this.trueValue.toString() : this.falseValue.toString());
  }
  render() {
    const wrapperClasses = {
      'c-checkbox': true,
      'c-checkbox--disabled': this.disabled,
      'c-checkbox--error': !this.valid,
    };
    const labelClasses = {
      'c-checkbox__label': true,
      'c-checkbox__label--indeterminate': this.indeterminate,
    };
    const slotHasContent = !!this.el.childNodes.length;
    return (h(Host, null, h("div", { class: wrapperClasses }, h("input", Object.assign({ class: "visuallyhidden", id: "checkbox" }, (!!this.hostName ? { name: this.hostName } : {}), { type: "checkbox", "aria-checked": this.checked.toString(), "aria-disabled": this.disabled.toString(), checked: this.checked ? true : undefined, disabled: this.disabled, onChange: (event) => this._toggleState(event) })), h("label", { class: labelClasses, htmlFor: "checkbox" }, h("div", { class: "ripple", ref: (el) => (this._container = el) }, h("svg", { viewBox: "0 0 100 100" }, !this.indeterminate && this.checked && (h("path", { class: "path", d: "M 12 52 l 24 24 l 47 -47 l -3 -3 l -44 44 l -21 -21 l -3 3" })), this.indeterminate && (h("path", { class: "path", d: "M20 56 h60 v-8 h-60 z" }))), h("c-ripple", { ref: (el) => (this._rippleElement = el) })), (!!this.label || slotHasContent) && (h("div", { class: "c-checkbox__label-content" }, !!this.label ? this.label : h("slot", null), this.required && h("span", { class: "required" }, "\u00A0*"))))), !this.hideDetails && (h("c-message", { hint: this.hint, inputId: this._id, valid: this.valid, validation: this.validation }))));
  }
  static get formAssociated() { return true; }
  get el() { return this; }
  static get watchers() { return {
    "value": ["onValueChange"]
  }; }
  static get style() { return cCheckboxCss; }
}, [65, "c-checkbox", {
    "checked": [1028],
    "disabled": [4],
    "hideDetails": [4, "hide-details"],
    "hint": [1],
    "hostId": [1, "id"],
    "indeterminate": [4],
    "label": [1],
    "required": [4],
    "valid": [4],
    "validation": [1],
    "value": [8],
    "trueValue": [8, "true-value"],
    "falseValue": [8, "false-value"],
    "hostName": [1, "name"]
  }, [[1, "keydown", "handleKeyDown"]], {
    "value": ["onValueChange"]
  }]);
CCheckbox._uniqueId = 0;
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-checkbox", "c-message", "c-ripple"];
  components.forEach(tagName => { switch (tagName) {
    case "c-checkbox":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CCheckbox);
      }
      break;
    case "c-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "c-ripple":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { CCheckbox as C, defineCustomElement as d };

//# sourceMappingURL=c-checkbox2.js.map