import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const cTabButtonsCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-tab-buttons-background-color-active-hover:var(--c-tab-buttons-background-color-active-hover, var(--c-primary-400));--_c-tab-buttons-background-color-active:var(--c-tab-buttons-background-color-active, var(--c-primary-600));--_c-tab-buttons-text-color-active:var(--c-tab-buttons-text-color-active, var(--c-white));--_c-tab-buttons-background-color-hover:var(--c-tab-buttons-background-color-hover, var(--c-primary-200));--_c-tab-buttons-background-color:var(--c-tab-buttons-background-color, var(--c-white));--_c-tab-buttons-border-color:var(--c-tab-buttons-border-color, var(--c-primary-600));--_c-tab-buttons-text-color:var(--c-tab-buttons-text-color, var(--c-primary-600));--_c-tab-buttons-border-color-disabled:var(--c-tab-buttons-border-color-disabled, var(--c-tertiary-400));--_c-tab-buttons-border-radius:var(--c-tab-buttons-border-radius, 4px);background-color:var(--_c-tab-buttons-border-color);border-radius:var(--_c-tab-buttons-border-radius);box-shadow:0 0 0 2px var(--_c-tab-buttons-border-color);display:flex;flex-wrap:wrap;gap:2px;margin:2px}:host ::slotted(c-button){--c-button-background-color-hover:var(--_c-tab-buttons-background-color-active-hover);--c-button-background-color:var(--_c-tab-buttons-background-color-active);--c-button-text-color:var(--_c-tab-buttons-text-color-active);--_c-button-border-radius:0;--_c-button-min-width:auto;--_c-button-padding:0 8px;--_c-button-outline-offset:4px;flex-grow:1}:host ::slotted(c-button.c-button--outlined){--c-button-outlined-background-color-hover:var(--_c-tab-buttons-background-color-hover);--c-button-outlined-background-color:var(--_c-tab-buttons-background-color);--c-button-outlined-border-color:var(--_c-tab-buttons-border-color);--c-button-outlined-text-color:var(--_c-tab-buttons-text-color);box-shadow:none}:host ::slotted(c-button.c-button--outlined)::before,:host ::slotted(c-button.c-button--outlined)::after{background-color:#ffffff;border-radius:inherit;content:\"\";height:100%;left:0;position:absolute;top:0;transition:background-color 0.3s ease-in-out;width:100%;z-index:-1}:host ::slotted(c-button.c-button--outlined):hover{background-color:var(--c-tab-button-background-color)}:host ::slotted(c-button:first-child){--_c-button-border-radius:var(--_c-tab-buttons-border-radius) 0 0 var(--_c-tab-buttons-border-radius)}:host ::slotted(c-button:last-child){--_c-button-border-radius:0 var(--_c-tab-buttons-border-radius) var(--_c-tab-buttons-border-radius) 0}:host ::slotted(*){flex-grow:1}:host(.disabled){--_c-tab-buttons-border-color:var(--_c-tab-buttons-border-color-disabled) !important;pointer-events:none}:host(.c-tab-buttons) ::slotted(c-button:focus){outline:none}:host(.c-tab-buttons) ::slotted(c-button:focus-visible){outline:2px var(--_c-tab-buttons-border-color) solid;outline-offset:4px;z-index:1}";

const CTabButtons$1 = proxyCustomElement(class CTabButtons extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.changeValue = createEvent(this, "changeValue", 3);
    this._focusedTabValue = this.value;
    this.value = 0;
    this.mandatory = false;
    this.tabs = false;
    this.size = 'default';
    this.hostDisabled = false;
  }
  onValueChange(value) {
    var _a, _b;
    this.buttons.forEach((button) => {
      if (!button.disabled) {
        button.setAttribute('outlined', 'true');
      }
    });
    if (value !== null) {
      this.buttons.forEach((button) => {
        if (!button.disabled) {
          button.setAttribute('outlined', 'true');
        }
      });
      const button = this.buttons.find((btn) => btn.value === value) || this.buttons[value];
      if (button) {
        button.removeAttribute('outlined');
      }
    }
    this.changeValue.emit((_b = (_a = this.buttons[value]) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : value);
  }
  tabFocusHandler(event) {
    event.stopPropagation();
    this._focusedTabValue = event.detail;
  }
  handleKeyUp(event) {
    var _a, _b;
    event.stopPropagation();
    const isArrowLeft = event.key === 'ArrowLeft';
    const isArrowRight = event.key === 'ArrowRight';
    if (!isArrowRight && !isArrowLeft)
      return;
    const tabIndex = (_a = this._getTabIndex(this._focusedTabValue)) !== null && _a !== void 0 ? _a : +((_b = this.buttons[this._focusedTabValue]) === null || _b === void 0 ? void 0 : _b.dataset.index);
    const firstAvailableValue = this.availableValues.at(0);
    const lastAvailableValue = this.availableValues.at(-1);
    const isBeginning = this._focusedTabValue === firstAvailableValue;
    const isEnd = this._focusedTabValue === lastAvailableValue;
    const nextValue = isEnd
      ? firstAvailableValue
      : this.availableValues[tabIndex + 1];
    const previousValue = isBeginning
      ? lastAvailableValue
      : this.availableValues[tabIndex - 1];
    const value = isArrowLeft ? previousValue : nextValue;
    const item = this.buttons
      .find((button) => button.value === value || button.dataset.index === value)
      .shadowRoot.querySelector('button');
    requestAnimationFrame(() => {
      item === null || item === void 0 ? void 0 : item.focus();
    });
  }
  onTabChange(event) {
    if (!this.tabs)
      event.stopPropagation();
    const isActive = this.value !== null &&
      (this._isIndexBased
        ? +event.detail.value === +this.value
        : event.detail.value === this.value);
    if (this.mandatory && isActive) {
      return;
    }
    const nullValue = this._isIndexBased ? null : '';
    const value = this._isIndexBased ? +event.detail.value : event.detail.value;
    this.value = isActive ? nullValue : value;
  }
  get availableValues() {
    return this.buttons.map((button) => { var _a; return (_a = button.value) !== null && _a !== void 0 ? _a : button.dataset.index; });
  }
  get buttons() {
    return Array.from(this.el.querySelectorAll(':scope > c-button'));
  }
  _getTabIndex(value) {
    const index = this.availableValues.findIndex((buttonValue) => buttonValue === value);
    return index;
  }
  componentDidLoad() {
    this._isIndexBased = this.buttons.every((button) => typeof button.value === 'undefined');
    this.buttons.forEach((button, index) => {
      var _a;
      button.setAttribute('data-index', String(index));
      button.setAttribute('tabs', 'true');
      if (!button.disabled) {
        button.setAttribute('outlined', 'true');
        button.outlined = true;
      }
      button.disabled = this.hostDisabled || button.disabled;
      button.size = this.size;
      const isActive = this.value !== null &&
        (this._isIndexBased
          ? index === +this.value
          : button.value === this.value);
      (_a = button.shadowRoot
        .querySelector('button')) === null || _a === void 0 ? void 0 : _a.setAttribute('tabindex', isActive && !this.hostDisabled ? '0' : '-1');
      if (isActive) {
        button.removeAttribute('outlined');
      }
    });
  }
  render() {
    const classes = {
      'c-tab-buttons': true,
      disabled: this.hostDisabled,
    };
    return (h(Host, { class: classes }, h("slot", null)));
  }
  get el() { return this; }
  static get watchers() { return {
    "value": ["onValueChange"]
  }; }
  static get style() { return cTabButtonsCss; }
}, [1, "c-tab-buttons", {
    "value": [1032],
    "mandatory": [4],
    "tabs": [4],
    "size": [1],
    "hostDisabled": [4, "disabled"]
  }, [[1, "tabFocus", "tabFocusHandler"], [2, "keyup", "handleKeyUp"], [1, "tabChange", "onTabChange"]], {
    "value": ["onValueChange"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-tab-buttons"];
  components.forEach(tagName => { switch (tagName) {
    case "c-tab-buttons":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CTabButtons$1);
      }
      break;
  } });
}

const CTabButtons = CTabButtons$1;
const defineCustomElement = defineCustomElement$1;

export { CTabButtons, defineCustomElement };

//# sourceMappingURL=c-tab-buttons.js.map