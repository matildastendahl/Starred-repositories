import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { a as mdiAlert, b as mdiCloseCircle, c as mdiCheckCircle, d as mdiInformation } from './mdi.js';

const cAlertCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}.c-alert{--c-alert-color:var(--c-primary-600);display:grid;gap:16px;grid-template-columns:1fr;color:var(--c-alert-color);border:2px solid currentColor;border-left-width:12px;border-radius:6px;padding:12px}.c-alert--info,.c-alert--error,.c-alert--success,.c-alert--warning{grid-template-columns:auto 1fr}.c-alert--info{--c-alert-color:var(--c-info-600)}.c-alert--error{--c-alert-color:var(--c-error-600)}.c-alert--success{--c-alert-color:var(--c-success-600)}.c-alert--warning{--c-alert-color:var(--c-warning-600)}.c-alert__content{color:rgba(0, 0, 0, 0.87);display:grid;align-items:center;grid-template-columns:1fr;gap:8px}svg{fill:currentColor}::slotted(*[slot=title]){margin:0 !important;font-size:18px;font-weight:600;line-height:24px}";

const CAlert$1 = proxyCustomElement(class CAlert extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this._icons = {
      warning: mdiAlert,
      error: mdiCloseCircle,
      success: mdiCheckCircle,
      info: mdiInformation,
    };
    this.type = undefined;
  }
  render() {
    const classes = Object.assign({ 'c-alert': true }, (!!this.type && { [`c-alert--${this.type}`]: true }));
    return (h(Host, null, h("div", { class: classes }, !!this.type && (h("svg", { width: "22", height: "22", viewBox: "0 0 24 24" }, h("path", { d: this._icons[this.type] }))), h("div", { class: "c-alert__content" }, h("slot", { name: "title" }), h("slot", null)))));
  }
  static get style() { return cAlertCss; }
}, [1, "c-alert", {
    "type": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-alert"];
  components.forEach(tagName => { switch (tagName) {
    case "c-alert":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CAlert$1);
      }
      break;
  } });
}

const CAlert = CAlert$1;
const defineCustomElement = defineCustomElement$1;

export { CAlert, defineCustomElement };

//# sourceMappingURL=c-alert.js.map