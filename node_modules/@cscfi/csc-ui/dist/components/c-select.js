import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { e as mdiChevronDown, f as mdiClose } from './mdi.js';
import { d as defineCustomElement$9 } from './c-badge2.js';
import { d as defineCustomElement$8 } from './c-dropdown2.js';
import { d as defineCustomElement$7 } from './c-icon2.js';
import { d as defineCustomElement$6 } from './c-icon-button2.js';
import { d as defineCustomElement$5 } from './c-input2.js';
import { d as defineCustomElement$4 } from './c-message2.js';
import { d as defineCustomElement$3 } from './c-ripple2.js';
import { d as defineCustomElement$2 } from './c-spinner2.js';

const cSelectCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-select-active-color:var(--c-select-active-color, var(--c-primary-600));--_c-select-inactive-color:var(--c-select-inactive-color, var(--c-tertiary-600));--_c-select-background-color:var(--c-select-background-color, var(--c-transparent));--_c-select-text-color:var(--c-select-text-color, var(--c-text-body));--_c-select-placeholder-color:var(--c-select-placeholder-color, var(--c-tertiary-500));--_c-select-option-background-color:var(--c-select-option-background-color, var(--c-white));--_c-select-option-background-color-hover:var(--c-select-option-background-color-hover, var(--c-primary-100));--_c-select-option-text-color:var(--c-select-option-text-color, var(--c-text-body));--_c-select-shadow-active-color:var(--c-select-shadow-active-color, var(--_c-select-active-color));--_c-select-shadow-background-color:var(--c-select-shadow-background-color, var(--c-white));--_c-select-shadow-text-color:var(--c-select-shadow-text-color, var(--_c-select-text-color));--_c-select-shadow-placeholder-color:var(--c-select-shadow-placeholder-color, var(--_c-select-placeholder-color));--_c-input-active-color:var(--_c-select-active-color);--_c-input-inactive-color:var(--_c-select-inactive-color);--_c-input-background-color:var(--_c-select-background-color);--_c-input-text-color:var(--_c-select-text-color);--_c-input-placeholder-color:var(--_c-select-placeholder-color);--_c-input-shadow-active-color:var(--_c-select-shadow-active-color);--_c-input-shadow-background-color:var(--_c-select-shadow-background-color);--_c-input-shadow-text-color:var(--_c-select-shadow-text-color);--_c-input-shadow-placeholder-color:var(--_c-select-shadow-placeholder-color)}:host{display:block;cursor:text}.c-input-menu__chevron{fill:currentColor;transform:rotate(0deg);transition:transform 0.3s ease-in-out}.c-input-menu__chevron--active{transform:rotate(180deg)}.c-input-menu__input{width:100%;display:flex;justify-items:stretch}.c-input-menu__selection{display:none;pointer-events:none}.c-input-menu__selection--show{align-items:center;display:flex;width:100%;color:var(--_c-select-active-color)}.c-input-menu__item-wrapper{position:absolute;width:100%;top:44px;z-index:10;margin-left:calc(var(--_c-input-label-position) * -1)}.c-input-menu__item-wrapper--shadow{top:47px}.c-input-menu__items{position:absolute;background-color:var(--_c-select-option-background-color);min-width:calc(100% + 24px);box-shadow:0 8px 16px 0 rgba(0, 0, 0, 0.2);z-index:10;user-select:none;border-radius:4px;margin:0 -12px;overflow-y:scroll;list-style:none;padding:0}.c-input-menu__items--hidden{display:none}.c-input-menu__items li{cursor:pointer;display:flex;min-height:48px;padding:0 12px;transition:background-color 0.3s;font-size:14px;align-items:center;justify-content:flex-start;color:var(--_c-select-option-text-color)}.c-input-menu__items li.disabled{background-color:var(--c-tertiary-100);filter:grayscale(1) opacity(0.6);cursor:default}.c-input-menu__items li.disabled:hover{background-color:var(--c-tertiary-100)}.c-input-menu__items li.dense{padding:10px 14px}.c-input-menu__items li:hover{background-color:var(--_c-select-option-background-color-hover)}.c-input-menu__items li[aria-selected=true]{background-color:var(--_c-select-option-background-color-hover);box-shadow:inset 0 0 0 1px var(--_c-select-active-color);border-radius:4px;backface-visibility:hidden;transform:translate3d(0, 0, 0)}.c-input-menu__items li.none{color:rgba(0, 0, 0, 0.5)}.c-input-menu__items--empty li{color:var(--c-text-system);cursor:default;gap:8px;pointer-events:none}.c-input-menu__items--empty li svg{fill:var(--c-warning-600);height:18px;width:18px}input{max-height:32px;padding:8px 0;background-color:transparent;border:none;color:var(--c-text-body);flex:1 1 auto;font-family:var(--c-font-family);font-size:16px;line-height:20px;max-width:100%;min-width:0;width:100%;pointer-events:none}input:focus,input:active{outline:none}input::-ms-reveal{display:none}svg{fill:currentColor;height:22px;width:22px}.c-input--disabled{color:var(--c-tertiary-400)}.c-input:focus-within{color:var(--c-primary-600)}.c-input--error{color:var(--c-error-600)}.c-input--error:focus-within{color:var(--c-error-600)}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}";

const CSelect$1 = proxyCustomElement(class CSelect extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.changeValue = createEvent(this, "changeValue", 3);
    this.internals = this.attachInternals();
    this._preventDialogOpen = false;
    this._debounce = null;
    this._lastKeyPressTime = null;
    this._searchString = '';
    this._toggleDropdown = (event) => {
      event.stopPropagation();
      if (this.dropdownVisible) {
        this._dropdownElement.close();
        return;
      }
      this._dropdownElement.open();
    };
    this._onButtonKeyDown = (src, event) => {
      event.stopPropagation();
      if (event.key !== 'Tab')
        event.preventDefault();
      if (['Enter', ' '].includes(event.key)) {
        if (src === 'chevron') {
          this._toggleDropdown(event);
          return;
        }
        this._onReset(event);
        this._preventDialogOpen = true;
        requestAnimationFrame(() => {
          this._inputElement.focus();
        });
      }
    };
    this._onSlotChange = () => {
      this.optionElements = this.el.querySelectorAll('c-option');
      if (this.optionElements.length && !this.optionElementsExist) {
        this.optionElementsExist = true;
      }
      const selection = Array.from(this.optionElements).find((option) => option.selected);
      if (selection) {
        this.value = this.returnObject
          ? { name: selection.name, value: selection.value }
          : selection.value;
        this.changeValue.emit(this.value);
        this.internals.setFormValue(selection.value.toString());
      }
    };
    this._onReset = (event) => {
      event.stopPropagation();
      this.changeValue.emit(null);
      this.internals.setFormValue(null);
      this._selectionElement.classList.remove('c-input-menu__selection--show');
      this._selectionElement.replaceChildren(null);
      this._preventDialogOpen = true;
      this._cInputElement.reset();
      this._inputElement.focus();
      this._dropdownElement.updateList();
    };
    this._onInputFocus = () => {
      if (this.disabled)
        return;
      if (!this._preventDialogOpen) {
        this._dropdownElement.open();
      }
      this._updateStatusText();
      this._preventDialogOpen = false;
    };
    this.items = [];
    this.value = null;
    this.hostId = undefined;
    this.clearable = false;
    this.disabled = false;
    this.label = undefined;
    this.name = undefined;
    this.placeholder = '';
    this.hideDetails = false;
    this.hint = '';
    this.loading = false;
    this.required = false;
    this.valid = true;
    this.validate = false;
    this.validateOnBlur = false;
    this.validation = 'Required field';
    this.shadow = false;
    this.returnObject = false;
    this.itemsPerPage = 6;
    this.optionAsSelection = undefined;
    this.optionElements = undefined;
    this.currentIndex = null;
    this.dropdownVisible = false;
    this.statusText = '';
    this.optionElementsExist = false;
  }
  get _id() {
    return this.hostId || `select_${CSelect._uniqueId}`;
  }
  get _items() {
    return this.optionElementsExist ? this.optionElements : this.items;
  }
  get _value() {
    var _a, _b, _c, _d;
    if (!this.value)
      return '';
    if (!this.returnObject &&
      !['number', 'string'].includes(typeof this.value)) {
      console.warn(`[C-SELECT] The value should be of type 'number' or 'string' when return-object is not used.`);
      return '';
    }
    if (!this.returnObject &&
      ['number', 'string'].includes(typeof this.value)) {
      return (_b = (_a = Array.from(this._items)) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === this.value)) === null || _b === void 0 ? void 0 : _b.name;
    }
    return (_d = (_c = Array.from(this._items)) === null || _c === void 0 ? void 0 : _c.find((item) => item.value === this.value.value)) === null || _d === void 0 ? void 0 : _d.name;
  }
  async reset() {
    this.changeValue.emit(null);
    this.internals.setFormValue(null);
    this._dropdownElement.updateList();
  }
  handleKeyDown(event) {
    const alphanumeric = /^[0-9a-zA-Z ]+$/;
    if (this.disabled)
      return;
    if (event.key.match(alphanumeric) && event.key.length === 1) {
      if (this.dropdownVisible)
        return;
      if (Date.now() - this._lastKeyPressTime > 3000) {
        this._searchString = event.key;
      }
      else {
        this._searchString += event.key;
      }
      this._lastKeyPressTime = Date.now();
      const selectionIndex = Array.from(this._items).findIndex((i) => i.name.toLowerCase().startsWith(this._searchString));
      this.currentIndex = selectionIndex >= 0 ? selectionIndex : null;
      if (this.currentIndex !== null) {
        this._dropdownElement.selectItem(this.currentIndex);
      }
      return;
    }
    if (event.key === 'Escape') {
      this._preventDialogOpen = true;
      this._dropdownElement.close();
      this._inputElement.focus();
      return;
    }
    if (event.key === 'Tab') {
      this._dropdownElement.close();
    }
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      if (!this._items.length)
        return;
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
      }
      this.currentIndex =
        this.currentIndex === null
          ? 0
          : Math.min(this.currentIndex + 1, this._items.length - 1);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === 'ArrowUp') {
      event.preventDefault();
      if (this.currentIndex === 0) {
        this._dropdownElement.close();
        this._inputElement.focus();
      }
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
      }
      this.currentIndex =
        this.currentIndex === null
          ? this._items.length - 1
          : Math.max(this.currentIndex - 1, 0);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === ' ') {
      event.preventDefault();
    }
    if (event.key === 'Enter') {
      event.preventDefault();
      if (this.currentIndex === null)
        return;
      this._dropdownElement.selectItem(this.currentIndex);
    }
    if (event.key === 'Home' && this.dropdownVisible) {
      this.currentIndex = 0;
    }
    if (event.key === 'End' && this.dropdownVisible) {
      this.currentIndex = this._items.length - 1;
    }
  }
  onDropdownStateChange(event) {
    const isOpen = event.detail;
    this.dropdownVisible = isOpen;
  }
  onSelectOption(event) {
    this._dropdownElement.close();
    const { name, value } = event.detail;
    const selection = this._setCurrentIndex({ name, value });
    if (this.optionElementsExist && this.optionAsSelection && selection) {
      const clone = selection.cloneNode(true);
      this._selectionElement.classList.add('c-input-menu__selection--show');
      this._selectionElement.replaceChildren(clone);
    }
    this._dropdownElement.updateList();
    this.value = this.returnObject ? event.detail : value;
    this.changeValue.emit(this.value);
    this.internals.setFormValue(value);
    this._preventDialogOpen = true;
    this._inputElement.focus();
  }
  _setCurrentIndex({ value, name }) {
    let selection = null;
    Array.from(this._items).forEach((item, index) => {
      const selected = item.value === value && item.name === name;
      if (this.optionElementsExist) {
        item.selected = selected;
      }
      if (selected) {
        this.currentIndex = index;
        selection = item;
      }
    });
    return selection;
  }
  _updateInput() {
    this._dropdownElement.open();
    this._dropdownElement.updateList();
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      this.statusText = '';
      if (this.currentIndex === null) {
        this.statusText = this._items.length
          ? `${this._items.length} option${this._items.length !== 1 ? 's' : ''} available`
          : 'No options available';
      }
      const ending = !!this._items.length
        ? ', navigate using the up and down arrows'
        : '';
      this._dropdownElement.setStatusText(this.statusText + ending);
      this._debounce = null;
    }, 1400);
  }
  componentWillLoad() {
    CSelect._uniqueId += 1;
    this._inputId =
      'input_' +
        (this.hostId || this.label || this.placeholder).replace(/[^a-zA-Z0-9-_]/g, '');
  }
  componentDidLoad() {
    if (!this.value)
      return;
    const selection = Array.from(this._items).find((item) => {
      if (this.returnObject) {
        return (item.name === this.value.name &&
          item.value === this.value.value);
      }
      return item.value === this.value;
    });
    this._setCurrentIndex({
      name: selection.name,
      value: selection.value.toString(),
    });
  }
  _renderLoader() {
    return h("c-spinner", { color: "var(--_c-autocomplete-active-color)", size: 20 });
  }
  _renderChevron() {
    const classes = {
      'c-input-menu__chevron': true,
      'c-input-menu__chevron--active': this.dropdownVisible,
    };
    return (h("c-icon-button", { size: "x-small", class: classes, disabled: this.disabled, text: true, onClick: (event) => this._toggleDropdown(event), onKeyDown: (event) => this._onButtonKeyDown('chevron', event) }, h("c-icon", { path: mdiChevronDown, size: 24 })));
  }
  _renderInputElement() {
    var _a;
    return (h("div", { class: "c-input-menu__input" }, h("input", { type: "text", readonly: true, ref: (el) => (this._inputElement = el), "aria-expanded": this.dropdownVisible.toString(), "aria-owns": this._inputId + '-items', "aria-autocomplete": "list", autocomplete: "off", class: "c-input__input", role: "combobox", value: this._value, name: (_a = this.name) !== null && _a !== void 0 ? _a : null, disabled: this.disabled, onInput: () => this._updateInput(), onFocus: () => this._onInputFocus() }), h("div", { ref: (el) => (this._selectionElement = el), class: "c-input-menu__selection" })));
  }
  _renderReset() {
    return (h("c-icon-button", { "aria-label": "", size: "x-small", disabled: this.disabled, text: true, onClick: (event) => this._onReset(event), onKeyDown: (event) => this._onButtonKeyDown('reset', event) }, h("c-icon", { path: mdiClose, size: 20 })));
  }
  render() {
    const itemType = this.optionElementsExist ? 'option' : 'item';
    return (h(Host, null, h("c-dropdown", { ref: (el) => (this._dropdownElement = el), id: `${this._id}-dropdown`, index: this.currentIndex, "items-per-page": this.itemsPerPage, "item-type": itemType, items: this._items, parent: this.el, type: "select" }, h("c-input", { slot: "default", ref: (el) => (this._cInputElement = el), active: this.dropdownVisible, disabled: this.disabled, "hide-details": this.hideDetails, hint: this.hint, id: this.hostId, "input-id": this._inputId, label: this.label, name: this.name, placeholder: this.placeholder, required: this.required, shadow: this.shadow, valid: this.valid, validate: this.validate, "validate-on-blur": this.validateOnBlur, validation: this.validation, value: this.value, variant: "select", onClick: () => !this.disabled && this._dropdownElement.open() }, h("slot", { name: "pre", slot: "pre" }), h("div", { class: "c-input__content" }, this._renderInputElement(), this.loading && this._renderLoader(), !this.loading &&
      this.value &&
      this.clearable &&
      this._renderReset(), !this.loading &&
      (!this.value || !this.clearable) &&
      this._renderChevron(), h("slot", { onSlotchange: () => this._onSlotChange() })), h("slot", { name: "post", slot: "post" })))));
  }
  static get formAssociated() { return true; }
  get el() { return this; }
  static get style() { return cSelectCss; }
}, [65, "c-select", {
    "items": [16],
    "value": [8],
    "hostId": [1, "id"],
    "clearable": [4],
    "disabled": [4],
    "label": [1],
    "name": [1],
    "placeholder": [1],
    "hideDetails": [4, "hide-details"],
    "hint": [1],
    "loading": [4],
    "required": [4],
    "valid": [4],
    "validate": [4],
    "validateOnBlur": [4, "validate-on-blur"],
    "validation": [1],
    "shadow": [4],
    "returnObject": [4, "return-object"],
    "itemsPerPage": [2, "items-per-page"],
    "optionAsSelection": [4, "option-as-selection"],
    "optionElements": [32],
    "currentIndex": [32],
    "dropdownVisible": [32],
    "statusText": [32],
    "optionElementsExist": [32],
    "reset": [64]
  }, [[1, "keydown", "handleKeyDown"], [0, "dropdownStateChange", "onDropdownStateChange"], [0, "selectOption", "onSelectOption"]]]);
CSelect$1._uniqueId = 0;
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-select", "c-badge", "c-dropdown", "c-icon", "c-icon-button", "c-input", "c-message", "c-ripple", "c-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "c-select":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CSelect$1);
      }
      break;
    case "c-badge":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "c-dropdown":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "c-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "c-icon-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "c-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "c-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "c-ripple":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "c-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const CSelect = CSelect$1;
const defineCustomElement = defineCustomElement$1;

export { CSelect, defineCustomElement };

//# sourceMappingURL=c-select.js.map