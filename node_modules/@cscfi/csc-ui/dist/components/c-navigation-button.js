import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { o as mdiMenu } from './mdi.js';
import { d as defineCustomElement$6 } from './c-badge2.js';
import { d as defineCustomElement$5 } from './c-icon2.js';
import { d as defineCustomElement$4 } from './c-icon-button2.js';
import { d as defineCustomElement$3 } from './c-ripple2.js';
import { d as defineCustomElement$2 } from './c-spinner2.js';

const cNavigationButtonCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-navigation-button-color:var(\n    --c-navigation-button-color,\n    var(--c-text-system)\n  );display:block;margin-right:0;cursor:pointer;user-select:none;border-radius:50%;--c-icon-button-text-text-color:var(--_c-navigation-button-color)}";

const CNavigationButton$1 = proxyCustomElement(class CNavigationButton extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
  }
  render() {
    return (h(Host, { tabindex: 0 }, h("c-icon-button", { text: true }, h("c-icon", { path: mdiMenu }))));
  }
  static get style() { return cNavigationButtonCss; }
}, [1, "c-navigation-button"]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-navigation-button", "c-badge", "c-icon", "c-icon-button", "c-ripple", "c-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "c-navigation-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CNavigationButton$1);
      }
      break;
    case "c-badge":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "c-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "c-icon-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "c-ripple":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "c-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const CNavigationButton = CNavigationButton$1;
const defineCustomElement = defineCustomElement$1;

export { CNavigationButton, defineCustomElement };

//# sourceMappingURL=c-navigation-button.js.map