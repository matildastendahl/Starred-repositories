{"file":"c-otp-input.js","mappings":"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","names":["COtpInput"],"sources":["src/components/c-otp-input/c-otp-input.scss?tag=c-otp-input&encapsulation=shadow","src/components/c-otp-input/c-otp-input.tsx"],"sourcesContent":[":host {\n  /**\n   * @prop --c-otp-input-border-color: OTP input border color\n   * @prop --c-otp-input-border-color-active: Active OTP input border color\n   * @prop --c-otp-input-height: OTP input height\n   * @prop --c-otp-input-width: OTP input width\n   * @prop --c-otp-input-font-size: OTP input font size\n   * @prop --c-otp-input-text-color: OTP input text color\n   */\n  --_c-otp-input-border-color: var(--c-otp-input-border-color, var(--c-tertiary-500));\n  --_c-otp-input-border-color-active: var(--c-otp-input-border-color-active, var(--c-primary-600));\n  --_c-otp-input-height: var(--c-otp-input-height, 56px);\n  --_c-otp-input-width: var(--c-otp-input-width, 42px);\n  --_c-otp-input-font-size: var(--c-otp-input-font-size, 24px);\n  --_c-otp-input-text-color: var(--c-otp-input-text-color, var(--c-text-body));\n\n  // private\n  --_c-otp-input-border-width: 1px;\n\n  display: block;\n}\n\n:host(.error) {\n  --_c-otp-input-border-color: var(--c-error-600);\n  --_c-otp-input-border-color-active: var(--c-error-600);\n}\n\n.visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n}\n\n.c-otp-input {\n  backface-visibility: hidden;\n  display: inline-grid;\n  gap: 8px;\n  grid-auto-columns: minmax(auto, var(--_c-otp-input-width));\n  grid-auto-flow: column;\n  margin-bottom: 8px;\n  transform: translate3d(0, 0, 0);\n\n  &--hide-details {\n    margin-bottom: 0;\n  }\n\n  input {\n    border-radius: 4px;\n    border: none;\n    box-shadow: inset 0 0 0 var(--_c-otp-input-border-width) var(--_c-otp-input-border-color);\n    color: var(--_c-otp-input-text-color);\n    font-size: var(--_c-otp-input-font-size);\n    height: var(--_c-otp-input-height);\n    max-width: var(--_c-otp-input-width);\n    min-width: 24px;\n    text-align: center;\n    width: 100%;\n\n    &:focus {\n      --_c-otp-input-border-width: 2px;\n      --_c-otp-input-border-color: var(--_c-otp-input-border-color-active);\n\n      outline: none;\n    }\n  }\n\n  c-message {\n    grid-column: 1 / span var(--_c-otp-input-count);\n    grid-row: 2;\n  }\n}\n","import {\n  AttachInternals,\n  Component,\n  Event,\n  EventEmitter,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n  h,\n} from '@stencil/core';\n\n/**\n * @group Form\n */\n@Component({\n  tag: 'c-otp-input',\n  styleUrl: 'c-otp-input.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class COtpInput {\n  // eslint-disable-next-line\n  @AttachInternals() internals: ElementInternals;\n\n  /**\n   * Hide the hint and error messages\n   */\n  @Prop() hideDetails = false;\n\n  /**\n   * Hint text for the input\n   */\n  @Prop() hint = '';\n\n  /**\n   * Id of the element\n   */\n  @Prop({ attribute: 'id' }) elementId!: string;\n\n  /**\n   * Length of the OTP code\n   */\n  @Prop() length = 6;\n\n  /**\n   * Set the valid√≠ty of the input\n   */\n  @Prop() valid = true;\n\n  /**\n   * Custom validation message\n   */\n  @Prop() validation = 'Required field';\n\n  /**\n   * Value of the input\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * Run on input - returns the current value\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter<string>;\n\n  /**\n   * Run on completion - returns the current value\n   */\n  @Event({ bubbles: false }) completion: EventEmitter<string>;\n\n  @State() statusText = '';\n\n  /**\n   * Reset input value\n   */\n  @Method()\n  async reset() {\n    this.value = '';\n\n    this._handleValueChange(this.value, true);\n\n    this.internals.setFormValue(this.value);\n  }\n\n  private _backSpacePressed = false;\n\n  private _debounce = null;\n\n  private _isPasting = false;\n\n  private _inputs: HTMLInputElement[] = new Array(this.length).fill(null);\n\n  private static _uniqueId = 0;\n\n  @Watch('validation')\n  onValidationMessageChange() {\n    this._updateStatusText();\n  }\n\n  @Watch('value')\n  onValueChange(value: string) {\n    this._handleValueChange(value);\n    this._updateStatusText();\n  }\n\n  private _emitValue() {\n    requestAnimationFrame(() => {\n      this.value = [...this._inputs].map((input) => input.value).join('');\n\n      const isFullyFilled = this.value.length === this.length;\n\n      this.changeValue.emit(isFullyFilled ? this.value : null);\n\n      if (isFullyFilled) {\n        this.completion.emit(this.value || null);\n      }\n\n      this.internals.setFormValue(this.value);\n\n      this._updateStatusText();\n    });\n  }\n\n  private _getElements(event: InputEvent | KeyboardEvent) {\n    const target = event.target as HTMLInputElement;\n    const nextElement = target.nextElementSibling as HTMLInputElement;\n    const previousElement = target.previousElementSibling as HTMLInputElement;\n\n    return { target, nextElement, previousElement };\n  }\n\n  /**\n   * Select value in an input on focus\n   */\n  private _onFocus(index: number) {\n    this._inputs[index].select();\n  }\n\n  private _onKeyDown(event: KeyboardEvent) {\n    this._backSpacePressed = false;\n\n    const { target, previousElement } = this._getElements(event);\n\n    if (event.key === 'Backspace') {\n      this._backSpacePressed = true;\n\n      // go to the previous element if the input is empty\n      if (previousElement && !target.value) {\n        previousElement.focus();\n      }\n\n      this._emitValue();\n    }\n  }\n\n  get id() {\n    return this.elementId || `c-otp-input--${COtpInput._uniqueId}`;\n  }\n\n  private _onInput(event: InputEvent) {\n    const { target, nextElement, previousElement } = this._getElements(event);\n\n    // exclude non numeric input values\n    if (isNaN(+target.value)) {\n      event.preventDefault();\n\n      target.value = null;\n\n      return;\n    }\n\n    if (this._isPasting) {\n      this._isPasting = false;\n\n      return;\n    }\n\n    if (this._backSpacePressed) {\n      return;\n    }\n\n    if (event.data) {\n      nextElement?.focus();\n    } else {\n      previousElement?.focus();\n    }\n\n    this._emitValue();\n  }\n\n  // TODO:  prevent pasting non numeric values and iclude validation\n  private _onPaste(event: ClipboardEvent) {\n    event.preventDefault();\n\n    const pasteData = event.clipboardData.getData('text');\n\n    if (isNaN(+pasteData)) {\n      return;\n    }\n\n    this._isPasting = true;\n\n    for (const [index, value] of pasteData.split('').entries()) {\n      // prevent pasting too long codes\n      if (index >= this._inputs.length) {\n        continue;\n      }\n\n      this._inputs[index].value = null;\n      this._inputs[index].value = value;\n    }\n\n    const nextElementIndex = Math.min(this.length, pasteData.length) - 1;\n\n    requestAnimationFrame(() => {\n      this._inputs[nextElementIndex].focus();\n\n      this._emitValue();\n    });\n  }\n\n  private _updateStatusText() {\n    if (this._debounce !== null) {\n      clearTimeout(this._debounce);\n      this._debounce = null;\n    }\n\n    this._debounce = window.setTimeout(() => {\n      const value = [...this._inputs].map((input) => input.value).join('');\n\n      this.statusText = this.valid ? '' : `Error: ${this.validation} `;\n      this.statusText += `Currently entered - ${\n        !value.length ? 'nothing' : value.split('').join(' - ')\n      }`;\n      this.statusText = this.statusText.trim();\n\n      this._debounce = null;\n    }, 1400);\n  }\n\n  private _handleValueChange(value: string | null, forceEmpty = false) {\n    if (!value && !forceEmpty) return;\n\n    const digits = value.split('');\n\n    this._inputs.map((input, index) => (input.value = digits[index] || ''));\n\n    this.internals.setFormValue(value);\n  }\n\n  private _renderInput(index: number) {\n    return (\n      <input\n        id={`${this.id}--input-${index + 1}`}\n        ref={(el) => (this._inputs[index] = el as HTMLInputElement)}\n        aria-label={`Enter code - digit number - ${index + 1} of ${\n          this.length\n        }`}\n        type=\"tel\"\n        maxlength=\"1\"\n        onFocus={() => this._onFocus(index)}\n        onInput={(event) => this._onInput(event)}\n        onKeyDown={(event) => this._onKeyDown(event)}\n        onPaste={(event) => index === 0 && this._onPaste(event)}\n      />\n    );\n  }\n\n  componentWillLoad() {\n    COtpInput._uniqueId += 1;\n  }\n\n  componentDidLoad() {\n    this._handleValueChange(this.value);\n\n    this.internals.setFormValue(this.value);\n  }\n\n  render() {\n    const classes = {\n      'c-otp-input': true,\n      'c-otp-input--hide-details': this.hideDetails,\n    };\n\n    return (\n      <Host\n        id={this.id}\n        style={{ '--_c-otp-input-count': this.length.toString() }}\n        class={{ error: !this.valid }}\n      >\n        <div\n          id={'announce-' + this.id}\n          class=\"visuallyhidden\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n        >\n          {this.statusText}\n        </div>\n\n        <div class={classes}>\n          {new Array(this.length)\n            .fill(0)\n            .map((_, index) => this._renderInput(index))}\n\n          <c-message\n            hint={this.hint}\n            inputId={this.elementId}\n            valid={this.valid}\n            validation={this.validation}\n          />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}