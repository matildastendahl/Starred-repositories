import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const cPageCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-page){--_c-page-max-width:var(--c-page-max-width, 1280px);--_c-page-justify-content:var(--c-page-justify-content, start);display:grid;height:calc(100lvh - 60px);grid-template-rows:1fr auto;grid-template-columns:1fr;width:100%;overflow-y:auto;scroll-behavior:smooth;position:relative;place-items:start var(--_c-page-justify-content)}:host(c-page) .scroll-indicator{z-index:9;height:4px;background-color:var(--c-primary-600);position:fixed;top:0;left:0;width:0%}:host(c-page) .c-page__container{padding:0.5rem;position:relative;width:100%;height:100%;max-width:var(--_c-page-max-width)}@media (min-width: 640px){:host(c-page) .c-page__container{padding:0.75rem}}@media (min-width: 768px){:host(c-page) .c-page__container{padding:1rem}}";

const CPage$1 = proxyCustomElement(class CPage extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.scrollIndicator = false;
  }
  _onScroll() {
    if (!this.scrollIndicator)
      return;
    const scrollTop = this.el.scrollTop;
    const height = this.el.scrollHeight - this.el.clientHeight;
    const scrolled = (scrollTop / height) * 100;
    this._scrollIndicator.style.width = scrolled + '%';
  }
  componentDidLoad() {
    this.el.onscroll = this._onScroll.bind(this);
  }
  render() {
    return (h(Host, null, this.scrollIndicator && (h("div", { ref: (el) => (this._scrollIndicator = el), class: "scroll-indicator" })), h("div", { class: "c-page__container" }, h("slot", null)), h("slot", { name: "footer" })));
  }
  get el() { return this; }
  static get style() { return cPageCss; }
}, [1, "c-page", {
    "scrollIndicator": [4, "scroll-indicator"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-page"];
  components.forEach(tagName => { switch (tagName) {
    case "c-page":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CPage$1);
      }
      break;
  } });
}

const CPage = CPage$1;
const defineCustomElement = defineCustomElement$1;

export { CPage, defineCustomElement };

//# sourceMappingURL=c-page.js.map