import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const cTabItemCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-tab-item-padding:var(--c-tab-item-padding, 16px 0 0 0);display:block;min-width:100%;padding:var(--_c-tab-item-padding);height:0;user-select:none}:host([active=true]){height:auto;user-select:auto}:host([active=false])>div{display:none}:host([disabled=true]){min-width:0;width:0;overflow:hidden}";

const CTabItem$1 = proxyCustomElement(class CTabItem extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.contentChange = createEvent(this, "contentChange", 7);
    this.value = undefined;
    this.active = false;
  }
  componentDidLoad() {
    this._resizeObserver = new ResizeObserver(() => {
      this._handleResize();
    });
    this._resizeObserver.observe(this.el.shadowRoot.querySelector('div'));
  }
  disconnectedCallback() {
    this._resizeObserver.disconnect();
  }
  _handleResize() {
    this.contentChange.emit();
  }
  render() {
    const attributes = {
      role: 'tabpanel',
    };
    return (h(Host, Object.assign({}, attributes), h("div", { class: { active: this.active } }, h("slot", null))));
  }
  get el() { return this; }
  static get style() { return cTabItemCss; }
}, [1, "c-tab-item", {
    "value": [8],
    "active": [4]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-tab-item"];
  components.forEach(tagName => { switch (tagName) {
    case "c-tab-item":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CTabItem$1);
      }
      break;
  } });
}

const CTabItem = CTabItem$1;
const defineCustomElement = defineCustomElement$1;

export { CTabItem, defineCustomElement };

//# sourceMappingURL=c-tab-item.js.map