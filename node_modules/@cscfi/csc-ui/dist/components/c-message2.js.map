{"file":"c-message2.js","mappings":";;;AAAA,MAAM,WAAW,GAAG,w9BAAw9B;;MCW/9B,QAAQ;;;;;IA2FX,oBAAe,IACrB,WAAK,MAAM,EAAC,MAAM,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,WAAW,IACjD,YAAM,CAAC,EAAE,cAAc,GAAI,CACvB,CACP,CAAC;gBA3Fa,EAAE;;iBAUD,IAAI;sBAKC,gBAAgB;0BAEX;MACxB,IAAI,EAAE,IAAI;MACV,IAAI,EAAE,MAAM;MACZ,OAAO,EAAE,EAAE;KACZ;;EAGD,aAAa,CAAC,KAAc;IAG1B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;GAC/B;EAGD,yBAAyB,CAAC,OAAe;IACvC,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO;MAAE,OAAO;IAEnC,IAAI,CAAC,cAAc,mCACd,IAAI,CAAC,cAAc,KACtB,OAAO,GACL,gBACE,YAAM,KAAK,EAAC,gBAAgB,cAAe,EAC1C,IAAI,CAAC,eAAe,OAAG,OAAO,CAC1B,CACR,GACF,CAAC;GACH;EAGD,mBAAmB,CAAC,OAAe;IACjC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO;MAAE,OAAO;IAEpC,IAAI,CAAC,cAAc,mCACd,IAAI,CAAC,cAAc,KACtB,OAAO,GACL,gBACE,YAAM,KAAK,EAAC,gBAAgB,aAAc,EACzC,OAAO,CACH,CACR,GACF,CAAC;GACH;EAEO,iBAAiB,CAAC,KAAc,EAAE,OAAO,GAAG,GAAG;IACrD,IAAI,CAAC,cAAc,mCACd,IAAI,CAAC,cAAc,KACtB,IAAI,EAAE,KAAK,GACZ,CAAC;IAEF,UAAU,CAAC;MACT,IAAI,CAAC,cAAc,mCACd,IAAI,CAAC,cAAc,KACtB,IAAI,EAAE,KAAK,GAAG,MAAM,GAAG,OAAO,EAC9B,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,KAAK,IACZ,YAAM,EAAE,EAAE,QAAQ,IAAI,CAAC,OAAO,EAAE,IAC9B,YAAM,KAAK,EAAC,gBAAgB,aAAc,EACzC,IAAI,CAAC,IAAI,CACL,KAEP,YAAM,EAAE,EAAE,SAAS,IAAI,CAAC,OAAO,EAAE,IAC9B,IAAI,CAAC,eAAe,EACrB,YAAM,KAAK,EAAC,gBAAgB,cAAe,EAC1C,IAAI,CAAC,UAAU,CACX,CACR,GACF,CAAC;KACH,EAAE,OAAO,CAAC,CAAC;GACb;EAQD,gBAAgB;IACd,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;GACvC;EAED,MAAM;IACJ,MAAM,OAAO,GAAG;MACd,WAAW,EAAE,IAAI;MACjB,mBAAmB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI;KAC9C,CAAC;IAEF,MAAM,cAAc,GAAG;MACrB,gBAAgB,EAAE,IAAI;MACtB,CAAC,mBAAmB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,IAAI;KACtD,CAAC;IAEF,QACE,EAAC,IAAI,QACH,WAAK,KAAK,EAAE,OAAO,IACjB,WAAK,KAAK,EAAE,cAAc,IAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAO,CAC3D,CACD,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/c-message/c-message.scss?tag=c-message&encapsulation=shadow","src/components/c-message/c-message.tsx"],"sourcesContent":[":host {\n  --_c-message-error-color: var(--c-error-600);\n  --_c-message-hint-color: var(--c-text-system);\n\n  display: block;\n  line-height: 1;\n  padding: 0 12px;\n}\n\n.c-message {\n  $this: &;\n\n  &--active {\n    #{$this} {\n      &-item {\n        opacity: 1;\n        transform: translateY(0);\n      }\n    }\n  }\n\n  &-item {\n    font-size: 12px;\n    min-height: 16px;\n    opacity: 0;\n    transform: translateY(-4px);\n    transition: all 0.2s cubic-bezier(0.25, 0.8, 0.5, 1);\n\n    &--hint {\n      color: var(--_c-message-hint-color);\n    }\n\n    &--error {\n      color: var(--_c-message-error-color);\n    }\n\n    span {\n      align-items: flex-start;\n      color: currentColor;\n      display: flex;\n      gap: 4px;\n      min-height: 16px;\n    }\n\n    svg {\n      fill: currentColor;\n      height: 16px;\n      width: 16px;\n      position: relative;\n      top: -2px;\n    }\n  }\n\n  .visuallyhidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n}\n","import { mdiCloseCircle } from '@mdi/js';\nimport { Component, Host, Prop, State, Watch, h } from '@stencil/core';\n\n/**\n * @parent None\n */\n@Component({\n  tag: 'c-message',\n  styleUrl: 'c-message.scss',\n  shadow: true,\n})\nexport class CMessage {\n  /**\n   * Hint text for the input\n   */\n  @Prop() hint = '';\n\n  /**\n   * Id of the related input element\n   */\n  @Prop() inputId: string;\n\n  /**\n   * Parent valid√≠ty\n   */\n  @Prop() valid = true;\n\n  /**\n   * Custom validation message\n   */\n  @Prop() validation = 'Required field';\n\n  @State() messageOptions = {\n    show: true,\n    type: 'hint',\n    content: '',\n  };\n\n  @Watch('valid')\n  onValidChange(valid: boolean) {\n    // if (this.validateOnBlur && !this._hasBlurred) return;\n\n    this._handleValidation(valid);\n  }\n\n  @Watch('validation')\n  onValidationMessageChange(message: string) {\n    if (this.valid || !message) return;\n\n    this.messageOptions = {\n      ...this.messageOptions,\n      content: (\n        <span>\n          <span class=\"visuallyhidden\">Error: </span>\n          {this._validationIcon} {message}\n        </span>\n      ),\n    };\n  }\n\n  @Watch('hint')\n  onHintMessageChange(message: string) {\n    if (!this.valid || !message) return;\n\n    this.messageOptions = {\n      ...this.messageOptions,\n      content: (\n        <span>\n          <span class=\"visuallyhidden\">Hint: </span>\n          {message}\n        </span>\n      ),\n    };\n  }\n\n  private _handleValidation(valid: boolean, timeout = 200) {\n    this.messageOptions = {\n      ...this.messageOptions,\n      show: false,\n    };\n\n    setTimeout(() => {\n      this.messageOptions = {\n        ...this.messageOptions,\n        type: valid ? 'hint' : 'error',\n        show: true,\n        content: valid ? (\n          <span id={`hint-${this.inputId}`}>\n            <span class=\"visuallyhidden\">Hint: </span>\n            {this.hint}\n          </span>\n        ) : (\n          <span id={`error-${this.inputId}`}>\n            {this._validationIcon}\n            <span class=\"visuallyhidden\">Error: </span>\n            {this.validation}\n          </span>\n        ),\n      };\n    }, timeout);\n  }\n\n  private _validationIcon = (\n    <svg height=\"16px\" width=\"16px\" viewBox=\"0 0 24 24\">\n      <path d={mdiCloseCircle} />\n    </svg>\n  );\n\n  componentDidLoad() {\n    this._handleValidation(this.valid, 0);\n  }\n\n  render() {\n    const classes = {\n      'c-message': true,\n      'c-message--active': this.messageOptions.show,\n    };\n\n    const messageClasses = {\n      'c-message-item': true,\n      [`c-message-item--${this.messageOptions.type}`]: true,\n    };\n\n    return (\n      <Host>\n        <div class={classes}>\n          <div class={messageClasses}>{this.messageOptions.content}</div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}