import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { m as mdiChevronRight } from './mdi.js';
import { d as defineCustomElement$2 } from './c-icon2.js';

const cAccordionItemCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-accordion-item-header-background-color:var(--c-accordion-item-header-background-color, var(--c-primary-200));--_c-accordion-item-outline-color:var(--c-accordion-item-outline-color, var(--c-primary-600));--_c-accordion-item-text-color:var(--c-accordion-item-text-color, var(--c-primary-600));max-width:100%}:host summary::-webkit-details-marker{display:none}.c-accordion-item{--_c-accordion-item-indicator-rotation:rotate(0deg);--_c-accordion-item-content-height:0;--_c-accordion-item-min-height:46px;--_c-accordion-item-border-radius:6px;--_c-accordion-item-padding:12px;--_c-accordion-item-overflow:visible;--_c-accordion-item-outline-color-offset:2px;display:block;overflow:var(--_c-accordion-item-overflow)}.c-accordion-item--expanding{--_c-accordion-item-overflow:hidden !important;--_c-accordion-item-outline-color:transparent}.c-accordion-item--expanded{--_c-accordion-item-content-height:auto;--_c-accordion-item-indicator-rotation:rotate(90deg);--_c-accordion-item-overflow:visible}.c-accordion-item--outlined{box-shadow:inset 0 0 0 2px var(--_c-accordion-item-header-background-color);border-radius:var(--_c-accordion-item-border-radius)}.c-accordion-item__header{min-height:var(--_c-accordion-item-min-height);user-select:none;background-color:var(--_c-accordion-item-header-background-color);display:grid;column-gap:8px;align-items:center;padding:0 var(--_c-accordion-item-padding);border-radius:var(--_c-accordion-item-border-radius);cursor:pointer;grid-template-columns:1fr auto;border:none;text-align:left;margin:0;font-family:var(--c-font-family);position:relative}.c-accordion-item__header--has-icon{grid-template-columns:auto 1fr auto}.c-accordion-item__header--expanded{cursor:default}.c-accordion-item__header--expanded.c-accordion-item__header--collapsable{cursor:pointer}.c-accordion-item__header:focus{outline:2px var(--_c-accordion-item-outline-color) solid;outline-offset:var(--_c-accordion-item-outline-color-offset)}@supports selector(:focus-visible){.c-accordion-item__header:focus{outline:none}}.c-accordion-item__header:focus-visible{outline:2px var(--_c-accordion-item-outline-color) solid;outline-offset:var(--_c-accordion-item-outline-color-offset)}.c-accordion-item__title{margin-top:0;margin-bottom:0;font-weight:500;font-size:16px;line-height:1;color:var(--_c-accordion-item-text-color)}.c-accordion-item__content{padding:16px}.c-accordion-item__content-wrapper{overflow:visible}.c-accordion-item__icon{height:24px;font-size:24px;color:var(--_c-accordion-item-text-color);display:flex;align-items:center}.c-accordion-item__icon>*{height:24px;display:flex;align-items:center}.c-accordion-item__indicator{display:flex;align-items:center;color:var(--_c-accordion-item-text-color);justify-self:end}.c-accordion-item__indicator c-icon{width:24px;height:24px !important;transform:var(--_c-accordion-item-indicator-rotation);transition:transform 0.3s ease}";

const CAccordionItem$1 = proxyCustomElement(class CAccordionItem extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.itemChange = createEvent(this, "itemChange", 7);
    this._isCollapsing = false;
    this._isExpanding = false;
    this.collapsable = false;
    this.heading = undefined;
    this.value = undefined;
    this.expanded = false;
    this.outlined = false;
    this.hasCustomHeader = false;
    this.hasIcon = false;
  }
  handleKeyDown(event) {
    if (event.target.tagName === 'C-ACCORDION-ITEM' &&
      (event.key === 'Enter' || event.code === 'Space')) {
      event.preventDefault();
      this._onToggleAccordion(event);
    }
  }
  stop(event) {
    event.stopPropagation();
  }
  get _collapsedHeight() {
    const outlineHeight = this.outlined ? 4 : 0;
    return this._accordionHeader.offsetHeight + outlineHeight;
  }
  get _expandedHeight() {
    const outlineHeight = this.outlined ? 4 : 0;
    const headerHeight = this._accordionHeader.offsetHeight;
    const contentHeight = this._accordionContent.offsetHeight;
    return headerHeight + contentHeight + outlineHeight;
  }
  _onToggleAccordion(e) {
    e.preventDefault();
    if (!this.collapsable && this.expanded)
      return;
    this._accordionElement.classList.add('c-accordion-item--expanding');
    if (this._isCollapsing || !this.expanded) {
      this._expand();
    }
    else if (this._isExpanding || this.expanded) {
      this._collapse();
    }
  }
  _collapse() {
    this._isCollapsing = true;
    this.expanded = false;
    const startHeight = `${this._accordionElement.offsetHeight}px`;
    const endHeight = `${this._collapsedHeight}px`;
    if (this._animation) {
      this._animation.cancel();
    }
    this.itemChange.emit({ value: this.value, expanded: this.expanded });
    this._animation = this._accordionElement.animate({ height: [startHeight, endHeight] }, { duration: 300, easing: 'cubic-bezier(0.075, 0.82, 0.165, 1)' });
    this._animation.onfinish = () => this._onAnimationFinish(false);
    this._animation.oncancel = () => (this._isCollapsing = false);
  }
  _expand() {
    this._accordionElement.style.height = `${this._accordionElement.offsetHeight}px`;
    this.expanded = true;
    window.requestAnimationFrame(() => {
      this._isExpanding = true;
      const startHeight = `${this._collapsedHeight}px`;
      const endHeight = `${this._expandedHeight}px`;
      if (this._animation) {
        this._animation.cancel();
      }
      this.itemChange.emit({ value: this.value, expanded: this.expanded });
      this._animation = this._accordionElement.animate({ height: [startHeight, endHeight] }, { duration: 300, easing: 'cubic-bezier(0.25, 0.8, 0.5, 1)' });
      this._animation.onfinish = () => this._onAnimationFinish(true);
      this._animation.oncancel = () => (this._isExpanding = false);
    });
  }
  _onAnimationFinish(isOpen) {
    this.expanded = isOpen;
    this._animation = null;
    this._isCollapsing = false;
    this._isExpanding = false;
    this._accordionElement.style.height = '';
    this._accordionElement.classList.remove('c-accordion-item--expanding');
    this.expanded = isOpen;
  }
  componentWillLoad() {
    CAccordionItem._uniqueId += 1;
  }
  componentDidLoad() {
    this.hasCustomHeader = !!this.el.querySelector('[slot="header"]');
    this.hasIcon = !!this.el.querySelector('[slot="icon"]');
  }
  render() {
    const accordionClasses = {
      'c-accordion-item': true,
      'c-accordion-item--expanded': this.expanded,
      'c-accordion-item--outlined': this.outlined,
    };
    const headerClasses = {
      'c-accordion-item__header': true,
      'c-accordion-item__header--collapsable': this.collapsable,
      'c-accordion-item__header--expanded': this.expanded,
      'c-accordion-item__header--has-icon': this.hasIcon,
    };
    const indicatorClasses = {
      'c-accordion-item__indicator': true,
      'c-accordion-item__indicator--expanded': this.expanded,
    };
    return (h(Host, null, h("details", { id: `panel__${CAccordionItem._uniqueId}`, ref: (el) => (this._accordionElement = el), class: accordionClasses, open: !!this.expanded }, h("summary", { ref: (el) => (this._accordionHeader = el), class: headerClasses, onClick: (event) => this._onToggleAccordion(event) }, this.hasIcon && (h("div", { class: "c-accordion-item__icon", "aria-visible": "hidden" }, h("slot", { name: "icon" }))), this.hasCustomHeader && h("slot", { name: "header" }), !this.hasCustomHeader && (h("div", { class: "c-accordion-item__title" }, this.heading)), h("div", { class: indicatorClasses }, h("c-icon", { path: mdiChevronRight, class: { expanded: this.expanded } }))), h("div", { ref: (el) => (this._accordionContent = el), class: "c-accordion-item__content-wrapper" }, h("div", { class: "c-accordion-item__content", role: "region", "aria-labelledby": `header__${CAccordionItem._uniqueId}` }, h("slot", null))))));
  }
  get el() { return this; }
  static get style() { return cAccordionItemCss; }
}, [1, "c-accordion-item", {
    "collapsable": [4],
    "heading": [1],
    "value": [8],
    "expanded": [4],
    "outlined": [4],
    "hasCustomHeader": [32],
    "hasIcon": [32]
  }, [[2, "keydown", "handleKeyDown"], [0, "changeValue", "stop"]]]);
CAccordionItem$1._uniqueId = 0;
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-accordion-item", "c-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "c-accordion-item":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CAccordionItem$1);
      }
      break;
    case "c-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const CAccordionItem = CAccordionItem$1;
const defineCustomElement = defineCustomElement$1;

export { CAccordionItem, defineCustomElement };

//# sourceMappingURL=c-accordion-item.js.map