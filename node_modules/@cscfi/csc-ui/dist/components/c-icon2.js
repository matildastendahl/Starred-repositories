import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const cIconCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host(c-icon){--_c-icon-color:var(\n    --c-icon-color,\n    var(--_c-icon-default-color, curentColor)\n  );--_c-icon-size:var(--c-icon-size, 24px);display:inline-flex;align-items:center;height:var(--_c-icon-size);width:var(--_c-icon-size)}:host(c-icon) svg{height:var(--_c-icon-size);width:var(--_c-icon-size)}:host(c-icon) svg path{fill:var(--_c-icon-color)}";

const CIcon = proxyCustomElement(class CIcon extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.path = undefined;
    this.size = 24;
    this.color = 'currentColor';
  }
  componentDidLoad() {
    this._pathElement.setAttribute('d', this.host.dataset.path);
  }
  render() {
    return (h(Host, { style: {
        '--_c-icon-size': `${this.size}px`,
        '--_c-icon-default-color': this.color,
      }, "data-path": this.path }, h("svg", { viewBox: "0 0 24 24" }, h("path", { ref: (el) => (this._pathElement = el) }))));
  }
  get host() { return this; }
  static get style() { return cIconCss; }
}, [1, "c-icon", {
    "path": [1],
    "size": [2],
    "color": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "c-icon":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CIcon);
      }
      break;
  } });
}

export { CIcon as C, defineCustomElement as d };

//# sourceMappingURL=c-icon2.js.map