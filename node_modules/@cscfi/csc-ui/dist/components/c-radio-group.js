import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$3 } from './c-message2.js';
import { d as defineCustomElement$2 } from './c-ripple2.js';

const cRadioGroupCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-radio-group-background-color-hover:var(--c-radio-group-background-color-hover, rgba(var(--c-primary-rgb), 0.1));--_c-radio-group-color:var(--c-radio-group-color, var(--c-primary-600));--_c-radio-group-color-active:var(--c-radio-group-color-active, var(--_c-radio-group-color));--_c-radio-group-color-disabled:var(--c-radio-group-color-disabled, var(--c-tertiary-500));display:flex;flex-direction:column;gap:4px;width:fit-content}.c-radio-group{--_c-radio-group-error-color:var(--c-error-600);--_c-radio-flex-direction:column;--_c-radio-item-gap:2px}.c-radio-group__items{display:flex;flex-flow:var(--_c-radio-flex-direction) wrap;gap:var(--_c-radio-item-gap)}.c-radio-group__label span.required{color:var(--_c-radio-group-error-color)}.c-radio-group--disabled{--_c-radio-group-color:var(--_c-radio-group-color-disabled);--_c-radio-group-error-color:var(--_c-radio-group-color-disabled);color:var(--_c-radio-group-color-disabled);cursor:default;opacity:0.75}.c-radio-group--error{--_c-radio-group-color:var(--_c-radio-group-error-color);--_c-radio-group-color-active:var(--_c-radio-group-error-color);color:var(--_c-radio-group-error-color)}.c-radio-group--inline{--_c-radio-flex-direction:row;--_c-radio-item-gap:12px}.c-radio{align-items:flex-start;display:flex;position:relative;cursor:pointer;font-size:16px;user-select:none;gap:4px;line-height:1.2}.c-radio input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.c-radio input:checked~.ripple .selection::after{display:block;transform:scale(1)}.c-radio .ripple{position:relative;height:42px;width:42px;min-width:42px;border-radius:50%;overflow:hidden;transition:translateZ(0);color:var(--_c-radio-group-color)}.c-radio .selection{position:absolute;top:11px;left:11px;height:20px;width:20px;background-color:transparent;box-shadow:inset 0 0 0 2px var(--_c-radio-group-color);border-radius:50%;transition:box-shadow 0.15s ease-in-out}.c-radio .selection::after{content:\"\";position:absolute;transform:scale(0);transition:transform 0.15s ease-in-out;top:5px;left:5px;width:10px;height:10px;border-radius:50%;background:var(--_c-radio-group-color-active)}.c-radio__label{padding-top:12px}.c-radio--disabled{--_c-radio-group-color:var(--_c-radio-group-color-disabled);--_c-radio-group-color-active:var(--_c-radio-group-color-disabled);color:var(--_c-radio-group-color);cursor:default;opacity:0.75}.c-radio--error{--_c-radio-group-color:var(--_c-radio-group-error-color);color:var(--_c-radio-group-error-color)}.c-radio--error span,.c-radio--error svg{fill:var(--_c-radio-group-error-color);color:var(--_c-radio-group-error-color)}.c-radio input:focus{outline:none}.c-radio input:focus+.ripple{outline:2px var(--_c-radio-group-color-active) solid}@supports selector(:focus-visible){.c-radio input:focus+.ripple{outline:none}}.c-radio input:focus-visible+.ripple{outline:2px var(--_c-radio-group-color) solid}.c-radio:not(.c-radio--disabled) .ripple:hover{background-color:var(--_c-radio-group-background-color-hover)}";

const CRadioGroup$1 = proxyCustomElement(class CRadioGroup extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.changeValue = createEvent(this, "changeValue", 3);
    this.internals = this.attachInternals();
    this._containers = [];
    this._rippleElements = [];
    this._handleSlotChange = () => {
      this._getRadioButtons();
    };
    this._getRadioButtons = () => {
      const radios = this.el.querySelectorAll('c-radio');
      if (radios.length) {
        this.returnObject = false;
        this.items = [
          ...Array.from(radios).map((radio) => {
            if (!!radio.checked) {
              this.value = radio.value;
              this.changeValue.emit(this.value);
            }
            radio.style.display = 'none';
            return {
              name: radio.textContent,
              value: radio.value,
              disabled: !!radio.disabled,
            };
          }),
        ];
      }
    };
    this._getRadioButton = (item, index) => {
      var _a, _b, _c;
      const itemId = item.value.toString().replace(/[^a-zA-Z0-9-_]/g, '');
      const isChecked = !this.returnObject
        ? ((_b = (_a = this.items) === null || _a === void 0 ? void 0 : _a.find((i) => i.value === item.value)) === null || _b === void 0 ? void 0 : _b.value) === this.value
        : ((_c = this.value) === null || _c === void 0 ? void 0 : _c.value) === item.value;
      const classes = {
        'c-radio': true,
        'c-radio--disabled': !!item.disabled || this.disabled,
        'c-radio--error': !this.valid,
      };
      return (h("label", { class: classes, id: itemId, onKeyDown: (event) => this._handleKeyDown(event, item, index) }, h("input", { type: "radio", "aria-checked": (this.value === item).toString(), "aria-disabled": (!!item.disabled || this.disabled).toString(), "aria-labelledby": itemId, disabled: !!item.disabled || this.disabled, checked: isChecked, name: CRadioGroup._uniqueId.toString(), onChange: (event) => this._select(event, item, index) }), h("span", { class: "ripple", ref: (el) => (this._containers[index] = el) }, h("span", { class: "selection" }), h("c-ripple", { ref: (el) => (this._rippleElements[index] = el) })), h("div", { class: "c-radio__label" }, item.name)));
    };
    this.value = undefined;
    this.hideDetails = false;
    this.hint = '';
    this.inline = false;
    this.label = undefined;
    this.color = '';
    this.hostId = undefined;
    this.items = [];
    this.disabled = false;
    this.returnObject = false;
    this.required = false;
    this.valid = true;
    this.validation = 'Required field';
  }
  get _id() {
    return this.hostId || `radio-group_${CRadioGroup._uniqueId}`;
  }
  _handleKeyDown(event, item, index) {
    if (['Space', 'Enter'].includes(event.code)) {
      event.preventDefault();
      this._select(event, item, index);
    }
  }
  _select(event, item, index) {
    if (!!item.disabled || this.disabled)
      return;
    this._rippleElements[index].createRipple(event, this._containers[index], true);
    this.value = !this.returnObject ? item === null || item === void 0 ? void 0 : item.value : item;
    this.changeValue.emit(this.value);
    const value = !this.returnObject
      ? this.value
      : this.value.value;
    this.internals.setFormValue(value);
  }
  componentWillLoad() {
    CRadioGroup._uniqueId += 1;
    const radios = this.el.querySelectorAll('c-radio');
    const checkedRadio = Array.from(radios).find((item) => item.checked);
    if (checkedRadio) {
      const value = checkedRadio.value;
      this.internals.setFormValue(value);
    }
    else if (this.value) {
      const value = !this.returnObject
        ? this.value
        : this.value.value;
      this.internals.setFormValue(value);
    }
  }
  render() {
    const slotHasContent = !!this.el.childNodes.length;
    const wrapperClasses = {
      'c-radio-group': true,
      'c-radio-group--disabled': this.disabled,
      'c-radio-group--inline': this.inline,
      'c-radio-group--error': !this.valid,
    };
    return (h("div", { class: wrapperClasses, role: "radiogroup", "aria-labelledby": "c-radio-group__label" }, (!!this.label || slotHasContent) && (h("label", { class: "c-radio-group__label" }, !!this.label && this.label, h("slot", { onSlotchange: this._handleSlotChange }), this.required && h("span", { class: "required" }, "\u00A0*"))), h("div", { class: "c-radio-group__items" }, this.items.map((item, index) => this._getRadioButton(item, index))), !this.hideDetails && (h("c-message", { hint: this.hint, inputId: this._id, valid: this.valid, validation: this.validation }))));
  }
  static get formAssociated() { return true; }
  get el() { return this; }
  static get style() { return cRadioGroupCss; }
}, [65, "c-radio-group", {
    "value": [1032],
    "hideDetails": [4, "hide-details"],
    "hint": [1],
    "inline": [4],
    "label": [1],
    "color": [1],
    "hostId": [1, "id"],
    "items": [16],
    "disabled": [4],
    "returnObject": [4, "return-object"],
    "required": [4],
    "valid": [4],
    "validation": [1]
  }]);
CRadioGroup$1._uniqueId = 0;
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["c-radio-group", "c-message", "c-ripple"];
  components.forEach(tagName => { switch (tagName) {
    case "c-radio-group":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, CRadioGroup$1);
      }
      break;
    case "c-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "c-ripple":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const CRadioGroup = CRadioGroup$1;
const defineCustomElement = defineCustomElement$1;

export { CRadioGroup, defineCustomElement };

//# sourceMappingURL=c-radio-group.js.map