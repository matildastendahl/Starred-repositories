{"version":3,"file":"c-switch.js","sourceRoot":"","sources":["../../../../src/components/c-switch/c-switch.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,CAAC,EACD,OAAO,EACP,IAAI,EACJ,KAAK,EACL,KAAK,EAEL,eAAe,GAChB,MAAM,eAAe,CAAC;AAYvB,MAAM,OAAO,OAAO;;IA+DV,iBAAY,GAAG,GAAG,EAAE;MAC1B,IAAI,IAAI,CAAC,YAAY;QAAE,OAAO;MAE9B,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;MAE7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;MAEvE,IAAI,CAAC,SAAS,CAAC,YAAY,CACzB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CACtE,CAAC;IACJ,CAAC,CAAC;mBAlEiC,KAAK;iBAMN,KAAK;qBAKD,IAAI;sBAKH,KAAK;wBAKI,KAAK;;oBAUlC,KAAK;oBAIJ,KAAK;;EAOzB,iBAAiB;IACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC;IAE7D,IAAI,CAAC,SAAS,CAAC,YAAY,CACzB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CACtE,CAAC;EACJ,CAAC;EAED,gBAAgB;IACd,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IAErC,IAAI,CAAC,QAAQ,GAAG,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;EAChD,CAAC;EAcD,MAAM;IACJ,MAAM,OAAO,GAAG;MACd,UAAU,EAAE,IAAI;MAChB,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY;MACzC,iBAAiB,EAAE,IAAI,CAAC,QAAQ;KACjC,CAAC;IAEF,MAAM,aAAa,GAAG;MACpB,kBAAkB,EAAE,IAAI;MACxB,4BAA4B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY;KAClD,CAAC;IAEF,OAAO,CACL,aAAO,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM;MACzC,WAAK,KAAK,EAAC,iBAAiB;QAC1B,aACE,EAAE,EAAE,IAAI,CAAC,MAAM,kBACD,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EACrC,IAAI,EAAC,UAAU,EACf,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EACxC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,GACnC;QACF,YAAM,KAAK,EAAE,aAAa,GAAS,CAC/B;MACL,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CACf,WAAK,KAAK,EAAC,iBAAiB;QAC1B,eAAa;QAEZ,IAAI,CAAC,QAAQ,IAAI,YAAM,KAAK,EAAC,UAAU,cAAe,CACnD,CACP,CAAC,CAAC,CAAC,IAAI,CACF,CACT,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  h,\n  Element,\n  Prop,\n  State,\n  Event,\n  EventEmitter,\n  AttachInternals,\n} from '@stencil/core';\n\n/**\n * @group Form\n * @slot label - Label text for the switch\n */\n@Component({\n  tag: 'c-switch',\n  styleUrl: 'c-switch.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class CSwitch {\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\n  @AttachInternals() internals: ElementInternals;\n\n  /**\n   * If `true`, the checkbox is selected.\n   */\n  @Prop({ mutable: true }) checked = false;\n\n  /**\n   * The input value\n   * - Only used when the checkbox participates in a native `<form>`\n   */\n  @Prop() value: string | boolean = false;\n\n  /**\n   * The value when the checkbox is checked\n   */\n  @Prop() trueValue: boolean | string = true;\n\n  /**\n   * The value when the checkbox is unchecked\n   */\n  @Prop() falseValue: boolean | string = false;\n\n  /**\n   * Disable the switch\n   */\n  @Prop({ attribute: 'disabled' }) hostDisabled = false;\n\n  /**\n   * Id for the element\n   */\n  @Prop({ attribute: 'id' }) hostId: string;\n\n  /**\n   * Set as required\n   */\n  @Prop() required = false;\n\n  @Element() host: HTMLCSwitchElement;\n\n  @State() hasLabel = false;\n\n  /**\n   * Emit inner value change to parent\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter;\n\n  componentWillLoad() {\n    this.checked = this.checked || this.value === this.trueValue;\n\n    this.internals.setFormValue(\n      this.checked ? this.trueValue.toString() : this.falseValue.toString(),\n    );\n  }\n\n  componentDidLoad() {\n    const slotted = this.host.childNodes;\n\n    this.hasLabel = slotted && slotted.length > 0;\n  }\n\n  private _toggleState = () => {\n    if (this.hostDisabled) return;\n\n    this.checked = !this.checked;\n\n    this.changeValue.emit(this.checked ? this.trueValue : this.falseValue);\n\n    this.internals.setFormValue(\n      this.checked ? this.trueValue.toString() : this.falseValue.toString(),\n    );\n  };\n\n  render() {\n    const classes = {\n      'c-switch': true,\n      'c-switch--disabled': !!this.hostDisabled,\n      'c-switch--label': this.hasLabel,\n    };\n\n    const sliderClasses = {\n      'c-switch__slider': true,\n      'c-switch__slider--disabled': !!this.hostDisabled,\n    };\n\n    return (\n      <label class={classes} htmlFor={this.hostId}>\n        <div class=\"c-switch__input\">\n          <input\n            id={this.hostId}\n            aria-checked={this.checked.toString()}\n            type=\"checkbox\"\n            role=\"switch\"\n            disabled={this.hostDisabled}\n            checked={this.checked ? true : undefined}\n            onChange={() => this._toggleState()}\n          />\n          <span class={sliderClasses}></span>\n        </div>\n        {this.hasLabel ? (\n          <div class=\"c-switch__label\">\n            <slot></slot>\n\n            {this.required && <span class=\"required\">&nbsp;*</span>}\n          </div>\n        ) : null}\n      </label>\n    );\n  }\n}\n"]}