import { h, Host, } from "@stencil/core";
import { mdiChevronRight } from "@mdi/js";
export class CAccordionItem {
  constructor() {
    this._isCollapsing = false;
    this._isExpanding = false;
    this.collapsable = false;
    this.heading = undefined;
    this.value = undefined;
    this.expanded = false;
    this.outlined = false;
    this.hasCustomHeader = false;
    this.hasIcon = false;
  }
  handleKeyDown(event) {
    if (event.target.tagName === 'C-ACCORDION-ITEM' &&
      (event.key === 'Enter' || event.code === 'Space')) {
      event.preventDefault();
      this._onToggleAccordion(event);
    }
  }
  stop(event) {
    event.stopPropagation();
  }
  get _collapsedHeight() {
    const outlineHeight = this.outlined ? 4 : 0;
    return this._accordionHeader.offsetHeight + outlineHeight;
  }
  get _expandedHeight() {
    const outlineHeight = this.outlined ? 4 : 0;
    const headerHeight = this._accordionHeader.offsetHeight;
    const contentHeight = this._accordionContent.offsetHeight;
    return headerHeight + contentHeight + outlineHeight;
  }
  _onToggleAccordion(e) {
    e.preventDefault();
    if (!this.collapsable && this.expanded)
      return;
    this._accordionElement.classList.add('c-accordion-item--expanding');
    if (this._isCollapsing || !this.expanded) {
      this._expand();
    }
    else if (this._isExpanding || this.expanded) {
      this._collapse();
    }
  }
  _collapse() {
    this._isCollapsing = true;
    this.expanded = false;
    const startHeight = `${this._accordionElement.offsetHeight}px`;
    const endHeight = `${this._collapsedHeight}px`;
    if (this._animation) {
      this._animation.cancel();
    }
    this.itemChange.emit({ value: this.value, expanded: this.expanded });
    this._animation = this._accordionElement.animate({ height: [startHeight, endHeight] }, { duration: 300, easing: 'cubic-bezier(0.075, 0.82, 0.165, 1)' });
    this._animation.onfinish = () => this._onAnimationFinish(false);
    this._animation.oncancel = () => (this._isCollapsing = false);
  }
  _expand() {
    this._accordionElement.style.height = `${this._accordionElement.offsetHeight}px`;
    this.expanded = true;
    window.requestAnimationFrame(() => {
      this._isExpanding = true;
      const startHeight = `${this._collapsedHeight}px`;
      const endHeight = `${this._expandedHeight}px`;
      if (this._animation) {
        this._animation.cancel();
      }
      this.itemChange.emit({ value: this.value, expanded: this.expanded });
      this._animation = this._accordionElement.animate({ height: [startHeight, endHeight] }, { duration: 300, easing: 'cubic-bezier(0.25, 0.8, 0.5, 1)' });
      this._animation.onfinish = () => this._onAnimationFinish(true);
      this._animation.oncancel = () => (this._isExpanding = false);
    });
  }
  _onAnimationFinish(isOpen) {
    this.expanded = isOpen;
    this._animation = null;
    this._isCollapsing = false;
    this._isExpanding = false;
    this._accordionElement.style.height = '';
    this._accordionElement.classList.remove('c-accordion-item--expanding');
    this.expanded = isOpen;
  }
  componentWillLoad() {
    CAccordionItem._uniqueId += 1;
  }
  componentDidLoad() {
    this.hasCustomHeader = !!this.el.querySelector('[slot="header"]');
    this.hasIcon = !!this.el.querySelector('[slot="icon"]');
  }
  render() {
    const accordionClasses = {
      'c-accordion-item': true,
      'c-accordion-item--expanded': this.expanded,
      'c-accordion-item--outlined': this.outlined,
    };
    const headerClasses = {
      'c-accordion-item__header': true,
      'c-accordion-item__header--collapsable': this.collapsable,
      'c-accordion-item__header--expanded': this.expanded,
      'c-accordion-item__header--has-icon': this.hasIcon,
    };
    const indicatorClasses = {
      'c-accordion-item__indicator': true,
      'c-accordion-item__indicator--expanded': this.expanded,
    };
    return (h(Host, null, h("details", { id: `panel__${CAccordionItem._uniqueId}`, ref: (el) => (this._accordionElement = el), class: accordionClasses, open: !!this.expanded }, h("summary", { ref: (el) => (this._accordionHeader = el), class: headerClasses, onClick: (event) => this._onToggleAccordion(event) }, this.hasIcon && (h("div", { class: "c-accordion-item__icon", "aria-visible": "hidden" }, h("slot", { name: "icon" }))), this.hasCustomHeader && h("slot", { name: "header" }), !this.hasCustomHeader && (h("div", { class: "c-accordion-item__title" }, this.heading)), h("div", { class: indicatorClasses }, h("c-icon", { path: mdiChevronRight, class: { expanded: this.expanded } }))), h("div", { ref: (el) => (this._accordionContent = el), class: "c-accordion-item__content-wrapper" }, h("div", { class: "c-accordion-item__content", role: "region", "aria-labelledby": `header__${CAccordionItem._uniqueId}` }, h("slot", null))))));
  }
  static get is() { return "c-accordion-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-accordion-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-accordion-item.css"]
    };
  }
  static get properties() {
    return {
      "collapsable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Marks the item as collapsable"
        },
        "attribute": "collapsable",
        "reflect": false,
        "defaultValue": "false"
      },
      "heading": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Heading of the accordion item"
        },
        "attribute": "heading",
        "reflect": false
      },
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "number | string",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Value of the accordion item"
        },
        "attribute": "value",
        "reflect": false
      },
      "expanded": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Expansion status of the item"
        },
        "attribute": "expanded",
        "reflect": false,
        "defaultValue": "false"
      },
      "outlined": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Show an outline around the expanded item"
        },
        "attribute": "outlined",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "hasCustomHeader": {},
      "hasIcon": {}
    };
  }
  static get events() {
    return [{
        "method": "itemChange",
        "name": "itemChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Emit changes to the c-accordion"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "handleKeyDown",
        "target": undefined,
        "capture": true,
        "passive": false
      }, {
        "name": "changeValue",
        "method": "stop",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
CAccordionItem._uniqueId = 0;
//# sourceMappingURL=c-accordion-item.js.map
