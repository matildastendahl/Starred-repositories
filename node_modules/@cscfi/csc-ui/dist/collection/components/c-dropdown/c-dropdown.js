import { mdiAlert, mdiInformation } from "@mdi/js";
import { Host, h, } from "@stencil/core";
export class CDropdown {
  constructor() {
    this._debounce = null;
    this._isMobile = false;
    this._listItems = [];
    this._isOpening = false;
    this._inputSize = {
      height: 0,
      width: 0,
    };
    this._openedOnTop = false;
    this._hideDetails = false;
    this.itemsPerPage = undefined;
    this.parent = undefined;
    this.items = undefined;
    this.index = undefined;
    this.hostId = undefined;
    this.type = undefined;
    this.itemType = undefined;
    this.renderedList = null;
    this.isOpen = false;
    this.statusText = '';
  }
  optionsWatcher() {
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  async stateWatcher(isOpen) {
    this._originalOverflowValue =
      this._originalOverflowValue ||
        window.getComputedStyle(document.body).overflow;
    if (isOpen) {
      this._handleOpen();
      this._disableScroll();
    }
    else {
      this._enableScroll();
    }
    this.dropdownStateChange.emit(isOpen);
  }
  handleIndexChange(index) {
    requestAnimationFrame(() => {
      var _a;
      this._updateStatusText();
      (_a = this._listItems[index]) === null || _a === void 0 ? void 0 : _a.focus();
    });
  }
  async setStatusText(text) {
    requestAnimationFrame(() => {
      this.statusText = text;
    });
  }
  async focusItem(index) {
    requestAnimationFrame(() => {
      var _a;
      (_a = this._listItems[index]) === null || _a === void 0 ? void 0 : _a.focus();
    });
  }
  async open() {
    if (this._dialog.open)
      return;
    this._outsideClickFn = this._handleOutsideClick.bind(this);
    this._dialog.addEventListener('click', this._outsideClickFn);
    requestAnimationFrame(() => {
      this.isOpen = true;
      this._positionMenu();
    });
  }
  async close() {
    this._dialog.close();
    this.isOpen = false;
    this._inputElement.slot = 'default';
    this._inputElement.hideDetails = this._hideDetails;
    this._dummyElement.style.width = '0';
    this._dummyElement.style.display = 'none';
    this._dialog.style.width = '0';
    window.removeEventListener('click', this._outsideClickFn);
  }
  _setIsMobile() {
    this._isMobile = window.matchMedia('only screen and (max-width: 760px)').matches;
  }
  _handleOpen() {
    this._isOpening = true;
    setTimeout(() => {
      this._isOpening = false;
    }, 500);
  }
  _disableScroll() {
    document.body.style.overflow = 'hidden';
  }
  _enableScroll() {
    if (this._originalOverflowValue &&
      this._originalOverflowValue !== 'visible') {
      document.body.style.overflow = this._originalOverflowValue;
      return;
    }
    document.body.style.removeProperty('overflow');
  }
  componentDidLoad() {
    this._setIsMobile();
    this._hideDetails = this.parent.hideDetails;
    this._inputElement = this.el.querySelector('c-input');
    this._resizeObserver = new ResizeObserver((entries) => {
      if (!this._dialog.open)
        return;
      requestAnimationFrame(() => {
        if (!Array.isArray(entries) || !entries.length || this._isOpening)
          return;
        this._setIsMobile();
        this.close();
      });
    });
    this._resizeObserver.observe(window.document.body);
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  async selectItem(index) {
    const item = this._listItems[index];
    if (item.classList.contains('disabled')) {
      return true;
    }
    this._listItems[index].click();
    return false;
  }
  async updateList() {
    requestAnimationFrame(() => {
      this.renderedList = this._renderList();
    });
  }
  _handleOutsideClick() {
    if (!this.isOpen)
      return;
    this.close();
  }
  _highlightMatchingText(value) {
    const { query } = this.parent;
    if (this.parent.tagName === 'C-SELECT' || query === '')
      return value;
    const regex = new RegExp(query, 'gi');
    const highlighted = value
      .replace(/(<([^>]+)>)/gi, '')
      .replace(regex, (match) => `<mark>${match}</mark>`);
    return highlighted;
  }
  _getParentPosition() {
    return this.parent.shadowRoot
      .querySelector('.c-input__slot')
      .getBoundingClientRect();
  }
  _positionMenu() {
    const { innerWidth, innerHeight } = window;
    this._dialog.style.width = 'auto';
    this._dialog.style.opacity = '0';
    this._dialog.showModal();
    requestAnimationFrame(() => {
      let inputSlot = 'input-top';
      const { top: parentTop, width } = this._getParentPosition();
      const inputSize = this.el.getBoundingClientRect();
      this._inputSize = {
        height: inputSize.height,
        width: inputSize.width,
      };
      if (!this._isMobile) {
        this._dialog.style.width = `${width}px`;
        this._dialog.style.top = `${inputSize.top}px`;
        this._dialog.style.bottom = 'auto';
        this._dialog.style.left = `${inputSize.left}px`;
        const { bottom, right, height } = this._dialog.getBoundingClientRect();
        const isInView = {
          x: right < innerWidth,
          y: bottom < innerHeight,
        };
        const fitsOnTop = parentTop - height > 0;
        if (!fitsOnTop && !isInView.y) {
          this._dialog.style.maxHeight = `${parentTop}px`;
        }
        if (!isInView.y || this._openedOnTop) {
          this._openedOnTop = true;
          this._inputElement.hideDetails = true;
          inputSlot = 'input-bottom';
          this._dialog.style.top = 'auto';
          this._dialog.style.bottom = `${innerHeight - inputSize.top - 44}px`;
        }
      }
      this._dummyElement.style.width = `${this._getParentPosition().width}px`;
      this._dummyElement.style.height = `${this._inputSize.height}px`;
      this._dummyElement.style.display = 'block';
      this._dummyElement.slot = 'default';
      this._inputElement.slot = inputSlot;
      this._inputElement.hideDetails = true;
      this._dialog.style.opacity = '1';
      const input = this.parent.shadowRoot.querySelector('input');
      input.focus();
    });
  }
  _minimumQueryItem() {
    const { query, loading, minimumQueryLength, minimumQueryLengthMessage } = this.parent;
    if (query.length > minimumQueryLength || loading)
      return;
    return (h("li", null, h("c-icon", { path: mdiInformation, size: 18, color: "var(--c-info-600)" }), minimumQueryLengthMessage.replace('{n}', minimumQueryLength.toString())));
  }
  _emptyItem() {
    const { query, loading, noMatchingItemsMessage } = this
      .parent;
    if (!query || loading)
      return;
    return (h("li", null, h("c-icon", { path: mdiAlert, size: 18, color: "var(--c-warning-600)" }), noMatchingItemsMessage));
  }
  _renderList() {
    return this.itemType === 'option'
      ? this._renderOptionsList()
      : this._renderItemsList();
  }
  _renderOptionsList() {
    if (!this.items.length)
      return this._minimumQueryItem() || this._emptyItem();
    const options = Array.from(this.items);
    this._listItems.length = 0;
    return options.map((option, index) => {
      const optionValue = option.querySelector('c-option-value');
      if (optionValue) {
        optionValue.innerHTML = this._highlightMatchingText(optionValue.textContent);
      }
      return (h("li", { ref: (el) => this._listItems.push(el), id: `${this.hostId}-option-${option.value}`, tabindex: "-1", role: "option", "aria-set-size": this.items.length.toString(), "aria-pos-in-set": (index + 1).toString(), "aria-selected": (!!option.selected).toString(), class: { disabled: !!option.disabled }, "data-name": option.name, onClick: (event) => {
          if (option.disabled) {
            event.preventDefault();
            return;
          }
          this.selectOption.emit({ name: option.name, value: option.value });
        }, innerHTML: option.outerHTML }));
    });
  }
  _renderItemsList() {
    if (!this.items.length)
      return this._minimumQueryItem() || this._emptyItem();
    this._listItems.length = 0;
    return this.items.map((item, index) => {
      return (h("li", { ref: (el) => this._listItems.push(el), id: `${this.hostId}-option-${item.value}`, tabindex: "-1", role: "option", "aria-set-size": this.items.length.toString(), "aria-pos-in-set": (index + 1).toString(), "aria-selected": (this.index === index).toString(), class: { disabled: !!item.disabled }, "data-name": item.name, onClick: (event) => {
          if (item.disabled) {
            event.preventDefault();
            return;
          }
          this.selectOption.emit({ name: item.name, value: item.value });
        } }, h("span", { innerHTML: this._highlightMatchingText(item.name) })));
    });
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      var _a;
      const selection = this._listItems[this.index];
      const ending = !!this.items.length
        ? ', to navigate use up and down arrows'
        : '';
      const total = this._listItems.length;
      const position = this.index + 1;
      const isDisabled = !!((_a = selection === null || selection === void 0 ? void 0 : selection.classList) === null || _a === void 0 ? void 0 : _a.contains('disabled'));
      const beginning = isDisabled ? 'Disabled option - ' : '';
      let selectionText = !!selection
        ? `${beginning}${selection.dataset.name} -  ${position} of ${total} is highlighted`
        : null;
      if (this.index === null && this.type === 'autocomplete') {
        selectionText = this.items.length
          ? `${this.items.length} result${this.items.length !== 1 ? 's' : ''} available`
          : 'No search results available';
      }
      this.statusText = `${selectionText || ending}`;
      this._debounce = null;
    }, 1400);
  }
  render() {
    if (!this._isMobile &&
      this._dialog &&
      this.itemsPerPage &&
      this.itemsPerPage > 0 &&
      this.items.length > this.itemsPerPage) {
      this._dialog.style.maxHeight = 42 * (this.itemsPerPage + 0.5) + 60 + 'px';
      this._list.style.maxHeight = 42 * (this.itemsPerPage + 0.5) + 'px';
    }
    return (h(Host, null, h("slot", { name: "default" }), h("div", { class: "dummy", ref: (el) => (this._dummyElement = el) }), h("dialog", { tabindex: "-1", ref: (el) => (this._dialog = el), class: { mobile: this._isMobile }, onCancel: () => this.close() }, h("div", { onClick: (event) => event.stopPropagation() }, h("div", { id: 'announce-' + this.hostId, class: "visuallyhidden", "aria-live": "polite", "aria-atomic": "true" }, this.statusText), h("div", { class: "input-top-wrapper" }, h("slot", { name: "input-top" })), h("ul", { ref: (el) => (this._list = el), id: `${this.hostId}--results`, role: "listbox", "aria-expanded": this.isOpen.toString(), class: { active: this.isOpen, mobile: this._isMobile }, tabindex: "-1" }, this.renderedList), h("div", { class: {
        active: this._openedOnTop,
        'input-bottom-wrapper': true,
      } }, h("slot", { name: "input-bottom" }))))));
  }
  static get is() { return "c-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-dropdown.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-dropdown.css"]
    };
  }
  static get properties() {
    return {
      "itemsPerPage": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Items per page before adding scroll"
        },
        "attribute": "items-per-page",
        "reflect": false
      },
      "parent": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "HTMLCSelectElement | HTMLCAutocompleteElement",
          "resolved": "HTMLCAutocompleteElement | HTMLCSelectElement",
          "references": {
            "HTMLCSelectElement": {
              "location": "global",
              "id": "global::HTMLCSelectElement"
            },
            "HTMLCAutocompleteElement": {
              "location": "global",
              "id": "global::HTMLCAutocompleteElement"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Dropdown parent"
        }
      },
      "items": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "| NodeListOf<HTMLCOptionElement>\n    | CAutocompleteItem[]\n    | CSelectItem[]",
          "resolved": "CAutocompleteItem[] | CSelectItem[] | NodeListOf<HTMLCOptionElement>",
          "references": {
            "NodeListOf": {
              "location": "global",
              "id": "global::NodeListOf"
            },
            "HTMLCOptionElement": {
              "location": "global",
              "id": "global::HTMLCOptionElement"
            },
            "CAutocompleteItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CAutocompleteItem"
            },
            "CSelectItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CSelectItem"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Dropdown options"
        }
      },
      "index": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Current index value"
        },
        "attribute": "index",
        "reflect": false
      },
      "hostId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the element"
        },
        "attribute": "id",
        "reflect": false
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'select' | 'autocomplete'",
          "resolved": "\"autocomplete\" | \"select\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Type of the parent element"
        },
        "attribute": "type",
        "reflect": false
      },
      "itemType": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'option' | 'item'",
          "resolved": "\"item\" | \"option\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Type of items"
        },
        "attribute": "item-type",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "renderedList": {},
      "isOpen": {},
      "statusText": {}
    };
  }
  static get events() {
    return [{
        "method": "selectOption",
        "name": "selectOption",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Triggered when option is selected"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "dropdownStateChange",
        "name": "dropdownStateChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Triggered when dropdown opens or closes"
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "setStatusText": {
        "complexType": {
          "signature": "(text: string) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "private",
              "text": undefined
            }]
        }
      },
      "focusItem": {
        "complexType": {
          "signature": "(index: number) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "private",
              "text": undefined
            }]
        }
      },
      "open": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Open dropdown",
          "tags": []
        }
      },
      "close": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Close dropdown",
          "tags": []
        }
      },
      "selectItem": {
        "complexType": {
          "signature": "(index: number) => Promise<boolean>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<boolean>"
        },
        "docs": {
          "text": "Select item",
          "tags": [{
              "name": "returns",
              "text": "the disabled status of the input"
            }]
        }
      },
      "updateList": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Update list items",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "items",
        "methodName": "optionsWatcher"
      }, {
        "propName": "isOpen",
        "methodName": "stateWatcher"
      }, {
        "propName": "index",
        "methodName": "handleIndexChange"
      }];
  }
}
//# sourceMappingURL=c-dropdown.js.map
