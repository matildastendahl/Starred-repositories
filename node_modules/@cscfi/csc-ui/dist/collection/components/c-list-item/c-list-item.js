import { Host, h } from "@stencil/core";
export class CListItem {
  constructor() {
    this._onClick = (event, center = false) => {
      if (this.disabled) {
        event.preventDefault();
        return;
      }
      if (!this.ripple)
        return;
      this.el.shadowRoot
        .querySelector('c-ripple')
        .createRipple(event, this.el, center);
    };
    this._onKeyup = (event) => {
      if ([' ', 'Enter'].includes(event.key)) {
        this._onClick(event, true);
      }
    };
    this.active = false;
    this.disabled = false;
    this.disabledByParent = false;
    this.hoverable = false;
    this.ripple = false;
    this.href = undefined;
    this.target = '_blank';
  }
  onActiveChange(active) {
    const title = this.el.querySelector('c-list-item-title');
    if (!title)
      return;
    title.active = active;
  }
  get _slots() {
    const hasPreSlot = !!this.el.querySelector('[slot="pre"]');
    const hasPostSlot = !!this.el.querySelector('[slot="post"]');
    return {
      pre: hasPreSlot,
      post: hasPostSlot,
    };
  }
  get _tabindex() {
    if (this.disabled)
      return -1;
    if (this.ripple && !this.href)
      return 0;
    return null;
  }
  render() {
    const Tag = !!this.href ? 'a' : 'div';
    const classes = {
      'c-list-item': true,
      'c-list-item--active': this.active,
      'c-list-item--disabled': this.disabled,
      'c-list-item--hoverable': this.ripple || !!this.href || this.hoverable,
      'c-list-item--ripple': this.ripple,
    };
    let linkAttributes = {};
    if (!!this.href) {
      linkAttributes = { href: this.href, target: this.target };
    }
    return (h(Host, Object.assign({ role: "listitem", "aria-disabled": (!!this.disabled).toString(), onClick: this._onClick, onKeyup: this._onKeyup, class: classes }, (!!this.disabled ? { disabled: 'true' } : {}), (!!this.disabledByParent ? { 'data-disabled': 'true' } : {}), ([0, -1].includes(this._tabindex)
      ? { tabindex: this._tabindex }
      : {})), h(Tag, Object.assign({}, linkAttributes, { class: "c-list-item__content" }), this._slots.pre && h("slot", { name: "pre" }), h("slot", null), this._slots.post && h("slot", { name: "post" }), this.ripple && h("c-ripple", null))));
  }
  static get is() { return "c-list-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-list-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-list-item.css"]
    };
  }
  static get properties() {
    return {
      "active": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the item active"
        },
        "attribute": "active",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable the item"
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabledByParent": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Disabled by the parent list"
        },
        "attribute": "disabled-by-parent",
        "reflect": false,
        "defaultValue": "false"
      },
      "hoverable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Display background color on hover"
        },
        "attribute": "hoverable",
        "reflect": false,
        "defaultValue": "false"
      },
      "ripple": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Add ripple effect to the item"
        },
        "attribute": "ripple",
        "reflect": false,
        "defaultValue": "false"
      },
      "href": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Hyperlink url"
        },
        "attribute": "href",
        "reflect": false
      },
      "target": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hyperlink target"
        },
        "attribute": "target",
        "reflect": false,
        "defaultValue": "'_blank'"
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "active",
        "methodName": "onActiveChange"
      }];
  }
}
//# sourceMappingURL=c-list-item.js.map
