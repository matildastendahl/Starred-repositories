{"version":3,"file":"c-autocomplete.e2e.js","sourceRoot":"","sources":["../../../../../src/components/c-autocomplete/test/c-autocomplete.e2e.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAuB,UAAU,EAAE,MAAM,uBAAuB,CAAC;AACxE,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEpE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;EAC9B,IAAI,IAAa,CAAC;EAElB,IAAI,YAAwB,CAAC;EAE7B,UAAU,CAAC,KAAK,IAAI,EAAE;IACpB,IAAI,GAAG,MAAM,UAAU,CAAC;MACtB,IAAI,EAAE,wDAAwD;KAC/D,CAAC,CAAC;IACH,YAAY,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;EACnD,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;IACjC,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAE7C,MAAM,cAAc,CAAC,IAAI,CAAC,CAAC;EAC7B,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;IAC9C,MAAM,KAAK,GAAG;MACZ,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE;MACvC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE;KACxC,CAAC;IACF,YAAY,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAEzC,MAAM,WAAW,GAAG,MAAM,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAEjE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAE5B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAE1D,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC;IAEpB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEhC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAE5B,MAAM,aAAa,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;OAC7D,WAAW,CAAC;IAEf,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,EAAE,CAAC;IACxC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAE1C,MAAM,cAAc,CAAC,IAAI,CAAC,CAAC;EAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { E2EElement, E2EPage, newE2EPage } from '@stencil/core/testing';\nimport { takeScreenshot } from '../../../utils/test/takeScreenshot';\n\ndescribe('c-autocomplete', () => {\n  let page: E2EPage;\n\n  let autocomplete: E2EElement;\n\n  beforeEach(async () => {\n    page = await newE2EPage({\n      html: `<c-autocomplete label=\"Autocomplete\"></c-autocomplete>`,\n    });\n    autocomplete = await page.find('c-autocomplete');\n  });\n\n  it('renders correctly', async () => {\n    expect(autocomplete).toHaveClass('hydrated');\n\n    await takeScreenshot(page);\n  });\n\n  it('displays given items correctly', async () => {\n    const items = [\n      { name: 'Koskinen', value: 'koskinen' },\n      { name: 'Kairinen', value: 'kairinen' },\n    ];\n    autocomplete.setProperty('items', items);\n\n    const queryChange = await autocomplete.spyOnEvent('changeQuery');\n\n    await page.waitForChanges();\n\n    const input = await page.find('c-autocomplete >>> input');\n\n    await input.click();\n\n    await page.keyboard.type('nen');\n\n    await page.waitForChanges();\n\n    const renderedItems = (await page.find('c-autocomplete >>> ul'))\n      .textContent;\n\n    expect(renderedItems).toMatchSnapshot();\n    expect(queryChange.events.length).toBe(3);\n\n    await takeScreenshot(page);\n  });\n});\n"]}