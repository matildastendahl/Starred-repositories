import { Host, h, } from "@stencil/core";
import { mdiChevronDown, mdiClose } from "@mdi/js";
export class CAutocomplete {
  constructor() {
    this._preventDialogOpen = false;
    this._debounce = null;
    this._handleSlotChange = () => {
      this.optionElements = this.el.querySelectorAll('c-option');
      const selection = Array.from(this.optionElements).find((option) => option.selected);
      if (selection) {
        this.value = this.returnObject
          ? { name: selection.name, value: selection.value }
          : selection.value;
        this.changeValue.emit(this.value);
        this.changeQuery.emit(this.query);
        this.internals.setFormValue(selection.value.toString());
      }
      if (this.optionElements.length && !this.optionElementsExist) {
        this.optionElementsExist = true;
      }
    };
    this._toggleDropdown = (event) => {
      event.stopPropagation();
      if (this.dropdownVisible) {
        this._dropdownElement.close();
        return;
      }
      this._dropdownElement.open();
    };
    this._onButtonKeyDown = (src, event) => {
      event.stopPropagation();
      if (event.key !== 'Tab')
        event.preventDefault();
      if (['Enter', ' '].includes(event.key)) {
        if (src === 'chevron') {
          this._toggleDropdown(event);
          return;
        }
        this._reset(event);
        this._preventDialogOpen = true;
        this._inputElement.focus();
      }
    };
    this._reset = (event) => {
      event.stopPropagation();
      this.query = '';
      this.value = null;
      this.changeValue.emit(null);
      this.internals.setFormValue(null);
      this.changeQuery.emit('');
      this._preventDialogOpen = true;
      this._cInputElement.reset();
      this._inputElement.focus();
      this._dropdownElement.updateList();
    };
    this._onInputFocus = () => {
      if (!this._preventDialogOpen) {
        this._dropdownElement.open();
      }
      this._updateStatusText();
      this._preventDialogOpen = false;
    };
    this.items = [];
    this.value = null;
    this.query = null;
    this.hostId = undefined;
    this.disabled = false;
    this.label = undefined;
    this.name = undefined;
    this.placeholder = '';
    this.hideDetails = false;
    this.hint = '';
    this.loading = false;
    this.required = false;
    this.valid = true;
    this.validate = false;
    this.validateOnBlur = false;
    this.validation = 'Required field';
    this.shadow = false;
    this.returnObject = false;
    this.itemsPerPage = 6;
    this.minimumQueryLength = 0;
    this.minimumQueryLengthMessage = 'Type at least {n} characters';
    this.noMatchingItemsMessage = 'No suggestions found';
    this.optionElements = undefined;
    this.currentIndex = null;
    this.dropdownVisible = false;
    this.statusText = '';
    this.optionElementsExist = false;
  }
  get _id() {
    return this.hostId || `autocomplete_${CAutocomplete._uniqueId}`;
  }
  async reset() {
    this.query = '';
    this.changeValue.emit(null);
    this.internals.setFormValue(null);
    this.changeQuery.emit('');
    this._dropdownElement.updateList();
  }
  _handleKeyDown(event) {
    const alphanumeric = /^[0-9a-zA-Z ]+$/;
    if (event.key.match(alphanumeric) && event.key.length === 1) {
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
        return;
      }
      this._inputElement.focus();
      return;
    }
    if (event.key === 'Escape') {
      event.preventDefault();
      this._preventDialogOpen = true;
      this._dropdownElement.close();
      requestAnimationFrame(() => {
        this._inputElement.focus();
      });
      return;
    }
    if (event.key === 'Tab') {
      this._inputElement.focus();
      requestAnimationFrame(() => {
        this._dropdownElement.close();
      });
      return;
    }
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      if (!this._items.length)
        return;
      if (!this.dropdownVisible || this.currentIndex === null) {
        this.currentIndex = 0;
        this._dropdownElement.open();
        this._dropdownElement.focusItem(this.currentIndex);
        return;
      }
      this.currentIndex = Math.min(this.currentIndex + 1, this._items.length - 1);
      this._dropdownElement.focusItem(this.currentIndex);
      return;
    }
    if (event.key === 'ArrowUp') {
      event.preventDefault();
      if (this.currentIndex === 0) {
        this._dropdownElement.close();
        this._inputElement.focus();
      }
      if (!this.dropdownVisible || this.currentIndex === null) {
        this.currentIndex = this._items.length - 1;
        this._dropdownElement.open();
        this._dropdownElement.focusItem(this.currentIndex);
        return;
      }
      this.currentIndex = Math.max(this.currentIndex - 1, 0);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === 'Enter') {
      event.preventDefault();
      if (this.currentIndex === null)
        return;
      this._dropdownElement.selectItem(this.currentIndex);
    }
    if (event.key === 'Home' && this.dropdownVisible) {
      this.currentIndex = 0;
    }
    if (event.key === 'End' && this.dropdownVisible) {
      this.currentIndex = this._items.length - 1;
    }
  }
  onDropdownStateChange(event) {
    const isOpen = event.detail;
    this.dropdownVisible = isOpen;
    if (!isOpen) {
      requestAnimationFrame(() => {
        this.currentIndex = null;
      });
    }
  }
  onSelectOption(event) {
    this._dropdownElement.close();
    const { name, value } = event.detail;
    this.value = this.returnObject ? event.detail : value;
    this.changeValue.emit(this.value);
    this.internals.setFormValue(value);
    this.query = name;
    this.changeQuery.emit(name);
    this._preventDialogOpen = true;
    if (this.optionElementsExist) {
      Array.from(this.optionElements).forEach((item) => {
        item.selected = item.value === value && item.name === name;
      });
      this._dropdownElement.updateList();
    }
    this._inputElement.focus();
  }
  handleQueryChange() {
    this._updateStatusText();
  }
  _updateInput() {
    this._dropdownElement.open();
    this.query = this._inputElement.value;
    this.changeQuery.emit(this.query);
    this._dropdownElement.updateList();
  }
  _renderLoader() {
    return h("c-spinner", { color: "var(--_c-autocomplete-active-color)", size: 20 });
  }
  _renderChevron() {
    const classes = {
      'c-input-menu__chevron': true,
      'c-input-menu__chevron--active': this.dropdownVisible,
    };
    return (h("c-icon-button", { size: "x-small", class: classes, disabled: this.disabled, text: true, onClick: (event) => this._toggleDropdown(event), onKeyDown: (event) => this._onButtonKeyDown('chevron', event) }, h("c-icon", { path: mdiChevronDown, size: 24 })));
  }
  _renderReset() {
    return (h("c-icon-button", { "aria-label": "", size: "x-small", disabled: this.disabled, text: true, onClick: (event) => this._reset(event), onKeyDown: (event) => this._onButtonKeyDown('reset', event) }, h("c-icon", { path: mdiClose, size: 20 })));
  }
  _renderInputElement() {
    var _a;
    return (h("div", { class: "c-input-menu__input" }, h("input", { type: "text", ref: (el) => (this._inputElement = el), "aria-expanded": this.dropdownVisible.toString(), "aria-owns": this._inputId + '-items', "aria-autocomplete": "list", autocomplete: "off", class: "c-input__input", role: "combobox", value: this.query, name: (_a = this.name) !== null && _a !== void 0 ? _a : null, disabled: this.disabled, onInput: () => this._updateInput(), onFocus: () => this._onInputFocus() })));
  }
  componentWillLoad() {
    CAutocomplete._uniqueId += 1;
    this._inputId =
      'input_' +
        (this.hostId || this.label || this.placeholder).replace(/[^a-zA-Z0-9-_]/g, '');
  }
  get _items() {
    return this.optionElementsExist ? this.optionElements : this.items;
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      const ending = !!this._items.length
        ? ' or navigate using the up and down arrows'
        : '';
      if (this.currentIndex === null) {
        this.statusText = this._items.length
          ? `${this._items.length} result${this._items.length !== 1 ? 's' : ''} available`
          : 'No search results available';
      }
      if (this.query !== null && this._items.length) {
        this.statusText += ', input a search query to filter the results';
      }
      this._dropdownElement.setStatusText(this.statusText + ending);
      this._debounce = null;
    }, 1400);
  }
  render() {
    const itemType = this.optionElementsExist ? 'option' : 'item';
    return (h(Host, null, h("c-dropdown", { ref: (el) => (this._dropdownElement = el), id: `${this._id}-dropdown`, index: this.currentIndex, "items-per-page": this.itemsPerPage, "item-type": itemType, items: this._items, parent: this.el, type: "autocomplete", onKeyDown: (event) => this._handleKeyDown(event) }, h("c-input", { slot: "default", ref: (el) => (this._cInputElement = el), active: this.dropdownVisible, disabled: this.disabled, "hide-details": this.hideDetails, hint: this.hint, id: this.hostId, "input-id": this._inputId, label: this.label, name: this.name, placeholder: this.placeholder, required: this.required, shadow: this.shadow, valid: this.valid, validate: this.validate, "validate-on-blur": this.validateOnBlur, validation: this.validation, value: this.query, variant: "select" }, h("slot", { name: "pre", slot: "pre" }), h("div", { class: "c-input__content" }, this._renderInputElement(), this.loading && this._renderLoader(), !this.loading && this.value && this._renderReset(), !this.loading && !this.value && this._renderChevron(), h("slot", { onSlotchange: () => this._handleSlotChange() })), h("slot", { name: "post", slot: "post" })))));
  }
  static get is() { return "c-autocomplete"; }
  static get encapsulation() { return "shadow"; }
  static get formAssociated() { return true; }
  static get originalStyleUrls() {
    return {
      "$": ["c-autocomplete.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-autocomplete.css"]
    };
  }
  static get properties() {
    return {
      "items": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "CAutocompleteItem[]",
          "resolved": "CAutocompleteItem[]",
          "references": {
            "CAutocompleteItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CAutocompleteItem"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Dropdown items"
        },
        "defaultValue": "[]"
      },
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "string | number | CAutocompleteItem",
          "resolved": "CSelectItem & { ref?: HTMLElement; } | number | string",
          "references": {
            "CAutocompleteItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CAutocompleteItem"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Selected item"
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "null"
      },
      "query": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Search string"
        },
        "attribute": "query",
        "reflect": false,
        "defaultValue": "null"
      },
      "hostId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the element"
        },
        "attribute": "id",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable the input"
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Element label"
        },
        "attribute": "label",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Input field name"
        },
        "attribute": "name",
        "reflect": false
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Placeholder text"
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "''"
      },
      "hideDetails": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hide the hint and error messages"
        },
        "attribute": "hide-details",
        "reflect": false,
        "defaultValue": "false"
      },
      "hint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hint text for the input"
        },
        "attribute": "hint",
        "reflect": false,
        "defaultValue": "''"
      },
      "loading": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Show loading state"
        },
        "attribute": "loading",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Show required validation"
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "valid": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the valid\u00EDty of the input"
        },
        "attribute": "valid",
        "reflect": false,
        "defaultValue": "true"
      },
      "validate": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Manual validation"
        },
        "attribute": "validate",
        "reflect": false,
        "defaultValue": "false"
      },
      "validateOnBlur": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Validate the input on blur"
        },
        "attribute": "validate-on-blur",
        "reflect": false,
        "defaultValue": "false"
      },
      "validation": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom validation message"
        },
        "attribute": "validation",
        "reflect": false,
        "defaultValue": "'Required field'"
      },
      "shadow": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Shadow variant"
        },
        "attribute": "shadow",
        "reflect": false,
        "defaultValue": "false"
      },
      "returnObject": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Return object instead of value"
        },
        "attribute": "return-object",
        "reflect": false,
        "defaultValue": "false"
      },
      "itemsPerPage": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Items per page before adding scroll"
        },
        "attribute": "items-per-page",
        "reflect": false,
        "defaultValue": "6"
      },
      "minimumQueryLength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Minimum query length"
        },
        "attribute": "minimum-query-length",
        "reflect": false,
        "defaultValue": "0"
      },
      "minimumQueryLengthMessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Minimum query length message"
        },
        "attribute": "minimum-query-length-message",
        "reflect": false,
        "defaultValue": "'Type at least {n} characters'"
      },
      "noMatchingItemsMessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "No matching items message"
        },
        "attribute": "no-matching-items-message",
        "reflect": false,
        "defaultValue": "'No suggestions found'"
      }
    };
  }
  static get states() {
    return {
      "optionElements": {},
      "currentIndex": {},
      "dropdownVisible": {},
      "statusText": {},
      "optionElementsExist": {}
    };
  }
  static get events() {
    return [{
        "method": "changeQuery",
        "name": "changeQuery",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Triggered when text is typed"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "changeValue",
        "name": "changeValue",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Triggered when option is selected"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "reset": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Reset autocomplete state",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "query",
        "methodName": "handleQueryChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "dropdownStateChange",
        "method": "onDropdownStateChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "selectOption",
        "method": "onSelectOption",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
  static get attachInternalsMemberName() { return "internals"; }
}
CAutocomplete._uniqueId = 0;
//# sourceMappingURL=c-autocomplete.js.map
