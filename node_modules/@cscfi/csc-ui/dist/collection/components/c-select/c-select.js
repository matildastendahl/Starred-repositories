import { Host, h, } from "@stencil/core";
import { mdiChevronDown, mdiClose } from "@mdi/js";
export class CSelect {
  constructor() {
    this._preventDialogOpen = false;
    this._debounce = null;
    this._lastKeyPressTime = null;
    this._searchString = '';
    this._toggleDropdown = (event) => {
      event.stopPropagation();
      if (this.dropdownVisible) {
        this._dropdownElement.close();
        return;
      }
      this._dropdownElement.open();
    };
    this._onButtonKeyDown = (src, event) => {
      event.stopPropagation();
      if (event.key !== 'Tab')
        event.preventDefault();
      if (['Enter', ' '].includes(event.key)) {
        if (src === 'chevron') {
          this._toggleDropdown(event);
          return;
        }
        this._onReset(event);
        this._preventDialogOpen = true;
        requestAnimationFrame(() => {
          this._inputElement.focus();
        });
      }
    };
    this._onSlotChange = () => {
      this.optionElements = this.el.querySelectorAll('c-option');
      if (this.optionElements.length && !this.optionElementsExist) {
        this.optionElementsExist = true;
      }
      const selection = Array.from(this.optionElements).find((option) => option.selected);
      if (selection) {
        this.value = this.returnObject
          ? { name: selection.name, value: selection.value }
          : selection.value;
        this.changeValue.emit(this.value);
        this.internals.setFormValue(selection.value.toString());
      }
    };
    this._onReset = (event) => {
      event.stopPropagation();
      this.changeValue.emit(null);
      this.internals.setFormValue(null);
      this._selectionElement.classList.remove('c-input-menu__selection--show');
      this._selectionElement.replaceChildren(null);
      this._preventDialogOpen = true;
      this._cInputElement.reset();
      this._inputElement.focus();
      this._dropdownElement.updateList();
    };
    this._onInputFocus = () => {
      if (this.disabled)
        return;
      if (!this._preventDialogOpen) {
        this._dropdownElement.open();
      }
      this._updateStatusText();
      this._preventDialogOpen = false;
    };
    this.items = [];
    this.value = null;
    this.hostId = undefined;
    this.clearable = false;
    this.disabled = false;
    this.label = undefined;
    this.name = undefined;
    this.placeholder = '';
    this.hideDetails = false;
    this.hint = '';
    this.loading = false;
    this.required = false;
    this.valid = true;
    this.validate = false;
    this.validateOnBlur = false;
    this.validation = 'Required field';
    this.shadow = false;
    this.returnObject = false;
    this.itemsPerPage = 6;
    this.optionAsSelection = undefined;
    this.optionElements = undefined;
    this.currentIndex = null;
    this.dropdownVisible = false;
    this.statusText = '';
    this.optionElementsExist = false;
  }
  get _id() {
    return this.hostId || `select_${CSelect._uniqueId}`;
  }
  get _items() {
    return this.optionElementsExist ? this.optionElements : this.items;
  }
  get _value() {
    var _a, _b, _c, _d;
    if (!this.value)
      return '';
    if (!this.returnObject &&
      !['number', 'string'].includes(typeof this.value)) {
      console.warn(`[C-SELECT] The value should be of type 'number' or 'string' when return-object is not used.`);
      return '';
    }
    if (!this.returnObject &&
      ['number', 'string'].includes(typeof this.value)) {
      return (_b = (_a = Array.from(this._items)) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === this.value)) === null || _b === void 0 ? void 0 : _b.name;
    }
    return (_d = (_c = Array.from(this._items)) === null || _c === void 0 ? void 0 : _c.find((item) => item.value === this.value.value)) === null || _d === void 0 ? void 0 : _d.name;
  }
  async reset() {
    this.changeValue.emit(null);
    this.internals.setFormValue(null);
    this._dropdownElement.updateList();
  }
  handleKeyDown(event) {
    const alphanumeric = /^[0-9a-zA-Z ]+$/;
    if (this.disabled)
      return;
    if (event.key.match(alphanumeric) && event.key.length === 1) {
      if (this.dropdownVisible)
        return;
      if (Date.now() - this._lastKeyPressTime > 3000) {
        this._searchString = event.key;
      }
      else {
        this._searchString += event.key;
      }
      this._lastKeyPressTime = Date.now();
      const selectionIndex = Array.from(this._items).findIndex((i) => i.name.toLowerCase().startsWith(this._searchString));
      this.currentIndex = selectionIndex >= 0 ? selectionIndex : null;
      if (this.currentIndex !== null) {
        this._dropdownElement.selectItem(this.currentIndex);
      }
      return;
    }
    if (event.key === 'Escape') {
      this._preventDialogOpen = true;
      this._dropdownElement.close();
      this._inputElement.focus();
      return;
    }
    if (event.key === 'Tab') {
      this._dropdownElement.close();
    }
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      if (!this._items.length)
        return;
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
      }
      this.currentIndex =
        this.currentIndex === null
          ? 0
          : Math.min(this.currentIndex + 1, this._items.length - 1);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === 'ArrowUp') {
      event.preventDefault();
      if (this.currentIndex === 0) {
        this._dropdownElement.close();
        this._inputElement.focus();
      }
      if (!this.dropdownVisible) {
        this._dropdownElement.open();
      }
      this.currentIndex =
        this.currentIndex === null
          ? this._items.length - 1
          : Math.max(this.currentIndex - 1, 0);
      this._dropdownElement.focusItem(this.currentIndex);
    }
    if (event.key === ' ') {
      event.preventDefault();
    }
    if (event.key === 'Enter') {
      event.preventDefault();
      if (this.currentIndex === null)
        return;
      this._dropdownElement.selectItem(this.currentIndex);
    }
    if (event.key === 'Home' && this.dropdownVisible) {
      this.currentIndex = 0;
    }
    if (event.key === 'End' && this.dropdownVisible) {
      this.currentIndex = this._items.length - 1;
    }
  }
  onDropdownStateChange(event) {
    const isOpen = event.detail;
    this.dropdownVisible = isOpen;
  }
  onSelectOption(event) {
    this._dropdownElement.close();
    const { name, value } = event.detail;
    const selection = this._setCurrentIndex({ name, value });
    if (this.optionElementsExist && this.optionAsSelection && selection) {
      const clone = selection.cloneNode(true);
      this._selectionElement.classList.add('c-input-menu__selection--show');
      this._selectionElement.replaceChildren(clone);
    }
    this._dropdownElement.updateList();
    this.value = this.returnObject ? event.detail : value;
    this.changeValue.emit(this.value);
    this.internals.setFormValue(value);
    this._preventDialogOpen = true;
    this._inputElement.focus();
  }
  _setCurrentIndex({ value, name }) {
    let selection = null;
    Array.from(this._items).forEach((item, index) => {
      const selected = item.value === value && item.name === name;
      if (this.optionElementsExist) {
        item.selected = selected;
      }
      if (selected) {
        this.currentIndex = index;
        selection = item;
      }
    });
    return selection;
  }
  _updateInput() {
    this._dropdownElement.open();
    this._dropdownElement.updateList();
  }
  _updateStatusText() {
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      this.statusText = '';
      if (this.currentIndex === null) {
        this.statusText = this._items.length
          ? `${this._items.length} option${this._items.length !== 1 ? 's' : ''} available`
          : 'No options available';
      }
      const ending = !!this._items.length
        ? ', navigate using the up and down arrows'
        : '';
      this._dropdownElement.setStatusText(this.statusText + ending);
      this._debounce = null;
    }, 1400);
  }
  componentWillLoad() {
    CSelect._uniqueId += 1;
    this._inputId =
      'input_' +
        (this.hostId || this.label || this.placeholder).replace(/[^a-zA-Z0-9-_]/g, '');
  }
  componentDidLoad() {
    if (!this.value)
      return;
    const selection = Array.from(this._items).find((item) => {
      if (this.returnObject) {
        return (item.name === this.value.name &&
          item.value === this.value.value);
      }
      return item.value === this.value;
    });
    this._setCurrentIndex({
      name: selection.name,
      value: selection.value.toString(),
    });
  }
  _renderLoader() {
    return h("c-spinner", { color: "var(--_c-autocomplete-active-color)", size: 20 });
  }
  _renderChevron() {
    const classes = {
      'c-input-menu__chevron': true,
      'c-input-menu__chevron--active': this.dropdownVisible,
    };
    return (h("c-icon-button", { size: "x-small", class: classes, disabled: this.disabled, text: true, onClick: (event) => this._toggleDropdown(event), onKeyDown: (event) => this._onButtonKeyDown('chevron', event) }, h("c-icon", { path: mdiChevronDown, size: 24 })));
  }
  _renderInputElement() {
    var _a;
    return (h("div", { class: "c-input-menu__input" }, h("input", { type: "text", readonly: true, ref: (el) => (this._inputElement = el), "aria-expanded": this.dropdownVisible.toString(), "aria-owns": this._inputId + '-items', "aria-autocomplete": "list", autocomplete: "off", class: "c-input__input", role: "combobox", value: this._value, name: (_a = this.name) !== null && _a !== void 0 ? _a : null, disabled: this.disabled, onInput: () => this._updateInput(), onFocus: () => this._onInputFocus() }), h("div", { ref: (el) => (this._selectionElement = el), class: "c-input-menu__selection" })));
  }
  _renderReset() {
    return (h("c-icon-button", { "aria-label": "", size: "x-small", disabled: this.disabled, text: true, onClick: (event) => this._onReset(event), onKeyDown: (event) => this._onButtonKeyDown('reset', event) }, h("c-icon", { path: mdiClose, size: 20 })));
  }
  render() {
    const itemType = this.optionElementsExist ? 'option' : 'item';
    return (h(Host, null, h("c-dropdown", { ref: (el) => (this._dropdownElement = el), id: `${this._id}-dropdown`, index: this.currentIndex, "items-per-page": this.itemsPerPage, "item-type": itemType, items: this._items, parent: this.el, type: "select" }, h("c-input", { slot: "default", ref: (el) => (this._cInputElement = el), active: this.dropdownVisible, disabled: this.disabled, "hide-details": this.hideDetails, hint: this.hint, id: this.hostId, "input-id": this._inputId, label: this.label, name: this.name, placeholder: this.placeholder, required: this.required, shadow: this.shadow, valid: this.valid, validate: this.validate, "validate-on-blur": this.validateOnBlur, validation: this.validation, value: this.value, variant: "select", onClick: () => !this.disabled && this._dropdownElement.open() }, h("slot", { name: "pre", slot: "pre" }), h("div", { class: "c-input__content" }, this._renderInputElement(), this.loading && this._renderLoader(), !this.loading &&
      this.value &&
      this.clearable &&
      this._renderReset(), !this.loading &&
      (!this.value || !this.clearable) &&
      this._renderChevron(), h("slot", { onSlotchange: () => this._onSlotChange() })), h("slot", { name: "post", slot: "post" })))));
  }
  static get is() { return "c-select"; }
  static get encapsulation() { return "shadow"; }
  static get formAssociated() { return true; }
  static get originalStyleUrls() {
    return {
      "$": ["c-select.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-select.css"]
    };
  }
  static get properties() {
    return {
      "items": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "CSelectItem[]",
          "resolved": "CSelectItem[]",
          "references": {
            "CSelectItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CSelectItem"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Dropdown items"
        },
        "defaultValue": "[]"
      },
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "string | number | CSelectItem",
          "resolved": "number | string | { name: string; value: string | number; disabled?: boolean; }",
          "references": {
            "CSelectItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CSelectItem"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Selected item"
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "null"
      },
      "hostId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the element"
        },
        "attribute": "id",
        "reflect": false
      },
      "clearable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Make the selected value clearable"
        },
        "attribute": "clearable",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable the input"
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Element label"
        },
        "attribute": "label",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Input field name"
        },
        "attribute": "name",
        "reflect": false
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Placeholder text"
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "''"
      },
      "hideDetails": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hide the hint and error messages"
        },
        "attribute": "hide-details",
        "reflect": false,
        "defaultValue": "false"
      },
      "hint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hint text for the input"
        },
        "attribute": "hint",
        "reflect": false,
        "defaultValue": "''"
      },
      "loading": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Show loading state"
        },
        "attribute": "loading",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Show required validation"
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "valid": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the valid\u00EDty of the input"
        },
        "attribute": "valid",
        "reflect": false,
        "defaultValue": "true"
      },
      "validate": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Manual validation"
        },
        "attribute": "validate",
        "reflect": false,
        "defaultValue": "false"
      },
      "validateOnBlur": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Validate the input on blur"
        },
        "attribute": "validate-on-blur",
        "reflect": false,
        "defaultValue": "false"
      },
      "validation": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom validation message"
        },
        "attribute": "validation",
        "reflect": false,
        "defaultValue": "'Required field'"
      },
      "shadow": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Shadow variant"
        },
        "attribute": "shadow",
        "reflect": false,
        "defaultValue": "false"
      },
      "returnObject": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Return object instead of value"
        },
        "attribute": "return-object",
        "reflect": false,
        "defaultValue": "false"
      },
      "itemsPerPage": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Items per page before adding scroll"
        },
        "attribute": "items-per-page",
        "reflect": false,
        "defaultValue": "6"
      },
      "optionAsSelection": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "false",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "display the option as selection (works only when c-option elements are used)"
        },
        "attribute": "option-as-selection",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "optionElements": {},
      "currentIndex": {},
      "dropdownVisible": {},
      "statusText": {},
      "optionElementsExist": {}
    };
  }
  static get events() {
    return [{
        "method": "changeValue",
        "name": "changeValue",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Triggered when option is selected"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "reset": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Reset select state",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "handleKeyDown",
        "target": undefined,
        "capture": false,
        "passive": true
      }, {
        "name": "dropdownStateChange",
        "method": "onDropdownStateChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "selectOption",
        "method": "onSelectOption",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
  static get attachInternalsMemberName() { return "internals"; }
}
CSelect._uniqueId = 0;
//# sourceMappingURL=c-select.js.map
