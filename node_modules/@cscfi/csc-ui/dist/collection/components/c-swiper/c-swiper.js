import { h, } from "@stencil/core";
import { Swiper, Navigation } from "swiper";
import { mdiChevronLeft, mdiChevronRight } from "@mdi/js";
export class CSwiper {
  constructor() {
    this._debounce = null;
    this.value = undefined;
    this.elementId = undefined;
    this.isBeginning = true;
    this.isEnd = false;
    this.statusText = '';
  }
  onTabClick(event) {
    event.stopPropagation();
    this.value = event.detail;
    this._updateStatusText();
  }
  handleKeyUp(event) {
    const index = +event.target.dataset.index;
    const isArrowLeft = event.key === 'ArrowLeft';
    const isArrowRight = event.key === 'ArrowRight';
    const isBeginning = index === 0;
    const isEnd = index === this.slotItems.length - 1;
    if (!isArrowRight && !isArrowLeft)
      return;
    if (isArrowLeft) {
      if (isBeginning)
        return;
      this.value = this.slotItems[index - 1].value;
    }
    if (isArrowRight) {
      if (isEnd)
        return;
      this.value = this.slotItems[index + 1].value;
    }
    this._slideToTab(index - 1);
    this.slotItems.forEach((child) => {
      const isActive = child.value === this.value;
      if (isActive) {
        child.focus();
      }
    });
    this.changeValue.emit(this.value);
  }
  get id() {
    return this.elementId || `c-swiper--${CSwiper._uniqueId}`;
  }
  get slotItems() {
    return Array.from(this._wrapper.children);
  }
  _slideToTab(index) {
    this._swiper.slideTo(index);
    this._swiper.update();
  }
  componentDidLoad() {
    this._options = {
      modules: [Navigation],
      breakpointsBase: 'container',
      loop: false,
      speed: 300,
      slideToClickedSlide: true,
      slidesPerView: 1,
      spaceBetween: 8,
      threshold: 4,
      breakpoints: {
        480: {
          slidesPerView: 2,
        },
        720: {
          slidesPerView: 3,
        },
        960: {
          slidesPerView: 4,
        },
      },
      navigation: {
        nextEl: '.c-icon-button--next',
        prevEl: '.c-icon-button--prev',
      },
      keyboard: true,
    };
    this._initializeSwiper();
  }
  _initializeSwiper() {
    var _a;
    for (const [index, slide] of this.slotItems.entries()) {
      slide.classList.add('swiper-slide');
      slide.setAttribute('data-index', index.toString());
      slide.value = (_a = slide.value) !== null && _a !== void 0 ? _a : index;
      slide.position = index + 1;
      slide.setsize = this.slotItems.length;
      if (slide.active) {
        requestAnimationFrame(() => {
          this._slideToTab(index);
        });
      }
    }
    this._swiper = new Swiper(this._container, Object.assign({}, this._options));
    this._swiper.on('activeIndexChange', ({ isBeginning, isEnd }) => {
      this.isBeginning = isBeginning;
      this.isEnd = isEnd;
    });
  }
  _updateStatusText() {
    this.statusText = '';
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = window.setTimeout(() => {
      var _a;
      const selection = (_a = this.slotItems) === null || _a === void 0 ? void 0 : _a.find((item) => item.value === this.value);
      this.statusText += `Currently selected - ${selection === null || selection === void 0 ? void 0 : selection.label}`;
      this._debounce = null;
    }, 1400);
  }
  componentWillLoad() {
    CSwiper._uniqueId += 1;
  }
  render() {
    return (h("div", { class: "c-swiper swiper" }, h("div", { id: 'announce-' + this.id, class: "visuallyhidden", "aria-live": "polite", "aria-atomic": "true" }, this.statusText), h("div", { class: "swiper-container", ref: (el) => (this._container = el) }, h("div", { role: "tablist", class: "swiper-wrapper", ref: (el) => (this._wrapper = el) }, h("slot", null)), h("div", { class: "c-swiper__navigation" }, h("c-icon-button", { "aria-disabled": this.isBeginning ? 'true' : 'false', "aria-label": "previous page", class: "c-icon-button--prev", disabled: this.isBeginning, size: "small", ghost: true }, h("span", { class: "visuallyhidden" }, "Previous", h("span", null, "page")), h("svg", { width: "24", height: "24", viewBox: "0 0 24 24" }, h("path", { d: mdiChevronLeft }))), h("c-icon-button", { "aria-disabled": this.isEnd ? 'true' : 'false', "aria-label": "next page", class: "c-icon-button--next", disabled: this.isEnd, size: "small", ghost: true }, h("span", { class: "visuallyhidden" }, "Next", h("span", null, "page")), h("svg", { width: "24", height: "24", viewBox: "0 0 24 24" }, h("path", { d: mdiChevronRight })))))));
  }
  static get is() { return "c-swiper"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-swiper.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-swiper.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "number | string",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Value of the swiper"
        },
        "attribute": "value",
        "reflect": true
      },
      "elementId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the swiper element"
        },
        "attribute": "id",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "isBeginning": {},
      "isEnd": {},
      "statusText": {}
    };
  }
  static get events() {
    return [{
        "method": "changeValue",
        "name": "changeValue",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emit value change to the parent"
        },
        "complexType": {
          "original": "number | string",
          "resolved": "number | string",
          "references": {}
        }
      }];
  }
  static get listeners() {
    return [{
        "name": "changeValue",
        "method": "onTabClick",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "keyup",
        "method": "handleKeyUp",
        "target": undefined,
        "capture": true,
        "passive": false
      }];
  }
}
CSwiper._uniqueId = 0;
//# sourceMappingURL=c-swiper.js.map
