import { Host, h } from "@stencil/core";
export class CTable {
  constructor() {
    this.mobileBreakpoint = 600;
    this.responsive = false;
  }
  get cells() {
    return Array.from(this._tableElement.querySelectorAll('td'));
  }
  get headers() {
    return Array.from(this._tableElement.querySelectorAll('th')).map((th) => th.innerHTML);
  }
  _handleResize(width) {
    const isMobile = width <= this.mobileBreakpoint;
    this._tableElement.classList.toggle('c-table--mobile', isMobile);
  }
  componentWillLoad() {
    this._tableElement = this.el.querySelector('table');
    this._tableElement.classList.add('c-table');
    this._observer = new ResizeObserver(([entry]) => {
      const { width } = entry.contentRect;
      this._handleResize(width);
    });
  }
  componentDidLoad() {
    if (this.responsive) {
      this._observer.observe(this._tableElement);
    }
    this.cells.forEach((cell, index) => {
      cell.dataset.title = this.headers[+index % this.headers.length];
    });
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
  static get is() { return "c-table"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-table.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-table.css"]
    };
  }
  static get properties() {
    return {
      "mobileBreakpoint": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Mobile breakpoint in pixels"
        },
        "attribute": "mobile-breakpoint",
        "reflect": false,
        "defaultValue": "600"
      },
      "responsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Should the table be responsive"
        },
        "attribute": "responsive",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get elementRef() { return "el"; }
}
//# sourceMappingURL=c-table.js.map
