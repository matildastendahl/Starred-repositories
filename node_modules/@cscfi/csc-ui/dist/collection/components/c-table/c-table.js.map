{"version":3,"file":"c-table.js","sourceRoot":"","sources":["../../../../src/components/c-table/c-table.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAUlE,MAAM,OAAO,MAAM;;4BAMU,GAAG;sBAKT,KAAK;;EAM1B,IAAI,KAAK;IACP,OAAO,KAAK,CAAC,IAAI,CACf,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAChB,CAAC;EAC9B,CAAC;EAED,IAAI,OAAO;IACT,OACE,KAAK,CAAC,IAAI,CACR,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAE5C,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;EAC9B,CAAC;EAEO,aAAa,CAAC,KAAa;IACjC,MAAM,QAAQ,GAAG,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC;IAEhD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;EACnE,CAAC;EAED,iBAAiB;IACf,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IACpD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAE5C,IAAI,CAAC,SAAS,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE;MAC9C,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,WAAW,CAAC;MAEpC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,gBAAgB;IACd,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KAC5C;IAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;MACjC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,eAAa,CACR,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Host, Prop, h } from '@stencil/core';\n\n/**\n * @group tables\n */\n@Component({\n  tag: 'c-table',\n  styleUrl: 'c-table.scss',\n  shadow: false,\n})\nexport class CTable {\n  @Element() el: HTMLCTableElement;\n\n  /**\n   * Mobile breakpoint in pixels\n   */\n  @Prop() mobileBreakpoint = 600;\n\n  /**\n   * Should the table be responsive\n   */\n  @Prop() responsive = false;\n\n  private _tableElement: HTMLTableElement;\n\n  private _observer: ResizeObserver;\n\n  get cells() {\n    return Array.from(\n      this._tableElement.querySelectorAll('td'),\n    ) as HTMLTableCellElement[];\n  }\n\n  get headers() {\n    return (\n      Array.from(\n        this._tableElement.querySelectorAll('th'),\n      ) as HTMLTableCellElement[]\n    ).map((th) => th.innerHTML);\n  }\n\n  private _handleResize(width: number) {\n    const isMobile = width <= this.mobileBreakpoint;\n\n    this._tableElement.classList.toggle('c-table--mobile', isMobile);\n  }\n\n  componentWillLoad() {\n    this._tableElement = this.el.querySelector('table');\n    this._tableElement.classList.add('c-table');\n\n    this._observer = new ResizeObserver(([entry]) => {\n      const { width } = entry.contentRect;\n\n      this._handleResize(width);\n    });\n  }\n\n  componentDidLoad() {\n    if (this.responsive) {\n      this._observer.observe(this._tableElement);\n    }\n\n    this.cells.forEach((cell, index) => {\n      cell.dataset.title = this.headers[+index % this.headers.length];\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"]}