import { Host, h } from "@stencil/core";
export class CRipple {
  async createRipple(event, parent, center = false) {
    this._rippleElement.classList.remove('animate');
    const width = parent.offsetWidth;
    const height = parent.offsetHeight;
    const rect = event.target.getBoundingClientRect();
    const maxDimension = this._calculateHeight(Math.max(parent.offsetWidth, parent.offsetHeight));
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const top = y - maxDimension / 2 + 'px';
    const left = x - maxDimension / 2 + 'px';
    const centerPosition = {
      top: maxDimension === height
        ? '0px'
        : ((maxDimension - height) / 2) * -1 + 'px',
      left: maxDimension === width
        ? '0px'
        : ((maxDimension - width) / 2) * -1 + 'px',
    };
    this.el.style.width = width + 'px';
    this.el.style.height = height + 'px';
    this._rippleElement.style.width = maxDimension + 'px';
    this._rippleElement.style.height = maxDimension + 'px';
    this._rippleElement.style.top = center ? centerPosition.top : top;
    this._rippleElement.style.left = center ? centerPosition.left : left;
    this._rippleElement.classList.add('animate');
    setTimeout(() => {
      this._rippleElement.classList.remove('animate');
    }, 500);
  }
  _calculateHeight(height) {
    const radius = (height / 2) * Math.sqrt(2);
    return radius * 2;
  }
  render() {
    return (h(Host, { "aria-hidden": "true" }, h("div", { ref: (el) => (this._rippleElement = el), class: "c-ripple" })));
  }
  static get is() { return "c-ripple"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-ripple.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-ripple.css"]
    };
  }
  static get methods() {
    return {
      "createRipple": {
        "complexType": {
          "signature": "(event: MouseEvent, parent: HTMLElement, center?: boolean) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }, {
              "tags": [],
              "text": ""
            }, {
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            },
            "MouseEvent": {
              "location": "global",
              "id": "global::MouseEvent"
            },
            "HTMLElement": {
              "location": "global",
              "id": "global::HTMLElement"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Creates a ripple",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
}
//# sourceMappingURL=c-ripple.js.map
