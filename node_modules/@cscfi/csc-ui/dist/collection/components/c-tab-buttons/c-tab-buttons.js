import { h, Host, } from "@stencil/core";
export class CTabButtons {
  constructor() {
    this._focusedTabValue = this.value;
    this.value = 0;
    this.mandatory = false;
    this.tabs = false;
    this.size = 'default';
    this.hostDisabled = false;
  }
  onValueChange(value) {
    var _a, _b;
    this.buttons.forEach((button) => {
      if (!button.disabled) {
        button.setAttribute('outlined', 'true');
      }
    });
    if (value !== null) {
      this.buttons.forEach((button) => {
        if (!button.disabled) {
          button.setAttribute('outlined', 'true');
        }
      });
      const button = this.buttons.find((btn) => btn.value === value) || this.buttons[value];
      if (button) {
        button.removeAttribute('outlined');
      }
    }
    this.changeValue.emit((_b = (_a = this.buttons[value]) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : value);
  }
  tabFocusHandler(event) {
    event.stopPropagation();
    this._focusedTabValue = event.detail;
  }
  handleKeyUp(event) {
    var _a, _b;
    event.stopPropagation();
    const isArrowLeft = event.key === 'ArrowLeft';
    const isArrowRight = event.key === 'ArrowRight';
    if (!isArrowRight && !isArrowLeft)
      return;
    const tabIndex = (_a = this._getTabIndex(this._focusedTabValue)) !== null && _a !== void 0 ? _a : +((_b = this.buttons[this._focusedTabValue]) === null || _b === void 0 ? void 0 : _b.dataset.index);
    const firstAvailableValue = this.availableValues.at(0);
    const lastAvailableValue = this.availableValues.at(-1);
    const isBeginning = this._focusedTabValue === firstAvailableValue;
    const isEnd = this._focusedTabValue === lastAvailableValue;
    const nextValue = isEnd
      ? firstAvailableValue
      : this.availableValues[tabIndex + 1];
    const previousValue = isBeginning
      ? lastAvailableValue
      : this.availableValues[tabIndex - 1];
    const value = isArrowLeft ? previousValue : nextValue;
    const item = this.buttons
      .find((button) => button.value === value || button.dataset.index === value)
      .shadowRoot.querySelector('button');
    requestAnimationFrame(() => {
      item === null || item === void 0 ? void 0 : item.focus();
    });
  }
  onTabChange(event) {
    if (!this.tabs)
      event.stopPropagation();
    const isActive = this.value !== null &&
      (this._isIndexBased
        ? +event.detail.value === +this.value
        : event.detail.value === this.value);
    if (this.mandatory && isActive) {
      return;
    }
    const nullValue = this._isIndexBased ? null : '';
    const value = this._isIndexBased ? +event.detail.value : event.detail.value;
    this.value = isActive ? nullValue : value;
  }
  get availableValues() {
    return this.buttons.map((button) => { var _a; return (_a = button.value) !== null && _a !== void 0 ? _a : button.dataset.index; });
  }
  get buttons() {
    return Array.from(this.el.querySelectorAll(':scope > c-button'));
  }
  _getTabIndex(value) {
    const index = this.availableValues.findIndex((buttonValue) => buttonValue === value);
    return index;
  }
  componentDidLoad() {
    this._isIndexBased = this.buttons.every((button) => typeof button.value === 'undefined');
    this.buttons.forEach((button, index) => {
      var _a;
      button.setAttribute('data-index', String(index));
      button.setAttribute('tabs', 'true');
      if (!button.disabled) {
        button.setAttribute('outlined', 'true');
        button.outlined = true;
      }
      button.disabled = this.hostDisabled || button.disabled;
      button.size = this.size;
      const isActive = this.value !== null &&
        (this._isIndexBased
          ? index === +this.value
          : button.value === this.value);
      (_a = button.shadowRoot
        .querySelector('button')) === null || _a === void 0 ? void 0 : _a.setAttribute('tabindex', isActive && !this.hostDisabled ? '0' : '-1');
      if (isActive) {
        button.removeAttribute('outlined');
      }
    });
  }
  render() {
    const classes = {
      'c-tab-buttons': true,
      disabled: this.hostDisabled,
    };
    return (h(Host, { class: classes }, h("slot", null)));
  }
  static get is() { return "c-tab-buttons"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-tab-buttons.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-tab-buttons.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "number | string",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Value of tab buttons"
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "0"
      },
      "mandatory": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Always require a selection"
        },
        "attribute": "mandatory",
        "reflect": false,
        "defaultValue": "false"
      },
      "tabs": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Used as controller for c-tabs"
        },
        "attribute": "tabs",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'default' | 'small'",
          "resolved": "\"default\" | \"small\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size of the buttons"
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'default'"
      },
      "hostDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable tab buttons"
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "changeValue",
        "name": "changeValue",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emit changes to the parent"
        },
        "complexType": {
          "original": "number | string",
          "resolved": "number | string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "onValueChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "tabFocus",
        "method": "tabFocusHandler",
        "target": undefined,
        "capture": false,
        "passive": true
      }, {
        "name": "keyup",
        "method": "handleKeyUp",
        "target": undefined,
        "capture": true,
        "passive": false
      }, {
        "name": "tabChange",
        "method": "onTabChange",
        "target": undefined,
        "capture": false,
        "passive": true
      }];
  }
}
//# sourceMappingURL=c-tab-buttons.js.map
