import { h, Host, } from "@stencil/core";
export class CButton {
  constructor() {
    this._onClick = (event, center = false) => {
      var _a;
      if (this.disabled) {
        event.preventDefault();
        return;
      }
      this._rippleElement.createRipple(event, this._container, center);
      if (this.tabs) {
        this.tabChange.emit({
          value: (_a = this.value) !== null && _a !== void 0 ? _a : this.hostElement.dataset.index,
          element: this.hostElement,
        });
      }
      if (this.type === 'submit') {
        const submitButton = this._createHiddenSubmitButton();
        submitButton.click();
        submitButton.remove();
      }
    };
    this._createHiddenSubmitButton = () => {
      const form = this._closestElementComposed('form', this._container);
      const submitButton = document.createElement('button');
      submitButton.type = this.type;
      submitButton.style.display = 'none';
      submitButton.disabled = this.disabled;
      form.appendChild(submitButton);
      return submitButton;
    };
    this._onKeyDown = (event) => {
      if (['Space', 'Enter'].includes(event.code)) {
        if (!!this.href) {
          window.open(this.href, this.target);
        }
        event.preventDefault();
        this._onClick(event, true);
      }
    };
    this.inverted = false;
    this.outlined = false;
    this.ghost = false;
    this.danger = false;
    this.grouped = false;
    this.text = false;
    this.loading = false;
    this.fit = false;
    this.noRadius = false;
    this.type = 'button';
    this.disabled = false;
    this.value = undefined;
    this.hostId = undefined;
    this.size = 'default';
    this.href = undefined;
    this.target = '_blank';
    this.tabs = false;
  }
  onTabFocus() {
    var _a;
    this.tabFocus.emit((_a = this.value) !== null && _a !== void 0 ? _a : this.hostElement.dataset.index);
  }
  _closestElementComposed(selector, base) {
    function __closestFrom(el) {
      const found = el.closest(selector);
      return found ? found : __closestFrom(el.getRootNode().host);
    }
    return __closestFrom(base);
  }
  componentWillLoad() {
    this._containerhasDescriptionSlot = !!this.hostElement.querySelector('[slot="description"]');
  }
  render() {
    const contentClasses = {
      'c-button__content': true,
      'c-button__content--description': this._containerhasDescriptionSlot,
      'c-button__content--fitted': !!this.fit,
      'c-button__content--large': this.size === 'large',
      'c-button__content--no-radius': !!this.noRadius,
      'c-button__content--small': this.size === 'small',
    };
    const innerClasses = {
      'c-button__content__inner': true,
      'hide-text': this.loading,
    };
    const buttonClasses = {
      fit: !!this.fit,
      grouped: this.grouped,
      outlined: this.outlined,
    };
    const hostClasses = {
      'c-button': true,
      'c-button--ghost': this.ghost,
      'c-button--outlined': this.outlined,
      'c-button--danger': this.danger,
      'c-button--disabled': this.disabled,
      'c-button--inverted': this.inverted,
      'c-button--text': this.text,
      'c-button--fitted': !!this.fit,
      'c-button--description': !!this._containerhasDescriptionSlot,
      'c-button--active': this.grouped && !this.outlined,
      'c-button--no-radius': !!this.noRadius,
      [`c-button--${this.size}`]: true,
    };
    const descriptionSlotClasses = {
      'c-button__content__description': this._containerhasDescriptionSlot,
      'c-button__content__description--loading': this.loading,
    };
    const Tag = !!this.href ? 'a' : 'button';
    const hostAttributes = {
      onKeyDown: this._onKeyDown,
    };
    const attributes = {
      id: this.hostId,
      class: buttonClasses,
      disabled: this.disabled,
      onClick: this._onClick,
      type: this.type,
    };
    let linkAttributes = {};
    if (!!this.href) {
      linkAttributes = { href: this.href, target: this.target };
    }
    const spinnerSizes = {
      small: 20,
      default: 24,
      large: 28,
    };
    return (h(Host, Object.assign({ class: hostClasses }, hostAttributes), h(Tag, Object.assign({}, attributes, linkAttributes), h("div", { class: contentClasses, ref: (el) => (this._container = el) }, h("div", { class: innerClasses }, this.loading && (h("div", { class: "c-button__loader" }, h("c-spinner", { color: "var(--_c-button-loader-color)", size: spinnerSizes[this.size] }))), h("slot", null)), this._containerhasDescriptionSlot && (h("div", { class: descriptionSlotClasses }, h("slot", { name: "description" })))), h("c-ripple", { ref: (el) => (this._rippleElement = el) }))));
  }
  static get is() { return "c-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-button.css"]
    };
  }
  static get properties() {
    return {
      "inverted": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Inverted button style for dark backgrounds"
        },
        "attribute": "inverted",
        "reflect": false,
        "defaultValue": "false"
      },
      "outlined": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Outlined button style"
        },
        "attribute": "outlined",
        "reflect": false,
        "defaultValue": "false"
      },
      "ghost": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Light button background"
        },
        "attribute": "ghost",
        "reflect": false,
        "defaultValue": "false"
      },
      "danger": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Danger variant style"
        },
        "attribute": "danger",
        "reflect": false,
        "defaultValue": "false"
      },
      "grouped": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "True when used as a tab button"
        },
        "attribute": "grouped",
        "reflect": false,
        "defaultValue": "false"
      },
      "text": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Transparent button background"
        },
        "attribute": "text",
        "reflect": false,
        "defaultValue": "false"
      },
      "loading": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Display loader on the button"
        },
        "attribute": "loading",
        "reflect": false,
        "defaultValue": "false"
      },
      "fit": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Fit width to containing element"
        },
        "attribute": "fit",
        "reflect": false,
        "defaultValue": "false"
      },
      "noRadius": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Remove the default border radius"
        },
        "attribute": "no-radius",
        "reflect": false,
        "defaultValue": "false"
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'button' | 'submit'",
          "resolved": "\"button\" | \"submit\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Button type"
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "'button'"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable the button"
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "number | string",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Value for the button\n- for use in the c-tab-buttons"
        },
        "attribute": "value",
        "reflect": false
      },
      "hostId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the button"
        },
        "attribute": "id",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'default' | 'small' | 'large'",
          "resolved": "\"default\" | \"large\" | \"small\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size of the button"
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'default'"
      },
      "href": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hyperlink url"
        },
        "attribute": "href",
        "reflect": false
      },
      "target": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hyperlink target"
        },
        "attribute": "target",
        "reflect": false,
        "defaultValue": "'_blank'"
      },
      "tabs": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Used a s atab button"
        },
        "attribute": "tabs",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "tabChange",
        "name": "tabChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Emit changes to the parent"
        },
        "complexType": {
          "original": "{\n    value: number | string;\n    element: HTMLCButtonElement;\n  }",
          "resolved": "{ value: string | number; element: HTMLCButtonElement; }",
          "references": {
            "HTMLCButtonElement": {
              "location": "global",
              "id": "global::HTMLCButtonElement"
            }
          }
        }
      }, {
        "method": "tabFocus",
        "name": "tabFocus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "private",
              "text": undefined
            }],
          "text": "Emit focus to the parent"
        },
        "complexType": {
          "original": "number | string",
          "resolved": "number | string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "hostElement"; }
  static get listeners() {
    return [{
        "name": "focus",
        "method": "onTabFocus",
        "target": undefined,
        "capture": false,
        "passive": true
      }];
  }
}
//# sourceMappingURL=c-button.js.map
