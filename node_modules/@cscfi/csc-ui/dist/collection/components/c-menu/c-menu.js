import { Host, h, } from "@stencil/core";
import { mdiChevronDown } from "@mdi/js";
export class CMenu {
  constructor() {
    this.items = [];
    this.contentClass = '';
    this.custom = false;
    this.small = false;
    this.flat = false;
    this.itemsPerPage = 6;
    this.menuItemsComponent = null;
    this.menuWrapperComponent = null;
    this.currentIndex = null;
    this.active = false;
  }
  handleKeyDown(ev) {
    const openKeys = ['ArrowDown', 'ArrowUp', 'Enter', ' '];
    if (!this.active && openKeys.includes(ev.key)) {
      ev.preventDefault();
      this.currentIndex = null;
      if (ev.key === 'ArrowDown') {
        this.currentIndex = 0;
      }
      if (ev.key === 'ArrowUp') {
        this.currentIndex = this.items.length - 1;
      }
      this._onClick();
    }
    if (ev.key === 'Escape') {
      this._hideMenu();
    }
  }
  _createWrapperElement() {
    const existingOverlay = document.querySelector('.c-menu-overlay__content');
    if (existingOverlay)
      return existingOverlay;
    const overlay = document.createElement('div');
    overlay.classList.add('c-menu-overlay');
    const overlayContent = document.createElement('div');
    overlayContent.classList.add('c-menu-overlay__content');
    overlay.appendChild(overlayContent);
    document.body.appendChild(overlay);
    return overlayContent;
  }
  _getNativeChild(parent = this.host) {
    let element = parent.shadowRoot.children[0];
    if (!!element.shadowRoot) {
      element = this._getNativeChild(element);
    }
    return element;
  }
  _addMenuItemsComponentListeners(height, width) {
    this.menuItemsComponent.onclose = () => {
      this._hideMenu();
      const element = this._getNativeChild();
      element.focus();
    };
    this.menuItemsComponent.addEventListener('open', (event) => this._onOpen(event, height, width), {
      once: true,
    });
  }
  _getHostPosition() {
    return this.host.getBoundingClientRect();
  }
  _hideMenu() {
    var _a;
    (_a = this.menuItemsComponent) === null || _a === void 0 ? void 0 : _a.remove();
    this.menuItemsComponent = null;
    this.active = false;
  }
  _onOpen(event, height, width) {
    window.requestAnimationFrame(() => {
      var _a, _b, _c;
      const { isInView, height: menuHeight, width: menuWidth } = event.detail;
      if (!isInView.y) {
        const posY = parseFloat(this.menuItemsComponent.style.top) - menuHeight - height;
        this.menuItemsComponent.style.top = `${posY}px`;
        this.menuItemsComponent.top = posY;
      }
      if (!isInView.x) {
        this.menuItemsComponent.style.left = `${parseFloat(this.menuItemsComponent.style.left) - menuWidth + width}px`;
      }
      this.active = true;
      this.menuItemsComponent.active = true;
      (_c = (_b = (_a = this.menuItemsComponent) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('ul')) === null || _c === void 0 ? void 0 : _c.focus();
    });
  }
  _onClick() {
    if (this.menuItemsComponent)
      return;
    const { bottom, left, width, height } = this._getHostPosition();
    this.menuItemsComponent = document.createElement('c-menu-items');
    this.menuItemsComponent.style.top = `${bottom}px`;
    this.menuItemsComponent.style.left = `${left}px`;
    this.menuItemsComponent.style.minWidth = `${width}px`;
    this.menuItemsComponent.parent = this.host;
    this.menuItemsComponent.items = this.items;
    this.menuItemsComponent.small = this.small;
    this.menuItemsComponent.itemsPerPage = this.itemsPerPage;
    this.menuItemsComponent.top = bottom;
    this.menuItemsComponent.id = `c-menu-items-${CMenu._uniqueId}`;
    this.menuItemsComponent.index = this.currentIndex;
    this.menuItemsComponent.setAttribute('tabindex', '-1');
    this.menuItemsComponent.setAttribute('role', 'listbox');
    if (this.contentClass) {
      this.menuItemsComponent.classList.add(this.contentClass);
    }
    this._addMenuItemsComponentListeners(height, width);
    this._createWrapperElement().appendChild(this.menuItemsComponent);
    window.setTimeout(() => {
      var _a, _b, _c, _d;
      (_d = (_c = (_b = (_a = this.menuItemsComponent) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.children[0]) === null || _c === void 0 ? void 0 : _c.children[0]) === null || _d === void 0 ? void 0 : _d.focus();
    }, 200);
  }
  componentWillLoad() {
    CMenu._uniqueId += 1;
  }
  disconnectedCallback() {
    this._hideMenu();
  }
  render() {
    const hostClasses = {
      'c-menu': true,
      'c-menu--custom': this.custom,
      'c-menu--active': this.active,
      'c-menu--no-hover': this.flat,
      'c-menu--small': this.small,
    };
    return (h(Host, { class: hostClasses }, h("button", { "aria-expanded": this.active.toString(), "aria-haspopup": "listbox", "aria-controls": `c-menu-items-${CMenu._uniqueId}`, class: {
        'c-menu-wrapper': !this.custom,
        custom: this.custom,
      }, tabindex: "0", type: "button", onClick: () => this._onClick() }, this.custom ? (h("slot", null)) : (h("div", { class: "c-menu__header" }, h("slot", null), h("c-icon", { path: mdiChevronDown, class: this.active
        ? 'c-menu__icon c-menu__icon--rotated'
        : 'c-menu__icon' }))))));
  }
  static get is() { return "c-menu"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-menu.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-menu.css"]
    };
  }
  static get properties() {
    return {
      "items": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "CMenuOption[]",
          "resolved": "CMenuOption[]",
          "references": {
            "CMenuOption": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CMenuOption"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Menu items"
        },
        "defaultValue": "[]"
      },
      "contentClass": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Menu content css class"
        },
        "attribute": "content-class",
        "reflect": false,
        "defaultValue": "''"
      },
      "custom": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "No chevron and background, E.g. when a button is the activator"
        },
        "attribute": "custom",
        "reflect": false,
        "defaultValue": "false"
      },
      "small": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Small variant"
        },
        "attribute": "small",
        "reflect": false,
        "defaultValue": "false"
      },
      "flat": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "No hover background"
        },
        "attribute": "flat",
        "reflect": false,
        "defaultValue": "false"
      },
      "itemsPerPage": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Items per page before adding scroll"
        },
        "attribute": "items-per-page",
        "reflect": false,
        "defaultValue": "6"
      }
    };
  }
  static get states() {
    return {
      "menuItemsComponent": {},
      "menuWrapperComponent": {},
      "currentIndex": {},
      "active": {}
    };
  }
  static get elementRef() { return "host"; }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "handleKeyDown",
        "target": undefined,
        "capture": true,
        "passive": false
      }];
  }
}
CMenu._uniqueId = 0;
//# sourceMappingURL=c-menu.js.map
