import { h, } from "@stencil/core";
export class CModal {
  constructor() {
    this._debounce = null;
    this._handleShow = () => {
      if (this._dialog) {
        this._dialog.addEventListener('animationend', this._onDialogOpened);
        this._dialog.classList.add('opening');
        this._dialog.showModal();
      }
    };
    this._onDialogOpened = () => {
      if (this._dialog) {
        this._dialog.removeEventListener('animationend', this._onDialogOpened);
        this._dialog.classList.remove('opening');
      }
    };
    this._handleClose = () => {
      if (this._dialog) {
        this._dialog.addEventListener('animationend', this._onDialogClosed);
        this._dialog.classList.add('closing');
      }
    };
    this._onDialogClosed = () => {
      if (this._dialog) {
        this._dialog.removeEventListener('animationend', this._onDialogClosed);
        this._dialog.classList.remove('closing');
        this._dialog.close();
      }
      if (!document.fullscreenElement)
        return;
      document.exitFullscreen();
    };
    this._handleClickOutside = () => {
      this._dialog.addEventListener('click', (e) => {
        if (e.clientX === 0 && e.clientY === 0)
          return;
        const dialogDimensions = this._dialog.getBoundingClientRect();
        if (e.clientX < dialogDimensions.left ||
          e.clientX > dialogDimensions.right ||
          e.clientY < dialogDimensions.top ||
          e.clientY > dialogDimensions.bottom) {
          if (!this.dismissable) {
            this._dialog.classList.add('nudging');
            if (this._debounce !== null) {
              clearTimeout(this._debounce);
              this._debounce = null;
            }
            this._debounce = window.setTimeout(() => {
              this._dialog.classList.remove('nudging');
              this._debounce = null;
            }, 150);
            return;
          }
          this._handleClose();
          this.changeValue.emit(false);
        }
      });
    };
    this._handleKeyDown = (e) => {
      if (e.keyCode === 27) {
        e.preventDefault();
        this._handleClose();
        this.changeValue.emit(false);
      }
    };
    this.value = false;
    this.dismissable = false;
    this.width = 600;
    this.zIndex = 10;
    this.disableBackdropBlur = false;
    this.innerValue = false;
    this.animateModal = false;
  }
  onValueChange(value) {
    if (value) {
      this._handleShow();
      return;
    }
    this._handleClose();
  }
  componentWillLoad() {
    this.innerValue = this.value;
    const width = isNaN(this.width) ? this.width : `${this.width}px`;
    this.el.style.setProperty('--_c-modal-width', `${width}`);
  }
  componentDidLoad() {
    this._handleClickOutside();
    if (this.value) {
      this._handleShow();
    }
  }
  render() {
    const dialogStyle = {
      'z-index': `${this.zIndex}`,
    };
    const classes = {
      'backdrop-blur': !this.disableBackdropBlur,
    };
    return (h("dialog", { ref: (el) => (this._dialog = el), style: dialogStyle, class: classes, onKeyDown: this._handleKeyDown }, h("slot", null)));
  }
  static get is() { return "c-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-modal.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Is the modal visible"
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "false"
      },
      "dismissable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Dismissed when touching/clicking outside the content"
        },
        "attribute": "dismissable",
        "reflect": false,
        "defaultValue": "false"
      },
      "width": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "string | number",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Width of the dialog. Numeric value is considered as pixel value (400 -> 400px)"
        },
        "attribute": "width",
        "reflect": false,
        "defaultValue": "600"
      },
      "zIndex": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Z-index of the modal"
        },
        "attribute": "z-index",
        "reflect": false,
        "defaultValue": "10"
      },
      "disableBackdropBlur": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable backdrop blur effect"
        },
        "attribute": "disable-backdrop-blur",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "innerValue": {},
      "animateModal": {}
    };
  }
  static get events() {
    return [{
        "method": "changeValue",
        "name": "changeValue",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Triggered when value is changed"
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "onValueChange"
      }];
  }
}
//# sourceMappingURL=c-modal.js.map
