{"version":3,"file":"c-text-field.js","sourceRoot":"","sources":["../../../../src/components/c-text-field/c-text-field.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core';\nimport { mdiCalendar, mdiEye, mdiEyeOff } from '@mdi/js';\n\n/**\n * @group Form\n * @slot pre - Content added before the input\n * @slot post - Content added after the input\n */\n@Component({\n  tag: 'c-text-field',\n  styleUrl: 'c-text-field.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class CTextField {\n  // eslint-disable-next-line\n  @AttachInternals() internals: ElementInternals;\n\n  /**\n   * Auto focus the input\n   */\n  @Prop() autofocus = false;\n\n  /**\n   * HTML input autocapitalize\n   */\n  @Prop() autocapitalize = '';\n\n  /**\n   * HTML input autocorrect\n   */\n  @Prop() autocorrect = '';\n\n  /**\n   * HTML input autocomplete\n   */\n  @Prop() autocomplete = '';\n\n  /**\n   * Disable the input\n   */\n  @Prop() disabled = false;\n\n  /**\n   * Hide the hint and error messages\n   */\n  @Prop() hideDetails = false;\n\n  /**\n   * Hint text for the input\n   */\n  @Prop() hint = '';\n\n  /**\n   * Id of the input\n   */\n  @Prop({ attribute: 'id' }) hostId: string;\n\n  /**\n   * Trim whitespace from the return value\n   */\n  @Prop() trimWhitespace = false;\n\n  /**\n   * Label of the input\n   */\n  @Prop() label: string;\n\n  /**\n   * Maximum value on a numeric input\n   */\n  @Prop() max: number = null;\n\n  /**\n   * Minimum value on a numeric input\n   */\n  @Prop() min: number = null;\n\n  /**\n   * Name of the input\n   */\n  @Prop() name: string;\n\n  /**\n   * Placeholder of the input\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * Mark as readonly\n   */\n  @Prop() readonly = false;\n\n  /**\n   * Set the input as required\n   */\n  @Prop() required = false;\n\n  /**\n   * Rows on the input\n   */\n  @Prop() rows = 1;\n\n  /**\n   * Shadow variant of the input\n   */\n  @Prop() shadow = false;\n\n  /**\n   * Step size on a numeric input\n   */\n  @Prop() step: number = null;\n\n  /**\n   * Type of the input\n   */\n  @Prop() type = 'text';\n\n  /**\n   * Set the validity of the input\n   */\n  @Prop() valid = true;\n\n  /**\n   * Manual validation\n   */\n  @Prop() validate = false;\n\n  /**\n   * Validate the input on blur\n   */\n  @Prop() validateOnBlur = false;\n\n  /**\n   * Custom validation message\n   */\n  @Prop() validation = 'Required field';\n\n  /**\n   * Value of the input\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * Emit changes to the parent\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter;\n\n  @State() isFocused = false;\n\n  @State() labelWidth = 0;\n\n  @State() preSlotWidth = 0;\n\n  @Element() hiddenEl!: HTMLCTextFieldElement;\n\n  private _inputElement: HTMLInputElement;\n\n  private _originalType = '';\n\n  private _inputId: string;\n\n  private static _uniqueId = 0;\n\n  componentWillLoad() {\n    CTextField._uniqueId += 1;\n\n    this._originalType = this.type;\n\n    this._inputId = `${(\n      this.hostId ||\n      this.label ||\n      this.placeholder ||\n      ''\n    ).replace(/[^a-zA-Z0-9-_]/g, '')}_${CTextField._uniqueId}`;\n\n    this.internals.setFormValue(this.value);\n  }\n\n  get isActive() {\n    return !!this.value || this.isFocused;\n  }\n\n  get passwordIcon() {\n    return this.type === 'password' ? mdiEye : mdiEyeOff;\n  }\n\n  private _handleChange = (event) => {\n    if (this.type === 'number' && !event.target.value && event.key === '-') {\n      return;\n    }\n\n    this.value = this.trimWhitespace\n      ? event.target.value.trim()\n      : event.target.value;\n\n    this.changeValue.emit(this.value);\n    this.internals.setFormValue(this.value);\n  };\n\n  private _handleBlur = (event) => {\n    if (this.trimWhitespace) {\n      const trimmedValue = event.target.value.trim();\n\n      event.target.value = trimmedValue;\n    }\n  };\n\n  private _renderInputElement() {\n    const props = {\n      classes: {\n        'c-input__input': true,\n        'c-input__input--filled': !!this.value,\n      },\n      shared: {\n        id: this._inputId,\n        name: this.name,\n        disabled: this.disabled,\n        readonly: this.readonly,\n        value: this.value,\n        onInput: this._handleChange,\n        onChange: this._handleChange,\n        onBlur: this._handleBlur,\n      },\n      input: {\n        type: this.type,\n        min: this.min,\n        max: this.max,\n        step: this.step,\n        ...(!!this.autocomplete && { autocomplete: this.autocomplete }),\n        ...(!!this.autocapitalize && { autocapitalize: this.autocapitalize }),\n        ...(!!this.autocorrect && { autocorrect: this.autocorrect }),\n      },\n      textArea: {\n        rows: this.rows,\n      },\n    };\n\n    const textInput = (\n      <input\n        class={props.classes}\n        {...props.input}\n        {...props.shared}\n        ref={(el) => (this._inputElement = el)}\n      />\n    );\n\n    const textArea = (\n      <textarea\n        class={props.classes}\n        {...props.shared}\n        {...props.textArea}\n      ></textarea>\n    );\n\n    return this.rows > 1 ? textArea : textInput;\n  }\n\n  private _isFirefox() {\n    return !!navigator.userAgent.match(/firefox|fxios/i);\n  }\n\n  private _renderDateToggle() {\n    if (this._originalType !== 'date' || this._isFirefox()) return;\n\n    const classes = {\n      'c-input__date-toggle': true,\n      'c-input__date-toggle--disabled': this.disabled,\n    };\n\n    return (\n      <svg\n        class={classes}\n        viewBox=\"0 0 24 24\"\n        onClick={this._toggleDatepicker.bind(this)}\n      >\n        <path d={mdiCalendar} />\n      </svg>\n    );\n  }\n\n  private _toggleDatepicker() {\n    this._inputElement?.showPicker();\n  }\n\n  private _renderPasswordToggle() {\n    if (this._originalType !== 'password') return;\n\n    const classes = {\n      'c-input__password-toggle': true,\n      'c-input__password-toggle--disabled': this.disabled,\n    };\n\n    return (\n      <svg\n        class={classes}\n        viewBox=\"0 0 24 24\"\n        onClick={this._togglePasswordVisibility}\n      >\n        <path d={this.passwordIcon} />\n      </svg>\n    );\n  }\n\n  private _togglePasswordVisibility = () => {\n    if (this.disabled) return;\n\n    this.type = this.type === 'password' ? 'text' : 'password';\n  };\n\n  render() {\n    return (\n      <Host>\n        <c-input\n          autofocus={this.autofocus}\n          disabled={this.disabled}\n          hide-details={this.hideDetails}\n          hint={this.hint}\n          id={this.hostId}\n          input-id={this._inputId}\n          label={this.label}\n          name={this.name}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          shadow={this.shadow}\n          type={this.type}\n          valid={this.valid}\n          validate={this.validate}\n          validate-on-blur={this.validateOnBlur}\n          validation={this.validation}\n          value={this.value}\n        >\n          <slot name=\"pre\" slot=\"pre\"></slot>\n\n          {this._renderInputElement()}\n\n          {this._renderPasswordToggle()}\n\n          {this._renderDateToggle()}\n\n          <slot name=\"post\"></slot>\n        </c-input>\n      </Host>\n    );\n  }\n}\n"]}