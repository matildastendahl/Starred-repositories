import { mdiFullscreen, mdiFullscreenExit } from "@mdi/js";
import { Host, h, } from "@stencil/core";
export class CCard {
  constructor() {
    this.fullscreen = false;
    this.isFullscreen = false;
  }
  _toggleFullscreen() {
    this.isFullscreen = !this.isFullscreen;
  }
  _onFullscreen() {
    var _a, _b;
    if (document.fullscreenElement) {
      this.exitFullscreen();
      return;
    }
    this.host.requestFullscreen();
    const modalWrapper = (_b = (_a = this.host.parentElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.modal-wrapper');
    if (modalWrapper) {
      modalWrapper.style.display = this.isFullscreen
        ? 'block'
        : 'flex';
    }
  }
  componentDidLoad() {
    const title = this.host.querySelector('c-card-title');
    if (!!title && this.fullscreen) {
      title.style.marginRight = '40px';
    }
    this.host.addEventListener('fullscreenchange', this._toggleFullscreen.bind(this));
  }
  disconnectedCallback() {
    this.host.removeEventListener('fullscreenchange', this._toggleFullscreen.bind(this));
  }
  async exitFullscreen() {
    var _a, _b;
    if (!document.fullscreenElement)
      return;
    document.exitFullscreen();
    const modalWrapper = (_b = (_a = this.host.parentElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.modal-wrapper');
    if (modalWrapper) {
      modalWrapper.style.display = 'flex';
    }
  }
  async enterFullscreen() {
    this.isFullscreen = true;
  }
  render() {
    const hostClasses = {
      'c-card': true,
      'c-card--fullscreen': this.isFullscreen,
    };
    return (h(Host, { class: hostClasses }, h("article", null, this.fullscreen && (h("c-icon-button", { "aria-hidden": "true", class: "c-card__fullscreen-toggle", title: this.isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen', text: true, onClick: () => this._onFullscreen() }, h("c-icon", { path: this.isFullscreen ? mdiFullscreenExit : mdiFullscreen }))), h("slot", null))));
  }
  static get is() { return "c-card"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-card.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-card.css"]
    };
  }
  static get assetsDirs() { return ["assets"]; }
  static get properties() {
    return {
      "fullscreen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enable the fullscreen toggle button"
        },
        "attribute": "fullscreen",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "isFullscreen": {}
    };
  }
  static get methods() {
    return {
      "exitFullscreen": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            },
            "HTMLDivElement": {
              "location": "global",
              "id": "global::HTMLDivElement"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Exit fullscreen from the outside",
          "tags": []
        }
      },
      "enterFullscreen": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Enter fullscreen from the outside",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
}
//# sourceMappingURL=c-card.js.map
