import { h, } from "@stencil/core";
export class CRadioGroup {
  constructor() {
    this._containers = [];
    this._rippleElements = [];
    this._handleSlotChange = () => {
      this._getRadioButtons();
    };
    this._getRadioButtons = () => {
      const radios = this.el.querySelectorAll('c-radio');
      if (radios.length) {
        this.returnObject = false;
        this.items = [
          ...Array.from(radios).map((radio) => {
            if (!!radio.checked) {
              this.value = radio.value;
              this.changeValue.emit(this.value);
            }
            radio.style.display = 'none';
            return {
              name: radio.textContent,
              value: radio.value,
              disabled: !!radio.disabled,
            };
          }),
        ];
      }
    };
    this._getRadioButton = (item, index) => {
      var _a, _b, _c;
      const itemId = item.value.toString().replace(/[^a-zA-Z0-9-_]/g, '');
      const isChecked = !this.returnObject
        ? ((_b = (_a = this.items) === null || _a === void 0 ? void 0 : _a.find((i) => i.value === item.value)) === null || _b === void 0 ? void 0 : _b.value) === this.value
        : ((_c = this.value) === null || _c === void 0 ? void 0 : _c.value) === item.value;
      const classes = {
        'c-radio': true,
        'c-radio--disabled': !!item.disabled || this.disabled,
        'c-radio--error': !this.valid,
      };
      return (h("label", { class: classes, id: itemId, onKeyDown: (event) => this._handleKeyDown(event, item, index) }, h("input", { type: "radio", "aria-checked": (this.value === item).toString(), "aria-disabled": (!!item.disabled || this.disabled).toString(), "aria-labelledby": itemId, disabled: !!item.disabled || this.disabled, checked: isChecked, name: CRadioGroup._uniqueId.toString(), onChange: (event) => this._select(event, item, index) }), h("span", { class: "ripple", ref: (el) => (this._containers[index] = el) }, h("span", { class: "selection" }), h("c-ripple", { ref: (el) => (this._rippleElements[index] = el) })), h("div", { class: "c-radio__label" }, item.name)));
    };
    this.value = undefined;
    this.hideDetails = false;
    this.hint = '';
    this.inline = false;
    this.label = undefined;
    this.color = '';
    this.hostId = undefined;
    this.items = [];
    this.disabled = false;
    this.returnObject = false;
    this.required = false;
    this.valid = true;
    this.validation = 'Required field';
  }
  get _id() {
    return this.hostId || `radio-group_${CRadioGroup._uniqueId}`;
  }
  _handleKeyDown(event, item, index) {
    if (['Space', 'Enter'].includes(event.code)) {
      event.preventDefault();
      this._select(event, item, index);
    }
  }
  _select(event, item, index) {
    if (!!item.disabled || this.disabled)
      return;
    this._rippleElements[index].createRipple(event, this._containers[index], true);
    this.value = !this.returnObject ? item === null || item === void 0 ? void 0 : item.value : item;
    this.changeValue.emit(this.value);
    const value = !this.returnObject
      ? this.value
      : this.value.value;
    this.internals.setFormValue(value);
  }
  componentWillLoad() {
    CRadioGroup._uniqueId += 1;
    const radios = this.el.querySelectorAll('c-radio');
    const checkedRadio = Array.from(radios).find((item) => item.checked);
    if (checkedRadio) {
      const value = checkedRadio.value;
      this.internals.setFormValue(value);
    }
    else if (this.value) {
      const value = !this.returnObject
        ? this.value
        : this.value.value;
      this.internals.setFormValue(value);
    }
  }
  render() {
    const slotHasContent = !!this.el.childNodes.length;
    const wrapperClasses = {
      'c-radio-group': true,
      'c-radio-group--disabled': this.disabled,
      'c-radio-group--inline': this.inline,
      'c-radio-group--error': !this.valid,
    };
    return (h("div", { class: wrapperClasses, role: "radiogroup", "aria-labelledby": "c-radio-group__label" }, (!!this.label || slotHasContent) && (h("label", { class: "c-radio-group__label" }, !!this.label && this.label, h("slot", { onSlotchange: this._handleSlotChange }), this.required && h("span", { class: "required" }, "\u00A0*"))), h("div", { class: "c-radio-group__items" }, this.items.map((item, index) => this._getRadioButton(item, index))), !this.hideDetails && (h("c-message", { hint: this.hint, inputId: this._id, valid: this.valid, validation: this.validation }))));
  }
  static get is() { return "c-radio-group"; }
  static get encapsulation() { return "shadow"; }
  static get formAssociated() { return true; }
  static get originalStyleUrls() {
    return {
      "$": ["c-radio-group.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-radio-group.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "string | number | CRadioGroupItem",
          "resolved": "number | string | { name: string; value: string | number; disabled?: boolean; }",
          "references": {
            "CRadioGroupItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CRadioGroupItem"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Value of the radio group"
        },
        "attribute": "value",
        "reflect": false
      },
      "hideDetails": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hide the hint and error messages"
        },
        "attribute": "hide-details",
        "reflect": false,
        "defaultValue": "false"
      },
      "hint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hint text for the input"
        },
        "attribute": "hint",
        "reflect": false,
        "defaultValue": "''"
      },
      "inline": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Display radio buttons inline"
        },
        "attribute": "inline",
        "reflect": false,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label of the radio group"
        },
        "attribute": "label",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Color of the radio group"
        },
        "attribute": "color",
        "reflect": false,
        "defaultValue": "''"
      },
      "hostId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the element"
        },
        "attribute": "id",
        "reflect": false
      },
      "items": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "CRadioGroupItem[]",
          "resolved": "CRadioGroupItem[]",
          "references": {
            "CRadioGroupItem": {
              "location": "import",
              "path": "../../types",
              "id": "src/types/index.ts::CRadioGroupItem"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Radio group items"
        },
        "defaultValue": "[]"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable the radio group"
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "returnObject": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Return the whole item object"
        },
        "attribute": "return-object",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set as required"
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "valid": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the validity of the input"
        },
        "attribute": "valid",
        "reflect": false,
        "defaultValue": "true"
      },
      "validation": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom validation message"
        },
        "attribute": "validation",
        "reflect": false,
        "defaultValue": "'Required field'"
      }
    };
  }
  static get events() {
    return [{
        "method": "changeValue",
        "name": "changeValue",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emit value change to the parent"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get attachInternalsMemberName() { return "internals"; }
}
CRadioGroup._uniqueId = 0;
//# sourceMappingURL=c-radio-group.js.map
