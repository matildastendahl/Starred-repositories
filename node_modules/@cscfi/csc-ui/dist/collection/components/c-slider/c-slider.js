import { Host, h, } from "@stencil/core";
export class CSlider {
  constructor() {
    this.hostId = undefined;
    this.hostName = undefined;
    this.ariaLabel = undefined;
    this.max = '100';
    this.min = '0';
    this.step = '1';
    this.value = '50';
    this.unit = '%';
    this.ticks = false;
    this.labels = false;
    this.disableTooltip = false;
    this.label = undefined;
    this.disabled = false;
    this.segments = '10';
    this.trackPosition = undefined;
    this.tickPositions = [];
  }
  onSegmentChange() {
    this._calculateTickPositions();
  }
  onValueChange(value) {
    this._calculateTrackPosition();
    requestAnimationFrame(() => {
      this._inputElement.value = value.toString();
    });
  }
  _formatNumber(number, decimals = 0) {
    return new Intl.NumberFormat('fi-FI', {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals,
    }).format(number);
  }
  _calculateTickPositions() {
    this.tickPositions = [...new Array(+this.segments + 1)].map((_, index) => {
      const fraction = +this.max / +this.segments;
      return (index * fraction).toString();
    });
  }
  _calculateTrackPosition() {
    this.trackPosition =
      ((+this.value - +this.min) / (+this.max - +this.min)) * 100;
  }
  _onInput(event) {
    const { value } = event.target;
    this.changeValue.emit(typeof this.value === 'number' ? +value : value);
    this._calculateTrackPosition();
  }
  _isActive(value) {
    return this.trackPosition >= (100 / +this.max) * value;
  }
  componentWillLoad() {
    CSlider._uniqueId += 1;
  }
  componentDidLoad() {
    this._calculateTrackPosition();
    this._calculateTickPositions();
    requestAnimationFrame(() => {
      this._inputElement.value = this.value.toString();
    });
  }
  render() {
    const classes = {
      'c-slider': true,
      'c-slider--labels': this.labels,
    };
    const styles = {
      '--_c-slider-position': `${this.trackPosition}`,
    };
    return (h(Host, { class: classes, style: styles }, !!this.label && (h("label", { class: "c-slider__label" }, !!this.label && this.label)), h("div", { class: "c-slider__wrapper" }, !this.disableTooltip && (h("div", { class: "c-slider__tooltip-wrapper", "aria-hidden": "true" }, h("span", { "data-tooltip": `${this._formatNumber(+this.value)}${this.unit}` }))), h("input", { ref: (el) => (this._inputElement = el), "aria-label": this.ariaLabel || this.label, "aria-valuenow": this.value, "aria-valuetext": `${this.value}${this.unit}`, "aria-valuemin": this.min, "aria-valuemax": this.max, type: "range", name: this.hostName, id: this.hostId || `c-slider__${CSlider._uniqueId}`, min: this.min, max: this.max, step: this.step, disabled: this.disabled, onInput: (event) => this._onInput(event) })), h("div", { class: {
        'c-slider__ticks': true,
        'c-slider__ticks--disabled': this.disabled,
      }, "aria-hidden": "true" }, this.tickPositions.map((position) => (h("span", { class: {
        active: this._isActive(Math.round(+position)),
        ticks: this.ticks,
        labels: this.labels,
      }, "data-value": this._formatNumber(Math.round(+position)) }))))));
  }
  static get is() { return "c-slider"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["c-slider.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["c-slider.css"]
    };
  }
  static get properties() {
    return {
      "hostId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the element"
        },
        "attribute": "id",
        "reflect": false
      },
      "hostName": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Id of the element"
        },
        "attribute": "name",
        "reflect": false
      },
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Aria label"
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "max": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Max value"
        },
        "attribute": "max",
        "reflect": false,
        "defaultValue": "'100'"
      },
      "min": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Min value"
        },
        "attribute": "min",
        "reflect": false,
        "defaultValue": "'0'"
      },
      "step": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Step"
        },
        "attribute": "step",
        "reflect": false,
        "defaultValue": "'1'"
      },
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "string | number",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Value"
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "'50'"
      },
      "unit": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Unit"
        },
        "attribute": "unit",
        "reflect": false,
        "defaultValue": "'%'"
      },
      "ticks": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Thow ticks"
        },
        "attribute": "ticks",
        "reflect": false,
        "defaultValue": "false"
      },
      "labels": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Show tick labels"
        },
        "attribute": "labels",
        "reflect": false,
        "defaultValue": "false"
      },
      "disableTooltip": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable tooltip"
        },
        "attribute": "disable-tooltip",
        "reflect": false,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label of the slider"
        },
        "attribute": "label",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disable the slider"
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "segments": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Segment count"
        },
        "attribute": "segments",
        "reflect": false,
        "defaultValue": "'10'"
      }
    };
  }
  static get states() {
    return {
      "trackPosition": {},
      "tickPositions": {}
    };
  }
  static get events() {
    return [{
        "method": "changeValue",
        "name": "changeValue",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emit value changes to parent"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "segments",
        "methodName": "onSegmentChange"
      }, {
        "propName": "value",
        "methodName": "onValueChange"
      }];
  }
}
CSlider._uniqueId = 0;
//# sourceMappingURL=c-slider.js.map
