{"file":"c-toasts.entry.js","mappings":";;;AAAA,MAAM,UAAU,GAAG,ilBAAilB;;MCmBvlB,OAAO;;;IAsBV,uBAAkB,GAAG,OAAO;MAClC,IAAI,EAAE,UAAU,CAAC,IAAI;MACrB,QAAQ,EAAE,IAAI;MACd,UAAU,EAAE,KAAK;MACjB,aAAa,EAAE,KAAK;MACpB,QAAQ,EAAE,cAAc,CAAC,KAAK;MAC9B,QAAQ,EAAE,KAAK;MACf,EAAE,EAAE,gBAAgB,OAAO,CAAC,SAAS,EAAE;KACxC,CAAC,CAAC;oBAxBgB,KAAK;sBAK0B,QAAQ;oBAKrB,QAAQ;oBAER,EAAE;;EAkBvC,MAAM,QAAQ,CAAC,OAAsB;IACnC,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;IAEzE,IAAI,OAAO,CAAC,MAAM,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;MAC/C,OAAO,CAAC,IAAI,CACV,+FAA+F,CAChG,CAAC;KACH;SAAM;MACL,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;MAEvB,qBAAqB,CAAC;QACpB,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAEjD,IAAI,CAAC,QAAQ,GAAG;UACd,GAAG,IAAI,CAAC,QAAQ;wDAEX,cAAc,GACd,OAAO,KACV,QAAQ,EACN,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAA,GAAG,CAAC;gBAClB,CAAC,OAAO,CAAC,QAAQ;gBACjB,cAAc,CAAC,QAAQ;SAEhC,CAAC;OACH,CAAC,CAAC;KACJ;GACF;EAMD,MAAM,WAAW,CAAC,EAAU;IAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAC5C,aAAa,EAAE,EAAE,CACG,CAAC;IAEvB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,EAAE,CAAC;GACrB;EAEO,eAAe,CAAC,KAAkB;IACxC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;GACtC;EAEO,cAAc,CAAC,EAAU;IAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAC5C,aAAa,EAAE,EAAE,CACG,CAAC;IAEvB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,EAAE,CAAC;IAEhB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;IAE3E,IAAI,YAAY,KAAK,CAAC,EAAE;MACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;KAC5B;GACF;EAEO,cAAc,CAAC,OAAsB;IAC3C,QACE,eAAS,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAC/D,OAAO,CAAC,MAAM,IAAI,eAAQ,CACnB,EACV;GACH;EAED,iBAAiB;IACf,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;GACxB;EAED,MAAM;IACJ,QACE,EAAC,IAAI,IACH,KAAK,EAAE;QACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QACrB,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI;OACxB,IAEA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CACxD,EACP;GACH;;;AAlGc,iBAAS,GAAG,CAAH,CAAK;;;;;","names":[],"sources":["src/components/c-toasts/c-toasts.scss?tag=c-toasts&encapsulation=shadow","src/components/c-toasts/c-toasts.tsx"],"sourcesContent":[":host {\n  display: grid;\n  gap: 12px;\n  grid-template-columns: 1fr;\n  left: 0;\n  max-width: 100%;\n  min-width: 30vw;\n  padding: 12px;\n  pointer-events: none;\n  position: fixed;\n  right: 0;\n  width: 640px;\n  z-index: 10000;\n}\n\n:host(.absolute) {\n  position: absolute;\n}\n\n:host(.bottom) {\n  bottom: 0;\n}\n\n:host(.top) {\n  top: 0;\n}\n\n:host(.right) {\n  justify-content: end;\n  left: auto;\n  right: 0;\n}\n\n:host(.left) {\n  justify-content: start;\n  left: 0;\n  right: auto;\n}\n\n:host(.center) {\n  justify-content: center;\n  margin: 0 auto;\n}\n","import {\n  Component,\n  Host,\n  h,\n  Prop,\n  Element,\n  Method,\n  State,\n} from '@stencil/core';\nimport { CToastMessage, CToastPosition, CToastType } from '../../types';\n\n/**\n * @group Popups\n */\n@Component({\n  tag: 'c-toasts',\n  styleUrl: 'c-toasts.scss',\n  shadow: true,\n})\nexport class CToasts {\n  @Element() el: HTMLCToastsElement;\n\n  /**\n   * Use absolute positioning\n   */\n  @Prop() absolute = false;\n\n  /**\n   * Horizontal position\n   */\n  @Prop() horizontal: 'left' | 'center' | 'right' = 'center';\n\n  /**\n   * Vertical position\n   */\n  @Prop() vertical: 'top' | 'bottom' = 'bottom';\n\n  @State() messages: CToastMessage[] = [];\n\n  private static _uniqueId = 0;\n\n  private _getDefaultOptions = () => ({\n    type: CToastType.Info,\n    duration: 6000,\n    persistent: false,\n    indeterminate: false,\n    position: CToastPosition.Fixed,\n    progress: false,\n    id: `c-toast-item-${CToasts._uniqueId}`,\n  });\n\n  /**\n   * Add a new message\n   */\n  @Method()\n  async addToast(message: CToastMessage) {\n    const customMessages = this.messages.filter((message) => message.custom);\n\n    if (message.custom && customMessages.length > 0) {\n      console.warn(\n        `Custom toast messages are restricted to 1 visible message due to slot reflection limitations.`,\n      );\n    } else {\n      CToasts._uniqueId += 1;\n\n      requestAnimationFrame(() => {\n        const defaultOptions = this._getDefaultOptions();\n\n        this.messages = [\n          ...this.messages,\n          {\n            ...defaultOptions,\n            ...message,\n            duration:\n              +message?.duration > 0\n                ? +message.duration\n                : defaultOptions.duration,\n          },\n        ];\n      });\n    }\n  }\n\n  /**\n   * Remove a message by id (id should be specified in the addToast params)\n   */\n  @Method()\n  async removeToast(id: string) {\n    const toast = this.el.shadowRoot.querySelector(\n      `#c-toast--${id}`,\n    ) as HTMLCToastElement;\n\n    toast?.closeToast();\n  }\n\n  private _onMessageClose(event: CustomEvent) {\n    this._removeMessage(event.detail.id);\n  }\n\n  private _removeMessage(id: string) {\n    const toast = this.el.shadowRoot.querySelector(\n      `#c-toast--${id}`,\n    ) as HTMLCToastElement;\n\n    toast?.remove();\n\n    const messageCount = this.el.shadowRoot.querySelectorAll('c-toast').length;\n\n    if (messageCount === 0) {\n      this.messages = [].slice();\n    }\n  }\n\n  private _renderMessage(message: CToastMessage) {\n    return (\n      <c-toast message={message} onClose={(e) => this._onMessageClose(e)}>\n        {message.custom && <slot />}\n      </c-toast>\n    );\n  }\n\n  componentWillLoad() {\n    CToasts._uniqueId += 1;\n  }\n\n  render() {\n    return (\n      <Host\n        class={{\n          absolute: this.absolute,\n          [this.vertical]: true,\n          [this.horizontal]: true,\n        }}\n      >\n        {this.messages.map((message) => this._renderMessage(message))}\n      </Host>\n    );\n  }\n}\n"],"version":3}