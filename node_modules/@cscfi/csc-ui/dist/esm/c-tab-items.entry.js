import { r as registerInstance, h, H as Host, g as getElement } from './index-47956d53.js';

const cTabItemsCss = "html{box-sizing:border-box}body{margin:0}*,*:before,*:after{box-sizing:inherit;-webkit-tap-highlight-color:transparent}:host{font-family:var(--c-font-family)}::-ms-reveal{display:none}:host{--_c-tab-items-height:auto;--_c-tab-items-position-left:0;--_c-tab-items-animation-duration:0.001ms;display:block;height:var(--_c-tab-items-height);overflow:hidden;transition:height var(--_c-tab-items-animation-duration) cubic-bezier(0.075, 0.82, 0.165, 1);width:100%}:host>div{align-items:flex-start;display:flex;transition:translate var(--_c-tab-items-animation-duration) cubic-bezier(0.075, 0.82, 0.165, 1);translate:var(--_c-tab-items-position-left)}";

const CTabItems = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this._debounce = null;
    this._isAnimating = false;
    this._initialized = false;
    this.value = undefined;
    this.disableAnimation = false;
    this.activeTab = undefined;
  }
  onValueChange() {
    this._setActiveTab();
  }
  tabContentChangeHandler(e) {
    e.stopPropagation();
    this.el.style.setProperty('--_c-tab-items-height', 'auto');
  }
  get _tabs() {
    return Array.from(this.el.querySelectorAll('c-tab-item'));
  }
  _setActiveTab() {
    this._tabs.forEach((tab) => {
      if (tab.value === this.value) {
        this.activeTab = tab;
      }
      tab.classList.toggle('active', tab.value === this.value);
    });
    this.el.style.setProperty('--_c-tab-items-height', `${this.activeTab.scrollHeight}px`);
    requestAnimationFrame(() => {
      this.el.style.setProperty('--_c-tab-items-position-left', `${-1 * this.activeTab.offsetLeft}px`);
      if (!this.disableAnimation && !this._initialized) {
        this._initialized = true;
        setTimeout(() => {
          this.el.style.setProperty('--_c-tab-items-animation-duration', '300ms');
        }, 500);
      }
    });
  }
  _handleResize() {
    if (this._isAnimating || !this._initialized)
      return;
    if (this._debounce !== null) {
      clearTimeout(this._debounce);
      this._debounce = null;
    }
    this._debounce = setTimeout(() => {
      this._setActiveTab();
    }, 50);
  }
  componentWillLoad() {
    if (this.disableAnimation) {
      this.el.style.setProperty('--c-tab-items-animation-duration', '0ms');
    }
  }
  componentDidLoad() {
    this._resizeObserver = new ResizeObserver(() => {
      this._handleResize();
    });
    this._resizeObserver.observe(this.el);
  }
  render() {
    return (h(Host, null, h("div", null, h("slot", null))));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "value": ["onValueChange"]
  }; }
};
CTabItems.style = cTabItemsCss;

export { CTabItems as c_tab_items };

//# sourceMappingURL=c-tab-items.entry.js.map