{"version":3,"names":["cToastsCss","CToasts","this","_getDefaultOptions","type","CToastType","Info","duration","persistent","indeterminate","position","CToastPosition","Fixed","progress","id","_uniqueId","addToast","message","customMessages","messages","filter","custom","length","console","warn","requestAnimationFrame","defaultOptions","removeToast","toast","el","shadowRoot","querySelector","closeToast","_onMessageClose","event","_removeMessage","detail","remove","messageCount","querySelectorAll","slice","_renderMessage","h","onClose","e","componentWillLoad","render","Host","class","absolute","vertical","horizontal","map"],"sources":["src/components/c-toasts/c-toasts.scss?tag=c-toasts&encapsulation=shadow","src/components/c-toasts/c-toasts.tsx"],"sourcesContent":[":host {\n  display: grid;\n  gap: 12px;\n  grid-template-columns: 1fr;\n  left: 0;\n  max-width: 100%;\n  min-width: 30vw;\n  padding: 12px;\n  pointer-events: none;\n  position: fixed;\n  right: 0;\n  width: 640px;\n  z-index: 10000;\n}\n\n:host(.absolute) {\n  position: absolute;\n}\n\n:host(.bottom) {\n  bottom: 0;\n}\n\n:host(.top) {\n  top: 0;\n}\n\n:host(.right) {\n  justify-content: end;\n  left: auto;\n  right: 0;\n}\n\n:host(.left) {\n  justify-content: start;\n  left: 0;\n  right: auto;\n}\n\n:host(.center) {\n  justify-content: center;\n  margin: 0 auto;\n}\n","import {\n  Component,\n  Host,\n  h,\n  Prop,\n  Element,\n  Method,\n  State,\n} from '@stencil/core';\nimport { CToastMessage, CToastPosition, CToastType } from '../../types';\n\n/**\n * @group Popups\n */\n@Component({\n  tag: 'c-toasts',\n  styleUrl: 'c-toasts.scss',\n  shadow: true,\n})\nexport class CToasts {\n  @Element() el: HTMLCToastsElement;\n\n  /**\n   * Use absolute positioning\n   */\n  @Prop() absolute = false;\n\n  /**\n   * Horizontal position\n   */\n  @Prop() horizontal: 'left' | 'center' | 'right' = 'center';\n\n  /**\n   * Vertical position\n   */\n  @Prop() vertical: 'top' | 'bottom' = 'bottom';\n\n  @State() messages: CToastMessage[] = [];\n\n  private static _uniqueId = 0;\n\n  private _getDefaultOptions = () => ({\n    type: CToastType.Info,\n    duration: 6000,\n    persistent: false,\n    indeterminate: false,\n    position: CToastPosition.Fixed,\n    progress: false,\n    id: `c-toast-item-${CToasts._uniqueId}`,\n  });\n\n  /**\n   * Add a new message\n   */\n  @Method()\n  async addToast(message: CToastMessage) {\n    const customMessages = this.messages.filter((message) => message.custom);\n\n    if (message.custom && customMessages.length > 0) {\n      console.warn(\n        `Custom toast messages are restricted to 1 visible message due to slot reflection limitations.`,\n      );\n    } else {\n      CToasts._uniqueId += 1;\n\n      requestAnimationFrame(() => {\n        const defaultOptions = this._getDefaultOptions();\n\n        this.messages = [\n          ...this.messages,\n          {\n            ...defaultOptions,\n            ...message,\n            duration:\n              +message?.duration > 0\n                ? +message.duration\n                : defaultOptions.duration,\n          },\n        ];\n      });\n    }\n  }\n\n  /**\n   * Remove a message by id (id should be specified in the addToast params)\n   */\n  @Method()\n  async removeToast(id: string) {\n    const toast = this.el.shadowRoot.querySelector(\n      `#c-toast--${id}`,\n    ) as HTMLCToastElement;\n\n    toast?.closeToast();\n  }\n\n  private _onMessageClose(event: CustomEvent) {\n    this._removeMessage(event.detail.id);\n  }\n\n  private _removeMessage(id: string) {\n    const toast = this.el.shadowRoot.querySelector(\n      `#c-toast--${id}`,\n    ) as HTMLCToastElement;\n\n    toast?.remove();\n\n    const messageCount = this.el.shadowRoot.querySelectorAll('c-toast').length;\n\n    if (messageCount === 0) {\n      this.messages = [].slice();\n    }\n  }\n\n  private _renderMessage(message: CToastMessage) {\n    return (\n      <c-toast message={message} onClose={(e) => this._onMessageClose(e)}>\n        {message.custom && <slot />}\n      </c-toast>\n    );\n  }\n\n  componentWillLoad() {\n    CToasts._uniqueId += 1;\n  }\n\n  render() {\n    return (\n      <Host\n        class={{\n          absolute: this.absolute,\n          [this.vertical]: true,\n          [this.horizontal]: true,\n        }}\n      >\n        {this.messages.map((message) => this._renderMessage(message))}\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAa,klB,MCmBNC,EAAO,M,yBAsBVC,KAAAC,mBAAqB,MAC3BC,KAAMC,EAAWC,KACjBC,SAAU,IACVC,WAAY,MACZC,cAAe,MACfC,SAAUC,EAAeC,MACzBC,SAAU,MACVC,GAAI,gBAAgBb,EAAQc,c,cAvBX,M,gBAK+B,S,cAKb,S,cAEA,E,CAkBrC,cAAMC,CAASC,GACb,MAAMC,EAAiBhB,KAAKiB,SAASC,QAAQH,GAAYA,EAAQI,SAEjE,GAAIJ,EAAQI,QAAUH,EAAeI,OAAS,EAAG,CAC/CC,QAAQC,KACN,gG,KAEG,CACLvB,EAAQc,WAAa,EAErBU,uBAAsB,KACpB,MAAMC,EAAiBxB,KAAKC,qBAE5BD,KAAKiB,SAAW,IACXjB,KAAKiB,S,6CAEHO,GACAT,GAAO,CACVV,WACGU,IAAO,MAAPA,SAAO,SAAPA,EAASV,UAAW,GAChBU,EAAQV,SACTmB,EAAenB,WAExB,G,EASP,iBAAMoB,CAAYb,GAChB,MAAMc,EAAQ1B,KAAK2B,GAAGC,WAAWC,cAC/B,aAAajB,KAGfc,IAAK,MAALA,SAAK,SAALA,EAAOI,Y,CAGD,eAAAC,CAAgBC,GACtBhC,KAAKiC,eAAeD,EAAME,OAAOtB,G,CAG3B,cAAAqB,CAAerB,GACrB,MAAMc,EAAQ1B,KAAK2B,GAAGC,WAAWC,cAC/B,aAAajB,KAGfc,IAAK,MAALA,SAAK,SAALA,EAAOS,SAEP,MAAMC,EAAepC,KAAK2B,GAAGC,WAAWS,iBAAiB,WAAWjB,OAEpE,GAAIgB,IAAiB,EAAG,CACtBpC,KAAKiB,SAAW,GAAGqB,O,EAIf,cAAAC,CAAexB,GACrB,OACEyB,EAAA,WAASzB,QAASA,EAAS0B,QAAUC,GAAM1C,KAAK+B,gBAAgBW,IAC7D3B,EAAQI,QAAUqB,EAAA,a,CAKzB,iBAAAG,GACE5C,EAAQc,WAAa,C,CAGvB,MAAA+B,GACE,OACEJ,EAACK,EAAI,CACHC,MAAO,CACLC,SAAU/C,KAAK+C,SACf,CAAC/C,KAAKgD,UAAW,KACjB,CAAChD,KAAKiD,YAAa,OAGpBjD,KAAKiB,SAASiC,KAAKnC,GAAYf,KAAKuC,eAAexB,K,2BA/F3ChB,EAAAc,UAAY,E"}