{"version":3,"names":["cAccordionCss","CAccordion","watchPropHandler","value","this","changeValue","emit","_handleItemExpansion","onAccordionItemChange","event","expanded","detail","multiple","Array","isArray","push","filter","v","items","from","el","childNodes","isExpanded","item","includes","isLastExpandedItem","length","collapsable","mandatory","outlined","componentDidLoad","render","h","class"],"sources":["src/components/c-accordion/c-accordion.scss?tag=c-accordion&encapsulation=shadow","src/components/c-accordion/c-accordion.tsx"],"sourcesContent":[".c-accordion {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n\n  ::slotted(*) {\n    flex-basis: 100%;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Prop,\n  Watch,\n} from '@stencil/core';\n\n/**\n * @group Content Selectors\n * @slot Default slot - Default slot for the c-accordion-item components\n */\n@Component({\n  tag: 'c-accordion',\n  styleUrl: 'c-accordion.scss',\n  shadow: true,\n})\nexport class CAccordion {\n  /**\n   * Value of the accordion\n   */\n  @Prop({ mutable: true }) value!: number | string | (number | string)[];\n\n  /**\n   * Disallow collapsing all the items\n   */\n  @Prop() mandatory = false;\n\n  /**\n   * Allow expanding multiple items\n   */\n  @Prop() multiple = false;\n\n  /**\n   * Show an outline around expanded items\n   */\n  @Prop() outlined = false;\n\n  /**\n   * Emit changes to the parent\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter<number | string>;\n\n  @Element() el: HTMLCAccordionElement;\n\n  @Watch('value')\n  watchPropHandler(value: string | number) {\n    this.changeValue.emit(value);\n    this._handleItemExpansion();\n  }\n\n  @Listen('itemChange', { passive: true })\n  onAccordionItemChange(\n    event: CustomEvent<{ value: number | string; expanded: boolean }>,\n  ) {\n    const { value, expanded } = event.detail;\n\n    if (this.multiple && Array.isArray(this.value)) {\n      if (expanded) {\n        this.value.push(value);\n      } else {\n        this.value = this.value.filter((v) => v !== value);\n      }\n    } else {\n      this.value = expanded ? value : null;\n    }\n  }\n\n  get items() {\n    return Array.from(this.el.childNodes) as HTMLCAccordionItemElement[];\n  }\n\n  private _handleItemExpansion() {\n    const isExpanded = (item) =>\n      Array.isArray(this.value)\n        ? this.value.includes(item.value)\n        : item.value === this.value;\n\n    const isLastExpandedItem = (item) =>\n      Array.isArray(this.value)\n        ? isExpanded(item) && this.value.length === 1\n        : isExpanded(item);\n\n    for (const item of this.items) {\n      item.collapsable =\n        !this.mandatory || (this.mandatory && !isLastExpandedItem(item));\n      item.outlined = this.outlined;\n      item.expanded = isExpanded(item);\n    }\n  }\n\n  componentDidLoad() {\n    this._handleItemExpansion();\n  }\n\n  render() {\n    return (\n      <div class=\"c-accordion\">\n        <slot></slot>\n      </div>\n    );\n  }\n}\n"],"mappings":"yDAAA,MAAMA,EAAgB,sR,MCoBTC,EAAU,M,sGASD,M,cAKD,M,cAKA,K,CAUnB,gBAAAC,CAAiBC,GACfC,KAAKC,YAAYC,KAAKH,GACtBC,KAAKG,sB,CAIP,qBAAAC,CACEC,GAEA,MAAMN,MAAEA,EAAKO,SAAEA,GAAaD,EAAME,OAElC,GAAIP,KAAKQ,UAAYC,MAAMC,QAAQV,KAAKD,OAAQ,CAC9C,GAAIO,EAAU,CACZN,KAAKD,MAAMY,KAAKZ,E,KACX,CACLC,KAAKD,MAAQC,KAAKD,MAAMa,QAAQC,GAAMA,IAAMd,G,MAEzC,CACLC,KAAKD,MAAQO,EAAWP,EAAQ,I,EAIpC,SAAIe,GACF,OAAOL,MAAMM,KAAKf,KAAKgB,GAAGC,W,CAGpB,oBAAAd,GACN,MAAMe,EAAcC,GAClBV,MAAMC,QAAQV,KAAKD,OACfC,KAAKD,MAAMqB,SAASD,EAAKpB,OACzBoB,EAAKpB,QAAUC,KAAKD,MAE1B,MAAMsB,EAAsBF,GAC1BV,MAAMC,QAAQV,KAAKD,OACfmB,EAAWC,IAASnB,KAAKD,MAAMuB,SAAW,EAC1CJ,EAAWC,GAEjB,IAAK,MAAMA,KAAQnB,KAAKc,MAAO,CAC7BK,EAAKI,aACFvB,KAAKwB,WAAcxB,KAAKwB,YAAcH,EAAmBF,GAC5DA,EAAKM,SAAWzB,KAAKyB,SACrBN,EAAKb,SAAWY,EAAWC,E,EAI/B,gBAAAO,GACE1B,KAAKG,sB,CAGP,MAAAwB,GACE,OACEC,EAAA,OAAKC,MAAM,eACTD,EAAA,a"}